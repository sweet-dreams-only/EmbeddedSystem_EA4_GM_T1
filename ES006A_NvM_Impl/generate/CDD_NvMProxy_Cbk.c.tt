<#@ AutosarXml processor="ArDirectiveProcessor" requires="arPrefix='ar';arNamespace='http://autosar.org/4.0.3'" #>
<#@ template inherits="AutosarDirectiveProcessor.ArGtcBase" debug="true" #>
<#@ output extension="" #>
<#@ include file="Helper.tt" #><#
    /* Grab the NvM OS Application Reference */
    ChangeContext( Xp.ModuleConfAtDefRefTo( "CDD_NvMProxy/NvMProxyCommon" ) );
    string NvMOsApp = LastValueSegmentOf( Xp.ValueRefAtDefRefTo( "NvMOsApplicationRef" ));
#>
<# 
    /* List declaration */
    List<string> OSAppList = new List<string>();
    List<string> OSTaskList = new List<string>();
    List<NvInstanceClass> NvInstanceList = new List<NvInstanceClass>();
    List<string> NvRamAllocList = new List<string>();
    List<OperGenClass> OperGenList = new List<OperGenClass>();
    List<string> OsAppNTList = new List<string>();
    string OSTaskRef = "";
    string NvBlkRef = "";
    
    ChangeContext( Xp.ModuleConfAtDefRefTo( "Os" ) );
#>
<# !LOOP( Xp.ContainerAtDefRefTo( "OsApplication" ) ) #>
<# 
    /* Gather the name of all OS Applications */
    OSAppList.Add(ValueOf( "ar:SHORT-NAME" )); 
#>
<# !ENDLOOP #>
<# !LOOP( Xp.ContainerAtDefRefTo( "OsTask" ) ) #>
<# 
    /* Gather the names of all OS Tasks */
    OSTaskList.Add(ValueOf( "ar:SHORT-NAME" )); 
#>
<# !ENDLOOP #>
<#
    ChangeContext( Xp.ModuleConfAtDefRefTo( "Rte" ));
#>
<# !LOOP( Xp.ContainerAtDefRefTo( "RteSwComponentInstance" )) #>
<#
    int CountNvRamAlloc = Count( Xp.ContainerAtDefRefTo( "RteNvRamAllocation" ) );
    int CountTaskMapping = Count( Xp.ContainerAtDefRefTo( "RteEventToTaskMapping" ) );
    if ( (CountTaskMapping > 0) && (CountNvRamAlloc > 0))
    {
#>
<# !LOOP( Xp.ContainerAtDefRefTo( "RteEventToTaskMapping" ) ) #>
<#
        OSTaskRef = "";
        try
        {
            /* Grab any event that is mapped to a RTE task. Since this is for each component,
            the assumption is that only one Application is used, regardless of the task selected */
            OSTaskRef = LastValueSegmentOf(Xp.ValueRefAtDefRefTo( "RteMappedToTaskRef" ));
        }
        catch
        {
            OSTaskRef = "NONE";
        }
#>
<# !ENDLOOP #>
<# !LOOP( Xp.ContainerAtDefRefTo( "RteNvRamAllocation" ) ) #>
<#
        NvBlkRef = "";
        try
        {
            NvBlkRef = LastValueSegmentOf(Xp.ValueRefAtDefRefTo( "RteNvmBlockRef" ));
        }
        catch
        {
            NvBlkRef = "NONE";
        }
        
        /* New class instance */
        NvInstanceClass data = new NvInstanceClass();
        if ( (OSTaskRef != "NONE") && (NvBlkRef != "NONE") )
        {
            foreach (string Appl in OSAppList)
            {
                if( true == OSTaskRef.EndsWith(Appl) )
                {
                    data.OSTask = Appl;
                    data.NvBlkRef = NvBlkRef;
                    NvInstanceList.Add(data);
                }
            }
        }
#>
<# !ENDLOOP #>
<# 
    }
#>
<# !ENDLOOP #>
<#
    /* Match up NvM definitions with the configurations found in the Rte */
    ChangeContext( Xp.ModuleConfAtDefRefTo( "NvM" ) );
#>
<# !LOOP( Xp.ContainerAtDefRefTo( "NvMBlockDescriptor" ) ) #>
<#
    foreach (NvInstanceClass entry in NvInstanceList)
    {
        if (( entry.NvBlkRef == ValueOf( "ar:SHORT-NAME" ) ) && ( true == ValueOf( Xp.ValueAtDefRefTo( "NvMBlockUseSyncMechanism" ) ) ))
        {
            OperGenClass data = new OperGenClass();
            
            data.OSAppl = entry.OSTask;
            data.NvBlkId = ValueOf( Xp.ValueAtDefRefTo( "NvMNvramBlockIdentifier" ) );
            data.BlkLen = ValueOf( Xp.ValueAtDefRefTo( "NvMNvBlockLength" ) );
            data.NvDataSet = ValueOf( Xp.ValueAtDefRefTo( "NvMNvBlockNum" ) );
            data.ReadCallBack = ValueOf( Xp.ValueAtDefRefTo( "NvMReadRamBlockFromNvCallback" ) );
            data.WrCallBack = ValueOf( Xp.ValueAtDefRefTo( "NvMWriteRamBlockToNvCallback" ) );
            data.RamBlk = ValueOf( Xp.ValueAtDefRefTo( "NvMRamBlockDataAddress" ) );
            data.ShortName = ValueOf( "ar:SHORT-NAME" );
            data.IdxDef = "NVMPROXY_" + data.ShortName.ToUpper() + "_IDX_CNT_U08";

            /* Add all information into this final list. This list is used to generate the functions. */
            OperGenList.Add(data);
        }
    }
#>
<# !ENDLOOP #>
/**********************************************************************************************************************
* Copyright 2015, 2016 Nxtr 
* Nxtr Confidential
*
* Module File Name:   CDD_NvMProxy_Cbk.c
* Module Description: Callback operations used by NvMProxy
* Project           : CBD 
* Author            : Kevin Smith
***********************************************************************************************************************
* Version Control:
* %version:          4 %
* %derived_by:       cz7lt6 %
*----------------------------------------------------------------------------------------------------------------------
* Date      Rev      Author         Change Description                                                           SCR #
* -------   -------  --------  ---------------------------------------------------------------------------     --------
* 07/15/15  1        KJS       Initial Version                                                                 EA4#471
* 01/27/16  2        KJS       Renamed template to match EA4 naming conventions                                EA4#3443
* 06/29/16  3        OT        Added functionality for quick ignition cycles                                   EA4#6448
* 09/28/16  4        KJS       EA4 naming convention corrections                                               EA4#7779
**********************************************************************************************************************/

#include "Std_Types.h"
#include "NvM.h"
#include "CDD_NvMProxy.h"
#include "CDD_NvMProxy_Cbk.h"
#include "Nvm_PrivateCfg.h"
#include "Rte_CDD_NvMProxy.h"

<#
    foreach (OperGenClass item in OperGenList)
    {
        if(NvMOsApp != item.OSAppl)
        {
#>
#include "Os.h"
<#
        break;
        }
    }
#>

/******************************************** File Level Rule Deviations *********************************************/
/* MISRA-C:2004 Rule 19.1 [NXTRDEV 19.1.1]: AUTOSAR requires deviation from this rule for Memory Mapping include statements */
/* MISRA-C:2004 Rule 11.4 [NXTRDEV 11.4.5]: Cast of a variable pointer to a pointer of a different type is allowed for the purpose of efficient memory copying */

/********************************************* Embedded Local Constants **********************************************/
<#
    foreach (OperGenClass item in OperGenList)
    {
#>
#define <#= item.IdxDef #> <#= item.NvBlkId #>U
<#
    }
#>

/******************************************* Module Specific Data Types **********************************************/

typedef struct {
    uint8        BlockId;
    const uint8* NvMBuffer;
} NtNvMReadOperCallBackRec;

typedef struct {
    uint8   BlockId;
    uint8*  NvMBuffer;
} NtNvMWrOperCallBackRec;

/******************************************** Module Specific Variables **********************************************/

#define CDD_NvMProxy_START_SEC_CONST_UNSPECIFIED
#include "CDD_NvMProxy_MemMap.h"


/**********************************************************************************************************************
* Name:         NvMProxy_MultiBlkCallBack
*
* Description:  Multi block callback for the NvM component.  After a WriteAll operation, this callback restores the
*               RAM block status flags (in case of a quick ignition cycle).
*
* Inputs:       ServiceId_Cnt_T_u08 - the service that is being run (ReadAll/WriteAll)
*               JobStatus_Cnt_T_u08 - status of job (pending, completed okay, completed not okay)
*
* Outputs:      N/A
*
* Usage Notes:  The NvM multi block callback does not call this routine when the status is pending, however, the BswM 
* function need to call this function prior to calling the WriteAll. Pending should be passed so that the PIM is 
* updated with all the block statues in case of a quick ignition cycle. This call back is called by the NvM multi 
* block callback when the write all has completed or is cancelled by the NvM_CancelWriteAll() or NvM_KilLWriteAll()
**********************************************************************************************************************/
FUNC(void, CDD_NvMProxy_CODE) NvMProxy_MultiBlkCallBack( NvM_ServiceIdType SrvId_Cnt_T_u08,
                                                         NvM_RequestResultType JobSts_Cnt_T_u08 )
{
    VAR(uint16, AUTOMATIC) Idx_Cnt_T_u16;
    
    if( NVM_WRITE_ALL == SrvId_Cnt_T_u08 )
    {
        if( NVM_REQ_PENDING == JobSts_Cnt_T_u08 )
        {
            /* Index is started at 1 because 0 is the multiblock and is not needed to be processed */
            for( Idx_Cnt_T_u16 = 1U; Idx_Cnt_T_u16 < NVM_TOTAL_NUM_OF_NVRAM_BLOCKS; Idx_Cnt_T_u16++ )
            {
                if( (NvM_BlockMngmtArea_at[Idx_Cnt_T_u16].NvRamAttributes_u8 & NVM_STATE_CHANGED_SET) != 0U )
                {
                    Rte_Pim_NvmBlkActv()[Idx_Cnt_T_u16] = TRUE;
                }
                else
                {
                    Rte_Pim_NvmBlkActv()[Idx_Cnt_T_u16] = FALSE;
                }
            }

            *Rte_Pim_NvmStsCollctd() = TRUE;
        }
        else
        {
            if( TRUE == *Rte_Pim_NvmStsCollctd() )
            {
                /* Index is started at 1 because 0 is the multiblock and is not needed to be processed */
                for( Idx_Cnt_T_u16 = 1U; Idx_Cnt_T_u16 < NVM_TOTAL_NUM_OF_NVRAM_BLOCKS; Idx_Cnt_T_u16++ )
                {
                    if( TRUE == Rte_Pim_NvmBlkActv()[Idx_Cnt_T_u16] )
                    {
                        (void)NvM_SetRamBlockStatus(Idx_Cnt_T_u16, TRUE);
                    }
                }

                *Rte_Pim_NvmStsCollctd() = FALSE;
            }
        }
    }

    return;
}

<#
    /* Generate each function required */
    foreach (OperGenClass item in OperGenList)
    {
#>

/**********************************************************************************************************************
* Name:         <#= item.ReadCallBack #>
*
* Description:  Callback to move data from the NvM RAM buffer to the block NvM RAM shadow (<#= item.RamBlk #>).
*
* Inputs:       NvMBuffer - Buffer defined by the NvM BSW that the contains the data to be copied into the block's 
*                           RAM shadow. 
*
* Outputs:      E_OK
*
<# 
    if(NvMOsApp == item.OSAppl)
    {
#>
* Usage Notes:  This function is generated if the NvMProxy generation script.
<#
    } else {
#>
* Usage Notes:  This function is generated if the NvMProxy generation script. Since the buffer is not located in 
*               application <#= NvMOsApp #>, a non-trusted function is used to change the OS context to <#= item.OSAppl #>.
<#
    }
#>
**********************************************************************************************************************/
FUNC(Std_ReturnType, AUTOMATIC) <#= item.ReadCallBack #>( const void * NvMBuffer )
{
<#
        if(NvMOsApp == item.OSAppl)
        {
#>
    VAR(uint16, AUTOMATIC) Idx_Cnt_T_u16;

    for(Idx_Cnt_T_u16 = 0u; Idx_Cnt_T_u16 < NvM_BlockDescriptorTable_at[<#= item.IdxDef #>].NvBlockLength_u16; Idx_Cnt_T_u16++)
    {
        ((uint8 *)(NvM_BlockDescriptorTable_at[<#= item.IdxDef #>].RamBlockDataAddr_t))[Idx_Cnt_T_u16] = ((uint8 *)NvMBuffer)[Idx_Cnt_T_u16];
    }

    return E_OK;
<#
        }
        else
        {
            /* Add application to the Non-Trusted function call list. */
            OsAppNTList.Add(item.OSAppl);
#>
    VAR(NtNvMReadOperCallBackRec, AUTOMATIC) Prm_Cnt_T_str;
    
    Prm_Cnt_T_str.BlockId = <#= item.IdxDef #>;
    Prm_Cnt_T_str.NvMBuffer = NvMBuffer;
    
    /* Call non-trusted function for <#= item.OSAppl #> */
    (void)CallNonTrustedFunction((NonTrustedFunctionIndexType)NtWrapS_NvMProxy_<#= item.OSAppl #>ReadOper, &Prm_Cnt_T_str);
    return E_OK;
<#
        }
#>
}

/**********************************************************************************************************************
* Name:         <#= item.WrCallBack #>
*
* Description:  Callback to move data from the block NvM RAM shadow (<#= item.RamBlk #>) to the NvM RAM buffer
*
* Inputs:       NvMBuffer - Buffer defined by the NvM BSW that the contains the data to be copied into the block's 
*                           RAM shadow. 
*
* Outputs:      E_OK
*
* Usage Notes:  This function is generated if the NvMProxy generation script.
**********************************************************************************************************************/
FUNC(Std_ReturnType, AUTOMATIC) <#= item.WrCallBack #>( void * NvMBuffer )
{
    VAR(uint16, AUTOMATIC) Idx_Cnt_T_u16;

    for(Idx_Cnt_T_u16 = 0u; Idx_Cnt_T_u16 < NvM_BlockDescriptorTable_at[<#= item.IdxDef #>].NvBlockLength_u16; Idx_Cnt_T_u16++)
    {
        ((uint8 *)NvMBuffer)[Idx_Cnt_T_u16] = ((uint8 *)(NvM_BlockDescriptorTable_at[<#= item.IdxDef #>].RamBlockDataAddr_t))[Idx_Cnt_T_u16];
    }

    return E_OK;
}

<#
    }
#>
<#
    if (OsAppNTList.Count > 0)
    {
#>

/********************************************** Non-Trusted Functions ************************************************/

<#
    }
#>
<#
    /* Create the non-trusted function hooks */
    foreach (string OsApp in OsAppNTList)
    {
#>
/**********************************************************************************************************************
* Name:         NONTRUSTED_NtWrapS_NvMProxy_<#= OsApp #>ReadOper
*
* Description:  Non-trusted function handler to copy the data from the NvM buffer (in <#= NvMOsApp #>) to the RAM
*               buffer located in <#= OsApp #>.
*
* Inputs:       FunctionIndex - OS Index for the non-trusted function. Defined by the OS generator.
*               FunctionParams - Parameter structure containing the inputs used by the function.
*
* Outputs:      None
*
* Usage Notes:  This function is generated if the NvMProxy generation script detects a NvM Read and Write 
*               synchronization callback is defined for a block in this application. This non-trusted function
*               will need to be defined by the integrator. 
**********************************************************************************************************************/
FUNC(void, AUTOMATIC) NONTRUSTED_NtWrapS_NvMProxy_<#= OsApp #>ReadOper(NonTrustedFunctionIndexType FunctionIndex, NonTrustedFunctionParameterRefType FunctionParams)
{
    VAR(uint16, AUTOMATIC) Idx_Cnt_T_u16;
    
    for( Idx_Cnt_T_u16 = 0U; Idx_Cnt_T_u16 < NvM_BlockDescriptorTable_at[((NtNvMReadOperCallBackRec*)FunctionParams)->BlockId].NvBlockLength_u16; Idx_Cnt_T_u16++)
    {
        ((uint8 *)(NvM_BlockDescriptorTable_at[((NtNvMReadOperCallBackRec*)FunctionParams)->BlockId].RamBlockDataAddr_t))[Idx_Cnt_T_u16] = ((uint8 *)(((NtNvMReadOperCallBackRec*)FunctionParams)->NvMBuffer))[Idx_Cnt_T_u16];
    }

    return;
}

<#
    }
#>

#define CDD_NvMProxy_STOP_SEC_CONST_UNSPECIFIED
#include "CDD_NvMProxy_MemMap.h"

<#+
    public class NvInstanceClass
    {
        public string OSTask;
        public string NvBlkRef;
    }
    
    public class OperGenClass
    {
        public string OSAppl;
        public int NvBlkId;
        public int BlkLen;
        public int NvDataSet;
        public string ReadCallBack;
        public string WrCallBack;
        public string RamBlk;
        public string ShortName;
        public string IdxDef;
    }
#>