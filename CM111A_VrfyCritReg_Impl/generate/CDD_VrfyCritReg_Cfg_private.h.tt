<#@ AutosarXml processor="ArDirectiveProcessor" requires="arPrefix='ar';arNamespace='http://autosar.org/4.0.3'" #><#@ template inherits="AutosarDirectiveProcessor.ArGtcBase" debug="true" #><#@ output extension="" #>
<#@ include file="Helper.tt" #><#@ include file="Logger.tt" #><#@ include file="CDD_VrfyCritReg_helper.tt" #><#
#>/**********************************************************************************************************************/
/*****************************************************************************
* Copyright 2016 Nxtr 
* Nxtr Confidential
*
* Module File Name  : CDD_VrfyCritReg_Cfg_private.h
* Module Description: Critical Register Verification header file
* Project           : CBD
* Author            : Selva
* Generator         : <#= GeneratorName #> <#= GeneratorVersion #>
* Generation Time   : <#= DateTime.Now.ToString( "dd.MM.yyyy HH:mm:ss" ) #>
***********************************************************************************************************************
* Version Control:
* %version:          1 %
* %derived_by:       nzt9hv %
*----------------------------------------------------------------------------------------------------------------------
* Date      Rev      Author         Change Description                                                           SCR #
* -------   -------  --------  ---------------------------------------------------------------------------     --------
* 04/15/16  1        Selva       MicroDiag Critical Register                                                    EA4#5190
**********************************************************************************************************************/

/******************************************* Multiple Include Protection *********************************************/
#ifndef CDD_VRFYCRITREG_CFG_H
#define CDD_VRFYCRITREG_CFG_H

#include "Std_Types.h"
#include "v800_ghs.h" /* for STSR intrinsic */  

<# ChangeContext( Xp.ModuleConfAtDefRefTo( "VrfyCritReg" ) ); #>
<#  
uint LoopCount1 = 0;
uint LoopCount2 = 0;
uint LoopCount3 = 0;
uint LoopCount4 = 0;
uint LoopCount5 = 0;
uint LoopCount6 = 0;
#>
<# !LOOP( Xp.ContainerAtDefRefTo( "VrfyCritReg8bitInitSignallist" ) ) #>
<#         
    LoopCount1++;
#>
<#!ENDLOOP #>
<# !LOOP( Xp.ContainerAtDefRefTo( "VrfyCritReg16bitInitSignallist" ) ) #>
<#         
    LoopCount2++;
#>
<#!ENDLOOP #>
<# !LOOP( Xp.ContainerAtDefRefTo( "VrfyCritReg32bitInitSignallist" ) ) #>
<#         
    LoopCount3++;
#>
<#!ENDLOOP #>
<# !LOOP( Xp.ContainerAtDefRefTo( "VrfyCritReg8bitPerSignallist" ) ) #>
<#         
    LoopCount4++;
#>
<#!ENDLOOP #>
<# !LOOP( Xp.ContainerAtDefRefTo( "VrfyCritReg16bitPerSignallist" ) ) #>
<#         
    LoopCount5++;
#>
<#!ENDLOOP #>
<# !LOOP( Xp.ContainerAtDefRefTo( "VrfyCritReg32bitPerSignallist" ) ) #>
<#         
    LoopCount6++;
#>
<#!ENDLOOP #>


/**********Critical Register Count********/
#define NROFININCRITREG8BIT_CNT_U16 	  <#=LoopCount1#>U  
#define NROFININCRITREG16BIT_CNT_U16 	  <#=LoopCount2#>U
#define NROFININCRITREG32BIT_CNT_U16 	  <#=LoopCount3#>U
#define NROFPERCRITREG8BIT_CNT_U16        <#=LoopCount4#>U 
#define NROFPERCRITREG16BIT_CNT_U16       <#=LoopCount5#>U 
#define NROFPERCRITREG32BIT_CNT_U16       <#=LoopCount6#>U 

typedef struct {
	CONST(uint32, AUTOMATIC) 	CritRegAdr;						/* Register  address */
	CONST(uint32, AUTOMATIC) 	CritRegVal;					    /* Register  Value */
	CONST(uint32, AUTOMATIC) 	CritRegMask;                    /* Register  Mask*/
}NonSysCritRegRec1;



/***********Declaration of critical regsiters************/
extern CONST(NonSysCritRegRec1, AUTOMATIC) IninCritReg8BitChk_rec[NROFININCRITREG8BIT_CNT_U16];
extern CONST(NonSysCritRegRec1, AUTOMATIC) IninCritReg16BitChk_rec[NROFININCRITREG16BIT_CNT_U16];
extern CONST(NonSysCritRegRec1, AUTOMATIC) IninCritReg32BitChk_rec[NROFININCRITREG32BIT_CNT_U16];

extern CONST(NonSysCritRegRec1, AUTOMATIC) PerCritReg8BitChk_rec[NROFPERCRITREG8BIT_CNT_U16];
extern CONST(NonSysCritRegRec1, AUTOMATIC) PerCritReg16BitChk_rec[NROFPERCRITREG16BIT_CNT_U16];
extern CONST(NonSysCritRegRec1, AUTOMATIC) PerCritReg32BitChk_rec[NROFPERCRITREG32BIT_CNT_U16];

extern FUNC(boolean, CDD_VrfyCritReg_CODE) SysCritRegIninChk(void);
extern FUNC(boolean, CDD_VrfyCritReg_CODE) SysCritRegPerChk(void);

#endif /* CDD_VRFYCRITREG_CFG */

