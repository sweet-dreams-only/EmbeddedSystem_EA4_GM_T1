/* file: C:/Hari/Work/SynergyProjects/T1xx_Synergy/BuildPrep/07.01.05_Work/Z_Work_1_8917_ShortTerm/GM_T1XX_EPS_RH850/generate/tcbpost.h */
/* automatically generated by genRH850.exe, Version: 1.06 */
/* Configuration file: C:/Users/nz2654/AppData/Local/Temp/DaVinci/Cfg-1345187/Generation/Cfg_Gen-1484071352018-0/OsProxyFiles-1484072167553-0/Os_ActiveEcuC.arxml */
/* Generation time: Tue Jan 10 13:16:13 2017 */
/* Unlimited license CBD1400351 for Nxtr Automotive, Project License, EPS */
/* Implementation: RH850_P1M */
/* Version of general code: 9.01.06 */
/* MISRA RULE 19.15 not violated: The QAC-Tool states a violation of rule 19.15 with message 0883,
 * but there is a double include prevention and therefore the message is considered to be wrong. */
#if ! defined __TCBPOST_H__   /* PRQA S 0883 EOF */ 
#define __TCBPOST_H__
#if defined USE_QUOTE_INCLUDES
 #include "vrm.h"
#else
 #include <vrm.h>
#endif

#define osdVrmGenMajRelNum 1
#define osdVrmGenMinRelNum 6
#if defined USE_QUOTE_INCLUDES
 #include "vrm.h"
#else
 #include <vrm.h>
#endif


#define osSystemSWCounter ((CounterType) 0)

#define OsCounter ((CounterType) 1)
#define osdTimerOSTMID OsCounter
#define osClearTimerInterruptPoint(cnt) 
#define osHandleCounterInterrupt(cnt) osHandleCounterInterruptStd(cnt)
#define osSetTimerInterruptPoint(cnt, time) osdFALSE
#define osInsertMinHeap(newItem, h, cnt) osInsertMinHeapStd((newItem), (h), (cnt))
#define osGetCurrentTime(cnt) osCounter[cnt]


/*--------------------------------------------------------------------------*/
/*    alarms                                                                */
/*--------------------------------------------------------------------------*/
   extern osqTcbRAM1 volatile osqTcbRAM2 TickType osqTcbRAM3 osAlarmTime[osdNumberOfAlarms + osdNumberOfScheduleTables];
      extern osqTcbRAM1 volatile osqTcbRAM2 osuint8 osqTcbRAM3 osAlarmActivated[osdNumberOfAlarms];

   /* Minimum Heap for Counter osSystemSWCounter */
   extern osqTcbRAM1 osqTcbRAM2 osHeapElementType osqTcbRAM3 ososSystemSWCounterHeap[2];
   /* Minimum Heap for Counter OsCounter */
   extern osqTcbRAM1 osqTcbRAM2 osHeapElementType osqTcbRAM3 osOsCounterHeap[10];

   extern osqTcbRAM1 volatile osqTcbRAM2 TickType osqTcbRAM3 osAlarmCycleTime[osdNumberOfAlarms];

   extern osqROM0 osqROM1 const osqROM2 osHeapType osqROM3 oskAlarmHeaps[2];
   extern osqROM0 osqROM1 const osqROM2 osAlarmIndexType osqROM3 oskAlarmHeapSize[2];

      extern osqROM0 osqROM1 const osqROM2 TickType osqROM3 oskStaticAlarmTime[osdNumberOfAlarms];
      extern osqROM0 osqROM1 const osqROM2 TickType osqROM3 oskStaticAlarmCycleTime[osdNumberOfAlarms];

      osqROM0 extern osqROM1 const osqROM2 TaskType osqROM3 oskAlarmTask[osdNumberOfAlarms];
         osqROM0 extern osqROM1 const osqROM2 EventMaskType osqROM3 oskAlarmEvent[osdNumberOfAlarms];
      osqROM0 extern osqROM1 const osqROM2 osuint8 osqROM3 oskAlarmAction[osdNumberOfAlarms];
         osqROM0 extern osqROM1 const osqROM2 CounterType osqROM3 oskAlarmIncrementCounterID[osdNumberOfAlarms];


/* Schedule Tables */ 
#define osSystemSchT (ScheduleTableType) 0

extern osqROM0 osqROM1 const osqROM2 CounterType osqROM3 oskCounterOfST[osdNumberOfScheduleTables];
extern osqROM0 osqROM1 const osqROM2 TickType osqROM3 oskSTMaxAllowed[osdNumberOfScheduleTables];
extern osqROM0 osqROM1 const osqROM2 TickType osqROM3 oskScheduleTableInitialOffset[osdNumberOfScheduleTables];
extern osqROM0 osqROM1 const osqROM2 TickType osqROM3 oskAutostartScheduleTableOffset[osdNumberOfScheduleTables];
extern osqROM0 osqROM1 const osqROM2 TickType osqROM3 oskPrecision[osdNumberOfScheduleTables];
extern osqROM0 osqROM1 const osqROM2 osSTIndexType osqROM3 oskSTStartIndex[osdNumberOfScheduleTables];
extern osqROM0 osqROM1 const osqROM2 osuint8 osqROM3 oskScheduleTableAutoStart      [osdNumberOfScheduleTables];
extern osqROM0 osqROM1 const osqROM2 osuint8 osqROM3 oskScheduleTableAutoStartType  [osdNumberOfScheduleTables];
osqRAM0 extern osqRAM1 volatile osqRAM2 osSTIndexType           osqRAM3 osSTCurrentIndex[osdNumberOfScheduleTables];
osqRAM0 extern osqRAM1 volatile osqRAM2 ScheduleTableStatusType osqRAM3 osSTState[osdNumberOfScheduleTables];
osqRAM0 extern osqRAM1 volatile osqRAM2 ScheduleTableType       osqRAM3 osSTNextTable[osdNumberOfScheduleTables];

/* Time conversion macros for counter: osSystemSWCounter, seconds per tick: 0.00100000 */
/* macro OS_MS2TICKS_osSystemSWCounter was approximated with deviation of 0.000000ppm */
#define OS_MS2TICKS_osSystemSWCounter(x) ( (TickType) (((((osuint32)(x)) * 1) + 0) / 1) )
/* macro OS_TICKS2MS_osSystemSWCounter was approximated with deviation of 0.000000ppm */
#define OS_TICKS2MS_osSystemSWCounter(x) ( (PhysicalTimeType) (((((osuint32)(x)) * 1) + 0) / 1) )

/* macro OS_NS2TICKS_osSystemSWCounter was approximated with deviation of 0.000000ppm */
#define OS_NS2TICKS_osSystemSWCounter(x) ( (TickType) (((((osuint32)(x)) * 1) + 500000) / 1000000) )
/* macro OS_TICKS2NS_osSystemSWCounter was approximated with deviation of 0.000000ppm */
#define OS_TICKS2NS_osSystemSWCounter(x) ( (PhysicalTimeType) (((((osuint32)(x)) * 1000000) + 0) / 1) )

/* macro OS_SEC2TICKS_osSystemSWCounter was approximated with deviation of 0.000000ppm */
#define OS_SEC2TICKS_osSystemSWCounter(x) ( (TickType) (((((osuint32)(x)) * 1000) + 0) / 1) )
/* macro OS_TICKS2SEC_osSystemSWCounter was approximated with deviation of 0.000000ppm */
#define OS_TICKS2SEC_osSystemSWCounter(x) ( (PhysicalTimeType) (((((osuint32)(x)) * 1) + 500) / 1000) )

/* macro OS_US2TICKS_osSystemSWCounter was approximated with deviation of 0.000000ppm */
#define OS_US2TICKS_osSystemSWCounter(x) ( (TickType) (((((osuint32)(x)) * 1) + 500) / 1000) )
/* macro OS_TICKS2US_osSystemSWCounter was approximated with deviation of 1.11022e-010ppm */
#define OS_TICKS2US_osSystemSWCounter(x) ( (PhysicalTimeType) (((((osuint32)(x)) * 1000) + 0) / 1) )


/* Time conversion macros for counter: OsCounter, seconds per tick: 0.00200000 */
/* macro OS_MS2TICKS_OsCounter was approximated with deviation of 0.000000ppm */
#define OS_MS2TICKS_OsCounter(x) ( (TickType) (((((osuint32)(x)) * 1) + 1) / 2) )
/* macro OS_TICKS2MS_OsCounter was approximated with deviation of 0.000000ppm */
#define OS_TICKS2MS_OsCounter(x) ( (PhysicalTimeType) (((((osuint32)(x)) * 2) + 0) / 1) )

/* macro OS_NS2TICKS_OsCounter was approximated with deviation of 0.000000ppm */
#define OS_NS2TICKS_OsCounter(x) ( (TickType) (((((osuint32)(x)) * 1) + 1000000) / 2000000) )
/* macro OS_TICKS2NS_OsCounter was approximated with deviation of 0.000000ppm */
#define OS_TICKS2NS_OsCounter(x) ( (PhysicalTimeType) (((((osuint32)(x)) * 2000000) + 0) / 1) )

/* macro OS_SEC2TICKS_OsCounter was approximated with deviation of 0.000000ppm */
#define OS_SEC2TICKS_OsCounter(x) ( (TickType) (((((osuint32)(x)) * 500) + 0) / 1) )
/* macro OS_TICKS2SEC_OsCounter was approximated with deviation of 0.000000ppm */
#define OS_TICKS2SEC_OsCounter(x) ( (PhysicalTimeType) (((((osuint32)(x)) * 1) + 250) / 500) )

/* macro OS_US2TICKS_OsCounter was approximated with deviation of 0.000000ppm */
#define OS_US2TICKS_OsCounter(x) ( (TickType) (((((osuint32)(x)) * 1) + 1000) / 2000) )
/* macro OS_TICKS2US_OsCounter was approximated with deviation of 1.11022e-010ppm */
#define OS_TICKS2US_OsCounter(x) ( (PhysicalTimeType) (((((osuint32)(x)) * 2000) + 0) / 1) )

/* Counters */

/* Holds all counter values. Use this array only for write access.
For read access use osGetCurrentTime(). Size = #Counter */
extern osqTcbRAM1 volatile osqTcbRAM2 TickType osqTcbRAM3 osCounter[2];

/* Holds the maximum allowed value of all counters. Size = #Counter */
osqROM0 extern osqROM1 const osqROM2 TickType osqROM3 oskCounterMaxAllowedValue[2];

/* Size = #Counter */
osqROM0 extern osqROM1 const osqROM2 TickType osqROM3 oskCounterInternalMaximumValue[2];

/* Size = #Counter */
osqROM0 extern osqROM1 const osqROM2 TickType osqROM3 oskCounterHalfrange[2];

/* Size = #Counter */
osqROM0 extern osqROM1 const osqROM2 TickType osqROM3 oskCounterTicksPerBase[2];

/* Defines the minimum time between two counter actions. Size = #Counter */
osqROM0 extern osqROM1 const osqROM2 TickType osqROM3 oskCounterMinCycle[2];

/* The counters' reload values. Size = #Counter */
osqROM0 extern osqROM1 const osqROM2 TickType osqROM3 oskCounterReloadValue[2];

/* The id of the core, this counter is assigned too. Size = #Counter */
osqROM0 extern osqROM1 const osqROM2 CoreIdType osqROM3 oskCounterCoreId[2];

/* The half allowed maximum value of high resolution counter. Size = #HiResCounter */
osqROM0 extern osqROM1 const osqROM2 TickType osqROM3 oskCounterHiResMaxHardwareValueHalf[1];

/* Timer mask; n LSbs set, where n = timer bit width. Size = #HiResCounter */
osqROM0 extern osqROM1 const osqROM2 TickType osqROM3 oskHiResTimerBitMask[1];

/* The half allowed maximum value of high resolution timer. Size = #HiResCounter */
osqROM0 extern osqROM1 const osqROM2 TickType osqROM3 oskHWTimerSemiCount[1];

/* The minimum time between two high resolution timer interrupts. Size = #HiResCounter */
osqROM0 extern osqROM1 const osqROM2 TickType osqROM3 oskMinTimeBetweenTimerIrqs[1];

/* Holds the last time of a high resolution timer interrupt. Size = #HiResCounter */
extern osqTcbRAM1 volatile osqTcbRAM2 TickType osqTcbRAM3 osLastHighResTimerIrq[1];

/* Holds the time of the next allowed high resolution interrupt. Size = #HiResCounter */
extern osqTcbRAM1 volatile osqTcbRAM2 TickType osqTcbRAM3 osNextAllowedTimerInt[1];

/* The id of a counter, the given alarm is assigned to. Size = #Alarms */
osqROM0 extern osqROM1 const osqROM2 osuint8 osqROM3 oskAlarmCounterRef[10];

#define osReleaseHiResTimerISR(counterId) 

#define osTriggerHiResTimerISR(counterId) 

#define osGetHWTimerCounterValue(counterId) 0

#define osSetHWTimerDeltaValue(counterId,timeToSet) 

#define osSetHWTimerCompareValue(counterId,timeToSet) 
osqROM0 extern osqPTcbRAM1 volatile osqPTcbRAM2 TaskType osqPTcbRAM3 * osqROM1 const osqROM2 osqROM3 oskQActivationQueues[osdNumberOfPriorities];
osqROM0 extern osqROM1 const osqROM2 osQEntryCountType osqROM3 oskQMaxActivations[osdNumberOfPriorities];
      extern volatile osqTcbRAM1 osqTcbRAM2 osActivationCountType osqTcbRAM3 osTcbActivationCount[osdNumberOfAllTasks];

extern osqTcbRAM1 osqTcbRAM2 osCtrlVarType osqTcbRAM3 osCtrlVarsCore0;
   extern osqTcbRAM1 volatile osqTcbRAM2 EventMaskType osqTcbRAM3 osTcbWaitEventMask[osdNumberOfExtendedTasks];



   extern osqTcbRAM1 volatile osqTcbRAM2 ApplicationStateType osqTcbRAM3 osApplicationState [osdNumberOfApplications];



  osqROM0 extern osqROM1 const osqROM2 osTaskFlagType osqROM3 oskTcbTaskFlags[osdNumberOfAllTasks];
   extern osqTcbRAM1 volatile osqTcbRAM2 EventMaskType osqTcbRAM3 osTcbSetEventMask[osdNumberOfExtendedTasks];

   extern osqTcbRAM1 volatile osqTcbRAM2 osTaskStateType osqTcbRAM3 osTcbTaskState[osdNumberOfAllTasks];
    extern osqTcbRAM1 osqTcbRAM2 osPrioType osqTcbRAM3 osTcbActualPrio[osdNumberOfAllTasks];
    extern osqTcbRAM1 osqTcbRAM2 osuint8 osqTcbRAM3 osTcbORTIServiceId[osdNumberOfAllTasks];
     extern osqTcbRAM1 osqTcbRAM2 osuint8 osqTcbRAM3 osTcbResourceCounter[osdNumberOfAllTasks];
   extern osqTcbRAM1 osqTcbRAM2 osuint8 osqTcbRAM3 osTcbInSystemFct[osdNumberOfAllTasks];


/* Resources */

   #if ((!defined(osdGetResourceNotUsed)) || (!defined(osdReleaseResourceNotUsed)))
      extern osqTcbRAM1 osqTcbRAM2 osPrioType osqTcbRAM3 osResSavedPrio[osdNumberOfAllResources];
   #endif
      extern osqTcbRAM1 osqTcbRAM2 osResCounterType osqTcbRAM3 osResOccupationCounter[osdNumberOfAllResources];
      extern osqTcbRAM1 osqTcbRAM2 TaskType osqTcbRAM3 osResActualTask[osdNumberOfAllResources];
   
   #if (!defined(osdGetResourceNotUsed)) || (!defined(osdReleaseResourceNotUsed))
      extern osqROM0 osqROM1 const osqROM2 osPrioType osqROM3 oskResCeilingPrio[osdNumberOfAllResources];
   #endif
#if (!defined(osdGetResourceNotUsed)) || (!defined(osdReleaseResourceNotUsed))
      extern osqROM0 osqROM1 const osqROM2 osPrioOffsetType osqROM3 oskResCeilingPrioOffset[osdNumberOfTaskResources];
   extern osqROM0 osqROM1 const osqROM2 osPrioFlagType osqROM3 oskResCeilingPrioMask[osdNumberOfTaskResources];
#endif /* (!defined(osdGetResourceNotUsed)) || (!defined(osdReleaseResourceNotUsed)) */

   extern osqROM0 osqROM1 const osqROM2 osPrioType osqROM3 oskResInternalCeilingPrio[osdNumberOfAllTasks];
   extern osqROM0 osqROM1 const osqROM2 osPrioFlagType osqROM3 oskResInternalCeilingPrioMask[osdNumberOfAllTasks];
      extern osqROM0 osqROM1 const osqROM2 osPrioOffsetType osqROM3 oskResInternalCeilingPrioOffset[osdNumberOfAllTasks];
/* applications */

#define osdNumberOfProtectionAreas 4

   extern osqROM0 osqROM1 const osqROM2 AccessType osqROM3 oskMemAreaAccessRights[osdNumberOfProtectionAreas];

   extern osqROM0 osqROM1 const osqROM2 ApplAccessMaskType osqROM3 oskApplTaskAccess[osdNumberOfAllTasks];
   extern osqROM0 osqROM1 const osqROM2 ApplAccessMaskType osqROM3 oskApplISRAccess[osdNumberOfCat2ISRs];
   extern osqROM0 osqROM1 const osqROM2 ApplAccessMaskType osqROM3 oskApplResourceAccess[osdNumberOfAllResources];
   extern osqROM0 osqROM1 const osqROM2 ApplicationType osqROM3 oskAlarmToAppl[osdNumberOfAlarms];/* TR:SPMF20:0009 */ 
   extern osqROM0 osqROM1 const osqROM2 ApplAccessMaskType osqROM3 oskApplAlarmAccess[osdNumberOfAlarms]; /* TR:SPMF20:0009 */ 
   extern osqROM0 osqROM1 const osqROM2 ApplicationType osqROM3 oskCounterToAppl[osdNumberOfCounters];
   extern osqROM0 osqROM1 const osqROM2 ApplAccessMaskType osqROM3 oskApplCounterAccess[osdNumberOfCounters];
   extern osqROM0 osqROM1 const osqROM2 ApplicationType osqROM3 oskScheduleTableToAppl[osdNumberOfScheduleTables];
   extern osqROM0 osqROM1 const osqROM2 ApplAccessMaskType osqROM3 oskApplScheduleTableAccess[osdNumberOfScheduleTables];
   extern osqROM0 osqROM1 const osqROM2 TaskType osqROM3 oskRestartTask[osdNumberOfApplications];
   extern osqROM0 osqROM1 const osqROM2 MemoryAddressType osqROM3 oskApplMemoryAccessLow[osdNumberOfApplications][osdNumberOfProtectionAreas];
   extern osqROM0 osqROM1 const osqROM2 MemoryAddressType osqROM3 oskApplMemoryAccessHigh[osdNumberOfApplications][osdNumberOfProtectionAreas];
extern osqROM0 ApplAccessMaskType osqROM1 const *osqROM2 const osqROM3 oskApplObjectAccess[osdNumberOfObjectTypes];
extern osqROM0 osqROM1 const osqROM2 osuint16 osqROM3 oskObjectCount[osdNumberOfObjectTypes];

extern osqROM0 ApplicationType osqROM1 const *osqROM2 const osqROM3 oskObjectToAppl[osdNumberOfObjectTypes];

   extern osqTcbRAM1 osqTcbRAM2 osuint8 osqTcbRAM3 osSemaphoreState[osdNumberOfSemaphores];
   extern osqTcbRAM1 volatile osqTcbRAM2 osSemaphoreType osqTcbRAM3 osTcbWaitForSemaphore[osdNumberOfExtendedTasks];
      extern osqTcbRAM1 volatile osqTcbRAM2 TaskType osqTcbRAM3 osSemaOwner[osdNumberOfSemaphores];

   #define osrRTSize                      osdRTSize 
   #define osrNumberOfPriorities          osdNumberOfPriorities 
   #define osrNumberOfAppModes            osdNumberOfAppModes
   #define osrNumberOfAllTasks            osdNumberOfAllTasks
   #define osrNumberOfAllResources        osdNumberOfAllResources
   #define osrNumberOfTaskResources       osdNumberOfTaskResources
   #define osrNumberOfInterruptResources  osdNumberOfInterruptResources
   #define osrNumberOfInternalResources   osdNumberOfInternalResources
   #define osrNumberOfExtendedTasks       osdNumberOfExtendedTasks
   #define osrNumberOfAlarms              osdNumberOfAlarms
   #define osrNumberOfScheduleTables      osdNumberOfScheduleTables
   #define osrNumberOfSemaphores          osdNumberOfSemaphores
   #define osrNumberOfCounters            osdNumberOfCounters
   /* in source code variant map hook routines directly to user functions */

osqROM0 extern osStackPtrType osqROM1 const osqROM2 osqROM3  oskSystemStackTop;

/* End of invariant part */
   extern osqTcbRAM1 osqTcbRAM2 osResourceIndexType osqTcbRAM3 osIcbLockedResource[osdNumberOfCat2ISRs];
/* Tasks */ 
#define osSystemExtendedTask ((TaskType)0)
#define Task_InitBsw_Appl10 ((TaskType)1)
#define Task_Init_Appl10 ((TaskType)2)
#define Task_Init_Appl6 ((TaskType)3)
#define Task_Shutdown_Appl0 ((TaskType)4)
#define Task_4msBsw_Appl10 ((TaskType)5)
#define Task_2msTmplMonr_Appl10 ((TaskType)6)
#define Task_2ms_Appl10 ((TaskType)7)
#define Task_2ms_Appl6 ((TaskType)8)
#define Task_4ms_Appl10 ((TaskType)9)
#define Task_10ms_Appl10 ((TaskType)10)
#define Task_10ms_Appl6 ((TaskType)11)
#define Task_10msBsw_Appl10 ((TaskType)12)
#define Task_100ms_Appl10 ((TaskType)13)
#define osSystemBasicTask ((TaskType)14)

/* Task function prototypes */ 
void osSystemExtendedTaskfunc(void);
void Task_InitBsw_Appl10func(void);
void Task_Init_Appl10func(void);
void Task_Init_Appl6func(void);
void Task_Shutdown_Appl0func(void);
void Task_4msBsw_Appl10func(void);
void Task_2msTmplMonr_Appl10func(void);
void Task_2ms_Appl10func(void);
void Task_2ms_Appl6func(void);
void Task_4ms_Appl10func(void);
void Task_10ms_Appl10func(void);
void Task_10ms_Appl6func(void);
void Task_10msBsw_Appl10func(void);
void Task_100ms_Appl10func(void);
void osSystemBasicTaskfunc(void);

osqROM0 extern osqROM1 const osqROM2 osTaskFlagType osqROM3 oskTcbTaskFlags[osdNumberOfAllTasks];
osqROM0 extern osqROM1 const osqROM2 osPrioFlagType osqROM3 oskTcbReadyPrioMask[osdNumberOfAllTasks];
osqROM0 extern osqROM1 const osqROM2 osPrioOffsetType osqROM3 oskTcbReadyPrioOffset[osdNumberOfAllTasks];
osqROM0 extern osqROM1 const osqROM2 osPrioType osqROM3 oskTcbHomePrio[osdNumberOfAllTasks];
osqROM0 extern osqROM1 const osqROM2 osActivationCountType osqROM3 oskTcbAllowedActivations[osdNumberOfAllTasks];

/* ISRs */ 

/* ISR categories */ 
#define osdIsrCanIsrGlobalStatusCat 2
#define osdIsrCanIsrRxFifoCat 2
#define osdIsrCanIsrStatus_0Cat 2
#define osdIsrCanIsrStatus_1Cat 2
#define osdIsrCanIsrTx_0Cat 2
#define osdIsrCanIsrTx_1Cat 2
#define osdIsrMCU_ECM_EIC_CAT2_ISRCat 2
#define osdIsrSPI_CSIG0_TIC_CAT2_ISRCat 2
#define osdIsrSPI_CSIG0_TIRE_CAT2_ISRCat 2
#define osdIsrSPI_CSIG0_TIR_CAT2_ISRCat 2
#define osdIsrSPI_CSIH0_TIC_CAT2_ISRCat 2
#define osdIsrSPI_CSIH0_TIRE_CAT2_ISRCat 2
#define osdIsrSPI_CSIH0_TIR_CAT2_ISRCat 2
#define osdIsrSPI_CSIH2_TIC_CAT2_ISRCat 2
#define osdIsrSPI_CSIH2_TIRE_CAT2_ISRCat 2
#define osdIsrSPI_CSIH2_TIR_CAT2_ISRCat 2
#define osdIsrSnsrMeasStrtIrqCat 2
#define osdIsrosOstmInterrupt_c0Cat 2
#define osdIsrosSystemCat2ISRCat 2
#define osdIsrAlgnErrIrqCat 1
#define osdIsrFpuErrIrqCat 1
#define osdIsrMCU_FEINT_ISRCat 1
#define osdIsrMotCtrlMgrIrqCat 1
#define osdIsrResdOperIrqCat 1
#define osdIsrSysErrIrqCat 1
#define osdIsrWDG_59_DRIVERA_TRIGGERFUNCTION_ISRCat 1
#define osdIsrosMemoryProtectionViolation_c0Cat 1
#define osdIsrosPrivilegedInstructionException_c0Cat 1

/* ISR IDs */ 
#define CanIsrGlobalStatus ((ISRType)0)
#define CanIsrRxFifo ((ISRType)1)
#define CanIsrStatus_0 ((ISRType)2)
#define CanIsrStatus_1 ((ISRType)3)
#define CanIsrTx_0 ((ISRType)4)
#define CanIsrTx_1 ((ISRType)5)
#define MCU_ECM_EIC_CAT2_ISR ((ISRType)6)
#define SPI_CSIG0_TIC_CAT2_ISR ((ISRType)7)
#define SPI_CSIG0_TIRE_CAT2_ISR ((ISRType)8)
#define SPI_CSIG0_TIR_CAT2_ISR ((ISRType)9)
#define SPI_CSIH0_TIC_CAT2_ISR ((ISRType)10)
#define SPI_CSIH0_TIRE_CAT2_ISR ((ISRType)11)
#define SPI_CSIH0_TIR_CAT2_ISR ((ISRType)12)
#define SPI_CSIH2_TIC_CAT2_ISR ((ISRType)13)
#define SPI_CSIH2_TIRE_CAT2_ISR ((ISRType)14)
#define SPI_CSIH2_TIR_CAT2_ISR ((ISRType)15)
#define SnsrMeasStrtIrq ((ISRType)16)
#define osOstmInterrupt_c0 ((ISRType)17)
#define osSystemCat2ISR ((ISRType)18)

/* ISR function prototypes */ 
void CanIsrGlobalStatusfunc(void);
void CanIsrRxFifofunc(void);
void CanIsrStatus_0func(void);
void CanIsrStatus_1func(void);
void CanIsrTx_0func(void);
void CanIsrTx_1func(void);
void MCU_ECM_EIC_CAT2_ISRfunc(void);
void SPI_CSIG0_TIC_CAT2_ISRfunc(void);
void SPI_CSIG0_TIRE_CAT2_ISRfunc(void);
void SPI_CSIG0_TIR_CAT2_ISRfunc(void);
void SPI_CSIH0_TIC_CAT2_ISRfunc(void);
void SPI_CSIH0_TIRE_CAT2_ISRfunc(void);
void SPI_CSIH0_TIR_CAT2_ISRfunc(void);
void SPI_CSIH2_TIC_CAT2_ISRfunc(void);
void SPI_CSIH2_TIRE_CAT2_ISRfunc(void);
void SPI_CSIH2_TIR_CAT2_ISRfunc(void);
void SnsrMeasStrtIrqfunc(void);
void osOstmInterruptfunc(void);
void osSystemCat2ISRfunc(void);
void AlgnErrIrq(void);
void Patched_FpuErrIrq(void);
void Patched_MCU_FEINT_ISR(void);
void MotCtrlMgrIrq(void);
void ResdOperIrq(void);
void Patched_SysErrIrq(void);
void WDG_59_DRIVERA_TRIGGERFUNCTION_ISR(void);
void osMemoryProtectionViolation(void);
void osPrivilegedInstructionException(void);

void CanIsrGlobalStatus_CAT2(void);
void CanIsrRxFifo_CAT2(void);
void CanIsrStatus_0_CAT2(void);
void CanIsrStatus_1_CAT2(void);
void CanIsrTx_0_CAT2(void);
void CanIsrTx_1_CAT2(void);
void MCU_ECM_EIC_CAT2_ISR_CAT2(void);
void SPI_CSIG0_TIC_CAT2_ISR_CAT2(void);
void SPI_CSIG0_TIRE_CAT2_ISR_CAT2(void);
void SPI_CSIG0_TIR_CAT2_ISR_CAT2(void);
void SPI_CSIH0_TIC_CAT2_ISR_CAT2(void);
void SPI_CSIH0_TIRE_CAT2_ISR_CAT2(void);
void SPI_CSIH0_TIR_CAT2_ISR_CAT2(void);
void SPI_CSIH2_TIC_CAT2_ISR_CAT2(void);
void SPI_CSIH2_TIRE_CAT2_ISR_CAT2(void);
void SPI_CSIH2_TIR_CAT2_ISR_CAT2(void);
void SnsrMeasStrtIrq_CAT2(void);
void osOstmInterrupt_c0_CAT2(void);
void osSystemCat2ISR_CAT2(void);

 osqROM0 extern osqROM1 const osqROM2 osuint8 osqROM3 oskAlarmAutoStart[osdNumberOfAlarms];
extern osqROM0 osqROM1 const osqROM2 osuint8 osqROM3 oskAlarmAutoStartType  [osdNumberOfAlarms];
 osqROM0 extern osqROM1 const osqROM2 osuint8 osqROM3 oskTcbAutoStart[osdNumberOfAllTasks];
#define osdNumberOfAppModes 1
#define OSDEFAULTAPPMODE 1
/* Events */ 
#define osSystemEvent ((EventMaskType)(0x01))
/* Applications */ 
#define Appl0 0
#define Appl10 1
#define Appl6 2
#define osSystemApplicationCore0 3
/* Alarms */ 
#define Rte_Al_TE2_Task_10msBsw_Appl10_0_10ms ((AlarmType)0)
#define Rte_Al_TE2_Task_4msBsw_Appl10_0_4ms ((AlarmType)1)
#define Rte_Al_TE_Task_100ms_Appl10_0_100ms ((AlarmType)2)
#define Rte_Al_TE_Task_10ms_Appl10_0_10ms ((AlarmType)3)
#define Rte_Al_TE_Task_10ms_Appl6_0_10ms ((AlarmType)4)
#define Rte_Al_TE_Task_2msTmplMonr_Appl10_0_2ms ((AlarmType)5)
#define Rte_Al_TE_Task_2ms_Appl10_0_2ms ((AlarmType)6)
#define Rte_Al_TE_Task_2ms_Appl6_0_2ms ((AlarmType)7)
#define Rte_Al_TE_Task_4ms_Appl10_0_4ms ((AlarmType)8)
#define osSystemAlarm ((AlarmType)9)
/* prototypes for alarm callback functions */
/* task to activate or to receive the event  */
osqROM0 extern osqROM1 const osqROM2 TaskType osqROM3 oskAlarmTask[osdNumberOfAlarms];
/* the event to set */
osqROM0 extern osqROM1 const osqROM2 EventMaskType osqROM3 oskAlarmEvent[osdNumberOfAlarms];
/* counter ID to increment */
osqROM0 extern osqROM1 const osqROM2 CounterType osqROM3 oskAlarmIncrementCounterID[osdNumberOfAlarms];

#pragma ghs startdata
/* MISRA RULE 8.12 VIOLATION: (2 times) The compiler requires the [] notation and the size of the 
   sections is unknown at generation time. No problem because the symbols are never used as arrays. */
extern osuint32 osExceptionVectorTable_c0[]; /* PRQA S 3684 */
extern osuint32 osEIINTVectorTable_c0[]; /* PRQA S 3684 */
#pragma ghs enddata

#pragma ghs startdata
#pragma alignvar(16)
extern const osuint32 osSysCallTable_c0[osdNumberOfSysCallFunctions];
#pragma ghs enddata

/* ---------------------------------------------------------------------- */
/* symbols used for MPU reprogramming (which are unknown at compile time) */
/* ---------------------------------------------------------------------- */

/* MISRA RULE 8.12 VIOLATION: (2 times) The compiler requires the [] notation and the size of the 
   sections is unknown at generation time. No problem because the symbols are never used as arrays. */
extern osuint8 Appl10_StartAddr[]; /* PRQA S 3684 */
extern osuint8 Appl10_EndAddr[];   /* PRQA S 3684 */

/* MISRA RULE 8.12 VIOLATION: (2 times) The compiler requires the [] notation and the size of the 
   sections is unknown at generation time. No problem because the symbols are never used as arrays. */
extern osuint8 Appl6_StartAddr[]; /* PRQA S 3684 */
extern osuint8 Appl6_EndAddr[];   /* PRQA S 3684 */

/* MISRA RULE 8.12 VIOLATION: (2 times) The compiler requires the [] notation and the size of the 
   sections is unknown at generation time. No problem because the symbols are never used as arrays. */
extern osuint8 StackRam_StartAddr[]; /* PRQA S 3684 */
extern osuint8 StackRam_EndAddr[];   /* PRQA S 3684 */

/* MISRA RULE 8.12 VIOLATION: (2 times) The compiler requires the [] notation and the size of the 
   sections is unknown at generation time. No problem because the symbols are never used as arrays. */
extern osuint8 GeneralRam_StartAddr[]; /* PRQA S 3684 */
extern osuint8 GeneralRam_EndAddr[];   /* PRQA S 3684 */

/* MISRA RULE 8.12 VIOLATION: (2 times) The compiler requires the [] notation and the size of the 
   sections is unknown at generation time. No problem because the symbols are never used as arrays. */
extern osuint8 osGlobalShared_StartAddr[]; /* PRQA S 3684 */
extern osuint8 osGlobalShared_EndAddr[];   /* PRQA S 3684 */

/* MISRA RULE 8.12 VIOLATION: (2 times) The compiler requires the [] notation and the size of the 
   sections is unknown at generation time. No problem because the symbols are never used as arrays. */
extern osuint8 osSystemStack_c0_StartAddr[]; /* PRQA S 3684 */
extern osuint8 osSystemStack_c0_EndAddr[];   /* PRQA S 3684 */

   extern osqTcbRAM1 osqTcbRAM2 osResourceIndexType osqTcbRAM3 osTcbLockedResource[osdNumberOfAllTasks];
/* Resources */

#define RES_SCHEDULER ((ResourceType)0)
#define SHUTDOWN_ONGOING ((ResourceType)1)
#define osSystemResource ((ResourceType)2)


osqROM0 extern osqROM1 const osqROM2 osResAccessMaskType osqROM3 oskResAccessMask[osdNumberOfAllResources][1];


   extern osqTcbRAM1 osqTcbRAM2 osResourceIndexType osqTcbRAM3 osResNextLockedResource[osdNumberOfAllResources];
/* Applications */

/* Maximum possible allowed value of the counter in ticks */ 
#define OSMAXALLOWEDVALUE_osSystemSWCounter 0x0000000aUL
/* Minimum allowed number of ticks for a cyclic alarm */ 
#define OSMINCYCLE_osSystemSWCounter 0
/* Number of ticks required to reach specific unit of the counter */ 
#define OSTICKSPERBASE_osSystemSWCounter 1
/* tick time duration in seconds */ 
#define OSSECONDSPERTICK_osSystemSWCounter 0.00100000
/* Maximum possible allowed value of the counter in ticks */ 
#define OSMAXALLOWEDVALUE_OsCounter 0x7fffffffUL
/* Minimum allowed number of ticks for a cyclic alarm */ 
#define OSMINCYCLE_OsCounter 1
/* Number of ticks required to reach specific unit of the counter */ 
#define OSTICKSPERBASE_OsCounter 160000
/* tick time duration in seconds */ 
#define OSSECONDSPERTICK_OsCounter 0.00200000

/* END OF C:\Hari\Work\SynergyProjects\T1xx_Synergy\BuildPrep\07.01.05_Work\Z_Work_1_8917_ShortTerm\GM_T1XX_EPS_RH850\generate\tcb.h */

#endif /* ! defined __TCBPOST_H__ */
