%%-----------------------------------------------------------------------%
%% EA4 Component Data Dictionary - Created on 20-Dec-2016 15:54:49       %
%                                  Created with tool release: 2.51.0     %
%                                  Synergy file: %version: X %           %
%                                  Derived by: %derived_by: X %          %
%%-----------------------------------------------------------------------%

SF104A = DataDict.FDD;
SF104A.Version = '2.3.X';
SF104A.LongName = 'Motor Current Regulator Configuration';
SF104A.ShoName  = 'MotCurrRegCfg';
SF104A.DesignASIL = 'D';
SF104A.Description = [...
  'The Current Regulator Configuration function generates the following: ' ...
  'Proportional and Integral gains for D-axis and Q-axis current regulato' ...
  'rs, damping terms for D-axis and Q-axis current regulators and a commu' ...
  'tation delay compensation value.'];



%%-------------------------------------------
%% Runnable Definitions                      
%%-------------------------------------------
MotCurrRegCfgInit1 = DataDict.Runnable;
MotCurrRegCfgInit1.Context = 'Rte';
MotCurrRegCfgInit1.TimeStep = 0;
MotCurrRegCfgInit1.Description = [...
  'Initialization Runnable for Current Regulator Configuration'];

MotCurrRegCfgPer1 = DataDict.Runnable;
MotCurrRegCfgPer1.Context = 'Rte';
MotCurrRegCfgPer1.TimeStep = 0.002;
MotCurrRegCfgPer1.Description = [...
  '2MS Periodic Runnable for Current Regulator Configuration'];


%%-------------------------------------------
%% Client Definitions                        
%%-------------------------------------------

%%-------------------------------------------
%% Input Signal Definition                   
%%-------------------------------------------
CurrMeasLoaMtgtnEna = DataDict.IpSignal;
CurrMeasLoaMtgtnEna.LongName = 'Current Meaasure Loss of Assist Mitigation Enable';
CurrMeasLoaMtgtnEna.Description = [...
  'Current Meaasure Loss of Assist Mitigation Enable signal is being gene' ...
  'rated by Loss of Assist Manager function.'];
CurrMeasLoaMtgtnEna.DocUnits = 'Cnt';
CurrMeasLoaMtgtnEna.EngDT = dt.lgc;
CurrMeasLoaMtgtnEna.EngInit = 0;
CurrMeasLoaMtgtnEna.EngMin = 0;
CurrMeasLoaMtgtnEna.EngMax = 1;
CurrMeasLoaMtgtnEna.ReadIn = {'MotCurrRegCfgPer1'};
CurrMeasLoaMtgtnEna.ReadType = 'Rte';


DualEcuMotCtrlMtgtnEna = DataDict.IpSignal;
DualEcuMotCtrlMtgtnEna.LongName = 'Dual ECU Motor Control Mitigation Enable';
DualEcuMotCtrlMtgtnEna.Description = [...
  'Dual ECU Motor Control Mitigation Enable'];
DualEcuMotCtrlMtgtnEna.DocUnits = 'Cnt';
DualEcuMotCtrlMtgtnEna.EngDT = dt.lgc;
DualEcuMotCtrlMtgtnEna.EngInit = 0;
DualEcuMotCtrlMtgtnEna.EngMin = 0;
DualEcuMotCtrlMtgtnEna.EngMax = 1;
DualEcuMotCtrlMtgtnEna.ReadIn = {'MotCurrRegCfgPer1'};
DualEcuMotCtrlMtgtnEna.ReadType = 'Rte';


IvtrLoaMtgtnEna = DataDict.IpSignal;
IvtrLoaMtgtnEna.LongName = 'Inverter Loss of Assist Mitigation Enable';
IvtrLoaMtgtnEna.Description = [...
  'Inverter Loss of Assist Mitigation Enable signal is being generated by' ...
  ' Loss of Assist Manager function.'];
IvtrLoaMtgtnEna.DocUnits = 'Cnt';
IvtrLoaMtgtnEna.EngDT = dt.lgc;
IvtrLoaMtgtnEna.EngInit = 0;
IvtrLoaMtgtnEna.EngMin = 0;
IvtrLoaMtgtnEna.EngMax = 1;
IvtrLoaMtgtnEna.ReadIn = {'MotCurrRegCfgPer1'};
IvtrLoaMtgtnEna.ReadType = 'Rte';


MotCurrEolCalSt = DataDict.IpSignal;
MotCurrEolCalSt.LongName = 'Motor Current EOL Calibration State';
MotCurrEolCalSt.Description = [...
  'Motor Current EOL Calibration State signal is being generated by Curre' ...
  'nt Measure function.'];
MotCurrEolCalSt.DocUnits = 'Cnt';
MotCurrEolCalSt.EngDT = enum.MotCurrEolCalSt2;
MotCurrEolCalSt.EngInit = MotCurrEolCalSt2.MCECS_OFFSCMDSTRT;
MotCurrEolCalSt.EngMin = MotCurrEolCalSt2.MCECS_OFFSCMDSTRT;
MotCurrEolCalSt.EngMax = MotCurrEolCalSt2.MCECS_CMDSAFEST;
MotCurrEolCalSt.ReadIn = {'MotCurrRegCfgPer1'};
MotCurrEolCalSt.ReadType = 'Rte';


MotInduDaxEstimd = DataDict.IpSignal;
MotInduDaxEstimd.LongName = 'Estimated D Axis Motor Inductance';
MotInduDaxEstimd.Description = [...
  'Estimated D Axis Motor Inductance signal is generated by Motor Control' ...
  ' Primary Estimation function.'];
MotInduDaxEstimd.DocUnits = 'Henry';
MotInduDaxEstimd.EngDT = dt.float32;
MotInduDaxEstimd.EngInit = 0.00011889;
MotInduDaxEstimd.EngMin = 3e-05;
MotInduDaxEstimd.EngMax = 0.00041;
MotInduDaxEstimd.ReadIn = {'MotCurrRegCfgPer1'};
MotInduDaxEstimd.ReadType = 'Rte';


MotInduQaxEstimd = DataDict.IpSignal;
MotInduQaxEstimd.LongName = 'Estimated Q Axis Motor Inductance';
MotInduQaxEstimd.Description = [...
  'Estimated Q Axis Motor Inductance signal is generated by Motor Control' ...
  ' Primary Estimation function.'];
MotInduQaxEstimd.DocUnits = 'Henry';
MotInduQaxEstimd.EngDT = dt.float32;
MotInduQaxEstimd.EngInit = 0.00011889;
MotInduQaxEstimd.EngMin = 3e-05;
MotInduQaxEstimd.EngMax = 0.00041;
MotInduQaxEstimd.ReadIn = {'MotCurrRegCfgPer1'};
MotInduQaxEstimd.ReadType = 'Rte';


MotREstimd = DataDict.IpSignal;
MotREstimd.LongName = 'Estimated Motor Resistance';
MotREstimd.Description = [...
  'Estimated Motor Resistance signal is generated by Motor Control Primar' ...
  'y Estimation function.'];
MotREstimd.DocUnits = 'Ohm';
MotREstimd.EngDT = dt.float32;
MotREstimd.EngInit = 0.0139083;
MotREstimd.EngMin = 0.005;
MotREstimd.EngMax = 0.12565;
MotREstimd.ReadIn = {'MotCurrRegCfgPer1'};
MotREstimd.ReadType = 'Rte';


MotVelMrf = DataDict.IpSignal;
MotVelMrf.LongName = 'Motor Velocity MRF';
MotVelMrf.Description = [...
  'Motor Velocity MRF signal is generated by Motor Velocity function.'];
MotVelMrf.DocUnits = 'MotRadPerSec';
MotVelMrf.EngDT = dt.float32;
MotVelMrf.EngInit = 0;
MotVelMrf.EngMin = -1350;
MotVelMrf.EngMax = 1350;
MotVelMrf.ReadIn = {'MotCurrRegCfgPer1'};
MotVelMrf.ReadType = 'Rte';


VehSpd = DataDict.IpSignal;
VehSpd.LongName = 'Vehicle Speed';
VehSpd.Description = [...
  'Vehicle SPeed signal is generated by Vehicle Siganl Conditioning funct' ...
  'ion.'];
VehSpd.DocUnits = 'Kph';
VehSpd.EngDT = dt.float32;
VehSpd.EngInit = 0;
VehSpd.EngMin = 0;
VehSpd.EngMax = 511;
VehSpd.ReadIn = {'MotCurrRegCfgPer1'};
VehSpd.ReadType = 'Rte';



%%-------------------------------------------
%% Output Signal Definition                  
%%-------------------------------------------
MotAgElecDly = DataDict.OpSignal;
MotAgElecDly.LongName = 'Electrical Motor Angle Delay';
MotAgElecDly.Description = [...
  'Electrical commutation delay angle used to calculate Phase Advance'];
MotAgElecDly.DocUnits = 'MotRad';
MotAgElecDly.SwcShoName = 'MotCurrRegCfg';
MotAgElecDly.EngDT = dt.float32;
MotAgElecDly.EngInit = 0;
MotAgElecDly.EngMin = -1.5;
MotAgElecDly.EngMax = 1.5;
MotAgElecDly.TestTolerance = 7.63e-06;
MotAgElecDly.WrittenIn = {'MotCurrRegCfgPer1'};
MotAgElecDly.WriteType = 'Rte';


MotDampgDax = DataDict.OpSignal;
MotDampgDax.LongName = 'Motor Damping D Axis';
MotDampgDax.Description = [...
  'D-Axis damping term for direct feedback motor voltage calculation.'];
MotDampgDax.DocUnits = 'Ohm';
MotDampgDax.SwcShoName = 'MotCurrRegCfg';
MotDampgDax.EngDT = dt.float32;
MotDampgDax.EngInit = 0;
MotDampgDax.EngMin = -0.11;
MotDampgDax.EngMax = 5.5;
MotDampgDax.TestTolerance = 3.81e-06;
MotDampgDax.WrittenIn = {'MotCurrRegCfgPer1'};
MotDampgDax.WriteType = 'Rte';


MotDampgQax = DataDict.OpSignal;
MotDampgQax.LongName = 'Motor Damping Q Axis';
MotDampgQax.Description = [...
  'Q-Axis damping Term for direct feedback motor voltage calculation.'];
MotDampgQax.DocUnits = 'Ohm';
MotDampgQax.SwcShoName = 'MotCurrRegCfg';
MotDampgQax.EngDT = dt.float32;
MotDampgQax.EngInit = 0;
MotDampgQax.EngMin = -0.11;
MotDampgQax.EngMax = 5.5;
MotDampgQax.TestTolerance = 3.81e-06;
MotDampgQax.WrittenIn = {'MotCurrRegCfgPer1'};
MotDampgQax.WriteType = 'Rte';


MotIntglGainDax = DataDict.OpSignal;
MotIntglGainDax.LongName = 'Motor Integral Gain D-Axis';
MotIntglGainDax.Description = [...
  'Calculated D-axis integral gain used in the motor controller'];
MotIntglGainDax.DocUnits = 'Ohm';
MotIntglGainDax.SwcShoName = 'MotCurrRegCfg';
MotIntglGainDax.EngDT = dt.float32;
MotIntglGainDax.EngInit = 0;
MotIntglGainDax.EngMin = 0;
MotIntglGainDax.EngMax = 0.6;
MotIntglGainDax.TestTolerance = 1.49e-07;
MotIntglGainDax.WrittenIn = {'MotCurrRegCfgPer1'};
MotIntglGainDax.WriteType = 'Rte';


MotIntglGainQax = DataDict.OpSignal;
MotIntglGainQax.LongName = 'Motor Integral Gain Q-Axis';
MotIntglGainQax.Description = [...
  'Calculated Q-axis integral gain used in the motor controller'];
MotIntglGainQax.DocUnits = 'Ohm';
MotIntglGainQax.SwcShoName = 'MotCurrRegCfg';
MotIntglGainQax.EngDT = dt.float32;
MotIntglGainQax.EngInit = 0;
MotIntglGainQax.EngMin = 0;
MotIntglGainQax.EngMax = 0.6;
MotIntglGainQax.TestTolerance = 1.49e-07;
MotIntglGainQax.WrittenIn = {'MotCurrRegCfgPer1'};
MotIntglGainQax.WriteType = 'Rte';


MotPropGainDax = DataDict.OpSignal;
MotPropGainDax.LongName = 'Motor Proportional Gain D Axis';
MotPropGainDax.Description = [...
  'Calculated D-Axis proportional gain used in the motor controller.'];
MotPropGainDax.DocUnits = 'Ohm';
MotPropGainDax.SwcShoName = 'MotCurrRegCfg';
MotPropGainDax.EngDT = dt.float32;
MotPropGainDax.EngInit = 0;
MotPropGainDax.EngMin = 0;
MotPropGainDax.EngMax = 2.25;
MotPropGainDax.TestTolerance = 3.81e-06;
MotPropGainDax.WrittenIn = {'MotCurrRegCfgPer1'};
MotPropGainDax.WriteType = 'Rte';


MotPropGainQax = DataDict.OpSignal;
MotPropGainQax.LongName = 'Motor Proportional Gain Q Axis';
MotPropGainQax.Description = [...
  'Calculated Q-Axis proportional gain used in the motor controller.'];
MotPropGainQax.DocUnits = 'Ohm';
MotPropGainQax.SwcShoName = 'MotCurrRegCfg';
MotPropGainQax.EngDT = dt.float32;
MotPropGainQax.EngInit = 0;
MotPropGainQax.EngMin = 0;
MotPropGainQax.EngMax = 2.25;
MotPropGainQax.TestTolerance = 3.81e-06;
MotPropGainQax.WrittenIn = {'MotCurrRegCfgPer1'};
MotPropGainQax.WriteType = 'Rte';



%%-------------------------------------------
%% Inter-Runnable Variable Definition        
%%-------------------------------------------

%%-------------------------------------------
%% Calibrations Definition                   
%%-------------------------------------------
MotCurrRegCfgCtrlrDynGainVehSpdCutOff = DataDict.Calibration;
MotCurrRegCfgCtrlrDynGainVehSpdCutOff.LongName = 'Dynamic Gain Vehicle Speed Cutoff';
MotCurrRegCfgCtrlrDynGainVehSpdCutOff.Description = [...
  'Vehicle Speed Value above which a fixed value of PI gain is to be used' ...
  ''];
MotCurrRegCfgCtrlrDynGainVehSpdCutOff.DocUnits = 'Kph';
MotCurrRegCfgCtrlrDynGainVehSpdCutOff.EngDT = dt.float32;
MotCurrRegCfgCtrlrDynGainVehSpdCutOff.EngVal = 255;
MotCurrRegCfgCtrlrDynGainVehSpdCutOff.EngMin = 0;
MotCurrRegCfgCtrlrDynGainVehSpdCutOff.EngMax = 255;
MotCurrRegCfgCtrlrDynGainVehSpdCutOff.Cardinality = 'Cmn';
MotCurrRegCfgCtrlrDynGainVehSpdCutOff.CustomerVisible = false;
MotCurrRegCfgCtrlrDynGainVehSpdCutOff.Online = false;
MotCurrRegCfgCtrlrDynGainVehSpdCutOff.Impact = 'H';
MotCurrRegCfgCtrlrDynGainVehSpdCutOff.TuningOwner = 'TqCtrl';
MotCurrRegCfgCtrlrDynGainVehSpdCutOff.GraphLink = {''};
MotCurrRegCfgCtrlrDynGainVehSpdCutOff.Monotony = 'None';
MotCurrRegCfgCtrlrDynGainVehSpdCutOff.MaxGrad = 0;
MotCurrRegCfgCtrlrDynGainVehSpdCutOff.PortName = 'MotCurrRegCfgCtrlrDynGainVehSpdCutOff';


MotCurrRegCfgCurrLoopSecOrderTrfFctEna = DataDict.Calibration;
MotCurrRegCfgCurrLoopSecOrderTrfFctEna.LongName = 'Second Order Current Loop Transfer Function Enable';
MotCurrRegCfgCurrLoopSecOrderTrfFctEna.Description = [...
  'Boolean to enable the second order transfer function calculation'];
MotCurrRegCfgCurrLoopSecOrderTrfFctEna.DocUnits = 'Cnt';
MotCurrRegCfgCurrLoopSecOrderTrfFctEna.EngDT = dt.lgc;
MotCurrRegCfgCurrLoopSecOrderTrfFctEna.EngVal = 1;
MotCurrRegCfgCurrLoopSecOrderTrfFctEna.EngMin = 0;
MotCurrRegCfgCurrLoopSecOrderTrfFctEna.EngMax = 1;
MotCurrRegCfgCurrLoopSecOrderTrfFctEna.Cardinality = 'Cmn';
MotCurrRegCfgCurrLoopSecOrderTrfFctEna.CustomerVisible = false;
MotCurrRegCfgCurrLoopSecOrderTrfFctEna.Online = false;
MotCurrRegCfgCurrLoopSecOrderTrfFctEna.Impact = 'H';
MotCurrRegCfgCurrLoopSecOrderTrfFctEna.TuningOwner = 'TqCtrl';
MotCurrRegCfgCurrLoopSecOrderTrfFctEna.GraphLink = {''};
MotCurrRegCfgCurrLoopSecOrderTrfFctEna.Monotony = 'None';
MotCurrRegCfgCurrLoopSecOrderTrfFctEna.MaxGrad = 0;
MotCurrRegCfgCurrLoopSecOrderTrfFctEna.PortName = 'MotCurrRegCfgCurrLoopSecOrderTrfFctEna';


MotCurrRegCfgIntglGainSampleTi = DataDict.Calibration;
MotCurrRegCfgIntglGainSampleTi.LongName = 'Integral Gain Sample Time';
MotCurrRegCfgIntglGainSampleTi.Description = [...
  'Sample time used for the calculation of the integral gains. EngVal, En' ...
  'gMin and EngMax are based on ELECGLBPRM_PWMPERDNOMX2_SEC_F32, but need' ...
  's to be a calibration to support the need to turn of dither indepenten' ...
  't of a software build.'];
MotCurrRegCfgIntglGainSampleTi.DocUnits = 'Sec';
MotCurrRegCfgIntglGainSampleTi.EngDT = dt.float32;
MotCurrRegCfgIntglGainSampleTi.EngVal = 0.000125;
MotCurrRegCfgIntglGainSampleTi.EngMin = 9.1e-05;
MotCurrRegCfgIntglGainSampleTi.EngMax = 0.000143;
MotCurrRegCfgIntglGainSampleTi.Cardinality = 'Cmn';
MotCurrRegCfgIntglGainSampleTi.CustomerVisible = false;
MotCurrRegCfgIntglGainSampleTi.Online = false;
MotCurrRegCfgIntglGainSampleTi.Impact = 'H';
MotCurrRegCfgIntglGainSampleTi.TuningOwner = 'TqCtrl';
MotCurrRegCfgIntglGainSampleTi.GraphLink = {''};
MotCurrRegCfgIntglGainSampleTi.Monotony = 'None';
MotCurrRegCfgIntglGainSampleTi.MaxGrad = 0;
MotCurrRegCfgIntglGainSampleTi.PortName = 'MotCurrRegCfgIntglGainSampleTi';


MotCurrRegCfgMotAgCompuDly = DataDict.Calibration;
MotCurrRegCfgMotAgCompuDly.LongName = 'Motor Angle Commutation Delay';
MotCurrRegCfgMotAgCompuDly.Description = [...
  'Calibration used to estimate commutation delay angle'];
MotCurrRegCfgMotAgCompuDly.DocUnits = 'Sec';
MotCurrRegCfgMotAgCompuDly.EngDT = dt.float32;
MotCurrRegCfgMotAgCompuDly.EngVal = 9.375e-05;
MotCurrRegCfgMotAgCompuDly.EngMin = 0;
MotCurrRegCfgMotAgCompuDly.EngMax = 0.0002;
MotCurrRegCfgMotAgCompuDly.Cardinality = 'Cmn';
MotCurrRegCfgMotAgCompuDly.CustomerVisible = false;
MotCurrRegCfgMotAgCompuDly.Online = false;
MotCurrRegCfgMotAgCompuDly.Impact = 'H';
MotCurrRegCfgMotAgCompuDly.TuningOwner = 'TqCtrl';
MotCurrRegCfgMotAgCompuDly.GraphLink = {''};
MotCurrRegCfgMotAgCompuDly.Monotony = 'None';
MotCurrRegCfgMotAgCompuDly.MaxGrad = 0;
MotCurrRegCfgMotAgCompuDly.PortName = 'MotCurrRegCfgMotAgCompuDly';


MotCurrRegCfgMotClsdLoopBwDaxY = DataDict.Calibration;
MotCurrRegCfgMotClsdLoopBwDaxY.LongName = 'Motor Closedloop Bandwidth D Axis Y';
MotCurrRegCfgMotClsdLoopBwDaxY.Description = [...
  'Lookup table representing the change in d-axis current loop bandwidth ' ...
  'with motor velocity.'];
MotCurrRegCfgMotClsdLoopBwDaxY.DocUnits = 'Hz';
MotCurrRegCfgMotClsdLoopBwDaxY.EngDT = dt.u10p6;
MotCurrRegCfgMotClsdLoopBwDaxY.EngVal =  ...
   [200              300              300              300];
MotCurrRegCfgMotClsdLoopBwDaxY.EngMin = 0;
MotCurrRegCfgMotClsdLoopBwDaxY.EngMax = 1000;
MotCurrRegCfgMotClsdLoopBwDaxY.Cardinality = 'Cmn';
MotCurrRegCfgMotClsdLoopBwDaxY.CustomerVisible = false;
MotCurrRegCfgMotClsdLoopBwDaxY.Online = false;
MotCurrRegCfgMotClsdLoopBwDaxY.Impact = 'H';
MotCurrRegCfgMotClsdLoopBwDaxY.TuningOwner = 'TqCtrl';
MotCurrRegCfgMotClsdLoopBwDaxY.GraphLink = {'MotCurrRegCfgMotCtrlPrmSelnX'};
MotCurrRegCfgMotClsdLoopBwDaxY.Monotony = 'Increasing';
MotCurrRegCfgMotClsdLoopBwDaxY.MaxGrad = 0.0156;
MotCurrRegCfgMotClsdLoopBwDaxY.PortName = 'MotCurrRegCfgMotClsdLoopBwDaxY';


MotCurrRegCfgMotClsdLoopBwQaxY = DataDict.Calibration;
MotCurrRegCfgMotClsdLoopBwQaxY.LongName = 'Motor Closedloop Bandwidth Q Axis Y';
MotCurrRegCfgMotClsdLoopBwQaxY.Description = [...
  '	Lookup table representing the change in q-axis current loop bandwidth' ...
  ' with motor velocity.'];
MotCurrRegCfgMotClsdLoopBwQaxY.DocUnits = 'Hz';
MotCurrRegCfgMotClsdLoopBwQaxY.EngDT = dt.u10p6;
MotCurrRegCfgMotClsdLoopBwQaxY.EngVal =  ...
   [200              300              300              300];
MotCurrRegCfgMotClsdLoopBwQaxY.EngMin = 0;
MotCurrRegCfgMotClsdLoopBwQaxY.EngMax = 1000;
MotCurrRegCfgMotClsdLoopBwQaxY.Cardinality = 'Cmn';
MotCurrRegCfgMotClsdLoopBwQaxY.CustomerVisible = false;
MotCurrRegCfgMotClsdLoopBwQaxY.Online = false;
MotCurrRegCfgMotClsdLoopBwQaxY.Impact = 'H';
MotCurrRegCfgMotClsdLoopBwQaxY.TuningOwner = 'TqCtrl';
MotCurrRegCfgMotClsdLoopBwQaxY.GraphLink = {'MotCurrRegCfgMotCtrlPrmSelnX'};
MotCurrRegCfgMotClsdLoopBwQaxY.Monotony = 'Increasing';
MotCurrRegCfgMotClsdLoopBwQaxY.MaxGrad = 0.0156;
MotCurrRegCfgMotClsdLoopBwQaxY.PortName = 'MotCurrRegCfgMotClsdLoopBwQaxY';


MotCurrRegCfgMotCtrlPrmSelnX = DataDict.Calibration;
MotCurrRegCfgMotCtrlPrmSelnX.LongName = 'Motor Control Parameter Selection X';
MotCurrRegCfgMotCtrlPrmSelnX.Description = [...
  'Motor control parameter selection X table used for picking Closedloop ' ...
  'Bandwidth and Natural Frequency.'];
MotCurrRegCfgMotCtrlPrmSelnX.DocUnits = 'MotRadPerSec';
MotCurrRegCfgMotCtrlPrmSelnX.EngDT = dt.u11p5;
MotCurrRegCfgMotCtrlPrmSelnX.EngVal =  ...
   [0                1                5               10];
MotCurrRegCfgMotCtrlPrmSelnX.EngMin = 0;
MotCurrRegCfgMotCtrlPrmSelnX.EngMax = 1350;
MotCurrRegCfgMotCtrlPrmSelnX.Cardinality = 'Cmn';
MotCurrRegCfgMotCtrlPrmSelnX.CustomerVisible = false;
MotCurrRegCfgMotCtrlPrmSelnX.Online = false;
MotCurrRegCfgMotCtrlPrmSelnX.Impact = 'H';
MotCurrRegCfgMotCtrlPrmSelnX.TuningOwner = 'TqCtrl';
MotCurrRegCfgMotCtrlPrmSelnX.GraphLink = {''};
MotCurrRegCfgMotCtrlPrmSelnX.Monotony = 'Increasing';
MotCurrRegCfgMotCtrlPrmSelnX.MaxGrad = 0.0313;
MotCurrRegCfgMotCtrlPrmSelnX.PortName = 'MotCurrRegCfgMotCtrlPrmSelnX';


MotCurrRegCfgMotDampgRatDax = DataDict.Calibration;
MotCurrRegCfgMotDampgRatDax.LongName = 'Motor Damping Ratio D Axis';
MotCurrRegCfgMotDampgRatDax.Description = [...
  'Damping ratio for the d-axis current loop.'];
MotCurrRegCfgMotDampgRatDax.DocUnits = 'Uls';
MotCurrRegCfgMotDampgRatDax.EngDT = dt.float32;
MotCurrRegCfgMotDampgRatDax.EngVal = 1;
MotCurrRegCfgMotDampgRatDax.EngMin = 0;
MotCurrRegCfgMotDampgRatDax.EngMax = 20;
MotCurrRegCfgMotDampgRatDax.Cardinality = 'Cmn';
MotCurrRegCfgMotDampgRatDax.CustomerVisible = false;
MotCurrRegCfgMotDampgRatDax.Online = false;
MotCurrRegCfgMotDampgRatDax.Impact = 'H';
MotCurrRegCfgMotDampgRatDax.TuningOwner = 'TqCtrl';
MotCurrRegCfgMotDampgRatDax.GraphLink = {''};
MotCurrRegCfgMotDampgRatDax.Monotony = 'None';
MotCurrRegCfgMotDampgRatDax.MaxGrad = 0;
MotCurrRegCfgMotDampgRatDax.PortName = 'MotCurrRegCfgMotDampgRatDax';


MotCurrRegCfgMotDampgRatQax = DataDict.Calibration;
MotCurrRegCfgMotDampgRatQax.LongName = 'Motor Damping Ratio Q Axis';
MotCurrRegCfgMotDampgRatQax.Description = [...
  'Damping ratio for the q-axis current loop.'];
MotCurrRegCfgMotDampgRatQax.DocUnits = 'Uls';
MotCurrRegCfgMotDampgRatQax.EngDT = dt.float32;
MotCurrRegCfgMotDampgRatQax.EngVal = 1;
MotCurrRegCfgMotDampgRatQax.EngMin = 0;
MotCurrRegCfgMotDampgRatQax.EngMax = 20;
MotCurrRegCfgMotDampgRatQax.Cardinality = 'Cmn';
MotCurrRegCfgMotDampgRatQax.CustomerVisible = false;
MotCurrRegCfgMotDampgRatQax.Online = false;
MotCurrRegCfgMotDampgRatQax.Impact = 'H';
MotCurrRegCfgMotDampgRatQax.TuningOwner = 'TqCtrl';
MotCurrRegCfgMotDampgRatQax.GraphLink = {''};
MotCurrRegCfgMotDampgRatQax.Monotony = 'None';
MotCurrRegCfgMotDampgRatQax.MaxGrad = 0;
MotCurrRegCfgMotDampgRatQax.PortName = 'MotCurrRegCfgMotDampgRatQax';


MotCurrRegCfgMotNatFrqDaxY = DataDict.Calibration;
MotCurrRegCfgMotNatFrqDaxY.LongName = 'Motor Natural Frequency D Axis Y';
MotCurrRegCfgMotNatFrqDaxY.Description = [...
  'Lookup table representing the change in d-axis current loop natural fr' ...
  'equency with motor velocity.'];
MotCurrRegCfgMotNatFrqDaxY.DocUnits = 'Hz';
MotCurrRegCfgMotNatFrqDaxY.EngDT = dt.u9p7;
MotCurrRegCfgMotNatFrqDaxY.EngVal =  ...
   [300              300              300              300];
MotCurrRegCfgMotNatFrqDaxY.EngMin = 0;
MotCurrRegCfgMotNatFrqDaxY.EngMax = 500;
MotCurrRegCfgMotNatFrqDaxY.Cardinality = 'Cmn';
MotCurrRegCfgMotNatFrqDaxY.CustomerVisible = false;
MotCurrRegCfgMotNatFrqDaxY.Online = false;
MotCurrRegCfgMotNatFrqDaxY.Impact = 'H';
MotCurrRegCfgMotNatFrqDaxY.TuningOwner = 'TqCtrl';
MotCurrRegCfgMotNatFrqDaxY.GraphLink = {'MotCurrRegCfgMotCtrlPrmSelnX'};
MotCurrRegCfgMotNatFrqDaxY.Monotony = 'Increasing';
MotCurrRegCfgMotNatFrqDaxY.MaxGrad = 0.0078;
MotCurrRegCfgMotNatFrqDaxY.PortName = 'MotCurrRegCfgMotNatFrqDaxY';


MotCurrRegCfgMotNatFrqQaxY = DataDict.Calibration;
MotCurrRegCfgMotNatFrqQaxY.LongName = 'Motor Natural Frequency Q Axis Y';
MotCurrRegCfgMotNatFrqQaxY.Description = [...
  'Lookup table representing the change in q-axis current loop natural fr' ...
  'equency with motor velocity.'];
MotCurrRegCfgMotNatFrqQaxY.DocUnits = 'Hz';
MotCurrRegCfgMotNatFrqQaxY.EngDT = dt.u9p7;
MotCurrRegCfgMotNatFrqQaxY.EngVal =  ...
   [300              300              300              300];
MotCurrRegCfgMotNatFrqQaxY.EngMin = 0;
MotCurrRegCfgMotNatFrqQaxY.EngMax = 500;
MotCurrRegCfgMotNatFrqQaxY.Cardinality = 'Cmn';
MotCurrRegCfgMotNatFrqQaxY.CustomerVisible = false;
MotCurrRegCfgMotNatFrqQaxY.Online = false;
MotCurrRegCfgMotNatFrqQaxY.Impact = 'H';
MotCurrRegCfgMotNatFrqQaxY.TuningOwner = 'TqCtrl';
MotCurrRegCfgMotNatFrqQaxY.GraphLink = {'MotCurrRegCfgMotCtrlPrmSelnX'};
MotCurrRegCfgMotNatFrqQaxY.Monotony = 'Increasing';
MotCurrRegCfgMotNatFrqQaxY.MaxGrad = 0.0078;
MotCurrRegCfgMotNatFrqQaxY.PortName = 'MotCurrRegCfgMotNatFrqQaxY';


MotCurrRegCfgMotRVirtDax = DataDict.Calibration;
MotCurrRegCfgMotRVirtDax.LongName = 'Virtual Motor Resitance D Axis';
MotCurrRegCfgMotRVirtDax.Description = [...
  'Dynamic virtual resistance term for d-axis current loop.'];
MotCurrRegCfgMotRVirtDax.DocUnits = 'Ohm';
MotCurrRegCfgMotRVirtDax.EngDT = dt.float32;
MotCurrRegCfgMotRVirtDax.EngVal = 0;
MotCurrRegCfgMotRVirtDax.EngMin = 0;
MotCurrRegCfgMotRVirtDax.EngMax = 0.2;
MotCurrRegCfgMotRVirtDax.Cardinality = 'Cmn';
MotCurrRegCfgMotRVirtDax.CustomerVisible = false;
MotCurrRegCfgMotRVirtDax.Online = false;
MotCurrRegCfgMotRVirtDax.Impact = 'H';
MotCurrRegCfgMotRVirtDax.TuningOwner = 'TqCtrl';
MotCurrRegCfgMotRVirtDax.GraphLink = {''};
MotCurrRegCfgMotRVirtDax.Monotony = 'None';
MotCurrRegCfgMotRVirtDax.MaxGrad = 0;
MotCurrRegCfgMotRVirtDax.PortName = 'MotCurrRegCfgMotRVirtDax';


MotCurrRegCfgMotRVirtQax = DataDict.Calibration;
MotCurrRegCfgMotRVirtQax.LongName = 'Virtual Motor Resistance Q Axis';
MotCurrRegCfgMotRVirtQax.Description = [...
  'Dynamic virtual resistance term for q-axis current loop.'];
MotCurrRegCfgMotRVirtQax.DocUnits = 'Ohm';
MotCurrRegCfgMotRVirtQax.EngDT = dt.float32;
MotCurrRegCfgMotRVirtQax.EngVal = 0;
MotCurrRegCfgMotRVirtQax.EngMin = 0;
MotCurrRegCfgMotRVirtQax.EngMax = 0.2;
MotCurrRegCfgMotRVirtQax.Cardinality = 'Cmn';
MotCurrRegCfgMotRVirtQax.CustomerVisible = false;
MotCurrRegCfgMotRVirtQax.Online = false;
MotCurrRegCfgMotRVirtQax.Impact = 'H';
MotCurrRegCfgMotRVirtQax.TuningOwner = 'TqCtrl';
MotCurrRegCfgMotRVirtQax.GraphLink = {''};
MotCurrRegCfgMotRVirtQax.Monotony = 'None';
MotCurrRegCfgMotRVirtQax.MaxGrad = 0;
MotCurrRegCfgMotRVirtQax.PortName = 'MotCurrRegCfgMotRVirtQax';


MotCurrRegCfgMotVelFilFrq = DataDict.Calibration;
MotCurrRegCfgMotVelFilFrq.LongName = 'Motor Velocity Filter Frequency';
MotCurrRegCfgMotVelFilFrq.Description = [...
  'Cutoff frequency for single pole low pass filter for PI Gain'];
MotCurrRegCfgMotVelFilFrq.DocUnits = 'Hz';
MotCurrRegCfgMotVelFilFrq.EngDT = dt.float32;
MotCurrRegCfgMotVelFilFrq.EngVal = 10;
MotCurrRegCfgMotVelFilFrq.EngMin = 1;
MotCurrRegCfgMotVelFilFrq.EngMax = 200;
MotCurrRegCfgMotVelFilFrq.Cardinality = 'Cmn';
MotCurrRegCfgMotVelFilFrq.CustomerVisible = false;
MotCurrRegCfgMotVelFilFrq.Online = false;
MotCurrRegCfgMotVelFilFrq.Impact = 'H';
MotCurrRegCfgMotVelFilFrq.TuningOwner = 'TqCtrl';
MotCurrRegCfgMotVelFilFrq.GraphLink = {''};
MotCurrRegCfgMotVelFilFrq.Monotony = 'None';
MotCurrRegCfgMotVelFilFrq.MaxGrad = 0;
MotCurrRegCfgMotVelFilFrq.PortName = 'MotCurrRegCfgMotVelFilFrq';



%%-------------------------------------------
%% Imported Calibrations Definition                   
%%-------------------------------------------
MotRefMdlFbCtrlDi = DataDict.ImprtdCal;
MotRefMdlFbCtrlDi.DocUnits = 'Cnt';
MotRefMdlFbCtrlDi.EngDT = dt.float32;
MotRefMdlFbCtrlDi.EngVal = 0;
MotRefMdlFbCtrlDi.EngMin = 0;
MotRefMdlFbCtrlDi.EngMax = 1;
MotRefMdlFbCtrlDi.PortName = 'MotRefMdlFbCtrlDi';
MotRefMdlFbCtrlDi.Description = [...
  'Feedback Control Disable calibration is owned by Motor Reference Model' ...
  ' function.'];


SysGlbPrmMotPoleCnt = DataDict.ImprtdCal;
SysGlbPrmMotPoleCnt.DocUnits = 'Cnt';
SysGlbPrmMotPoleCnt.EngDT = dt.float32;
SysGlbPrmMotPoleCnt.EngVal = 6;
SysGlbPrmMotPoleCnt.EngMin = 2;
SysGlbPrmMotPoleCnt.EngMax = 12;
SysGlbPrmMotPoleCnt.PortName = 'SysGlbPrmMotPoleCnt';
SysGlbPrmMotPoleCnt.Description = [...
  'Motor Pole Count calibration is owned by System Global Paramters funct' ...
  'ion.'];



%%-------------------------------------------
%% Non-Volatile Memory Definition            
%%-------------------------------------------

%%-------------------------------------------
%% Display Variable Definition               
%%-------------------------------------------
dMotCurrRegCfgMotVelMrfFild = DataDict.Display;
dMotCurrRegCfgMotVelMrfFild.LongName = 'Motor Velocity MRF Filter';
dMotCurrRegCfgMotVelMrfFild.Description = [...
  'Low-pass filtered motor velocity, used for PI gain scheduling.'];
dMotCurrRegCfgMotVelMrfFild.DocUnits = 'MotRadPerSec';
dMotCurrRegCfgMotVelMrfFild.EngDT = dt.float32;
dMotCurrRegCfgMotVelMrfFild.EngMin = -1350;
dMotCurrRegCfgMotVelMrfFild.EngMax = 1350;
dMotCurrRegCfgMotVelMrfFild.InitRowCol = [1  1];



%%-------------------------------------------
%% Per-Instance Memory Definition            
%%-------------------------------------------
MotVelMrfFild = DataDict.PIM;
MotVelMrfFild.LongName = 'Motor Velocity MRF Filtered';
MotVelMrfFild.Description = [...
  'State variable for Motor Velocity Filter'];
MotVelMrfFild.DocUnits = 'MotRadPerSec';
MotVelMrfFild.EngDT = struct.FilLpRec1;
MotVelMrfFild.EngMin = [struct('FilSt',-3.402823466e+38,'FilGain',0)];
MotVelMrfFild.EngMax = [struct('FilSt',3.402823466e+38,'FilGain',3.402823466e+38)];
MotVelMrfFild.InitRowCol = [1  1];



%%-------------------------------------------
%% Constant Definition                       
%%-------------------------------------------
ARCHGLBPRM_2MILLISEC_SEC_F32 = DataDict.Constant;
ARCHGLBPRM_2MILLISEC_SEC_F32.LongName = '2 Milliseconds';
ARCHGLBPRM_2MILLISEC_SEC_F32.Description = '2ms periodic loop time step';
ARCHGLBPRM_2MILLISEC_SEC_F32.DocUnits = 'Sec';
ARCHGLBPRM_2MILLISEC_SEC_F32.EngDT = dt.float32;
ARCHGLBPRM_2MILLISEC_SEC_F32.EngVal = 0.002;
ARCHGLBPRM_2MILLISEC_SEC_F32.Define = 'Global';


ARCHGLBPRM_2PI_ULS_F32 = DataDict.Constant;
ARCHGLBPRM_2PI_ULS_F32.LongName = 'Two Times Pi';
ARCHGLBPRM_2PI_ULS_F32.Description = '2 times the value of Pi';
ARCHGLBPRM_2PI_ULS_F32.DocUnits = 'Uls';
ARCHGLBPRM_2PI_ULS_F32.EngDT = dt.float32;
ARCHGLBPRM_2PI_ULS_F32.EngVal = 6.2831853;
ARCHGLBPRM_2PI_ULS_F32.Define = 'Global';


ARCHGLBPRM_HALFSQRT3_ULS_F32 = DataDict.Constant;
ARCHGLBPRM_HALFSQRT3_ULS_F32.LongName = 'Half Square Root of 3';
ARCHGLBPRM_HALFSQRT3_ULS_F32.Description = '(Square root of 3) divided by 2';
ARCHGLBPRM_HALFSQRT3_ULS_F32.DocUnits = 'Uls';
ARCHGLBPRM_HALFSQRT3_ULS_F32.EngDT = dt.float32;
ARCHGLBPRM_HALFSQRT3_ULS_F32.EngVal = 0.8660254;
ARCHGLBPRM_HALFSQRT3_ULS_F32.Define = 'Global';


CLSDLOOPBWHILIM_HZ_F32 = DataDict.Constant;
CLSDLOOPBWHILIM_HZ_F32.LongName = 'Closedloop Bandwidth High Limit';
CLSDLOOPBWHILIM_HZ_F32.Description = [...
  'Maximum value allowed for calculated Closedloop Bandwidth.'];
CLSDLOOPBWHILIM_HZ_F32.DocUnits = 'Hz';
CLSDLOOPBWHILIM_HZ_F32.EngDT = dt.float32;
CLSDLOOPBWHILIM_HZ_F32.EngVal = 1000;
CLSDLOOPBWHILIM_HZ_F32.Define = 'Local';


CLSDLOOPBWLOLIM_HZ_F32 = DataDict.Constant;
CLSDLOOPBWLOLIM_HZ_F32.LongName = 'Closedloop Bandwidth Low Limit';
CLSDLOOPBWLOLIM_HZ_F32.Description = [...
  'Minimum value allowed for calculated Closedloop Bandwidth.'];
CLSDLOOPBWLOLIM_HZ_F32.DocUnits = 'Hz';
CLSDLOOPBWLOLIM_HZ_F32.EngDT = dt.float32;
CLSDLOOPBWLOLIM_HZ_F32.EngVal = 0;
CLSDLOOPBWLOLIM_HZ_F32.Define = 'Local';


MOTAGELECDLYHILIM_MOTRAD_F32 = DataDict.Constant;
MOTAGELECDLYHILIM_MOTRAD_F32.LongName = 'Motor Angle Electical Delay High Limit';
MOTAGELECDLYHILIM_MOTRAD_F32.Description = [...
  'Upper limit for electrical commutation delay angle.'];
MOTAGELECDLYHILIM_MOTRAD_F32.DocUnits = 'MotRad';
MOTAGELECDLYHILIM_MOTRAD_F32.EngDT = dt.float32;
MOTAGELECDLYHILIM_MOTRAD_F32.EngVal = 1.5;
MOTAGELECDLYHILIM_MOTRAD_F32.Define = 'Local';


MOTAGELECDLYLOLIM_MOTRAD_F32 = DataDict.Constant;
MOTAGELECDLYLOLIM_MOTRAD_F32.LongName = 'Motor Angle Electical Delay Low Limit';
MOTAGELECDLYLOLIM_MOTRAD_F32.Description = [...
  'Lower Limit for electrical commutation delay angle.'];
MOTAGELECDLYLOLIM_MOTRAD_F32.DocUnits = 'MotRad';
MOTAGELECDLYLOLIM_MOTRAD_F32.EngDT = dt.float32;
MOTAGELECDLYLOLIM_MOTRAD_F32.EngVal = -1.5;
MOTAGELECDLYLOLIM_MOTRAD_F32.Define = 'Local';


MOTDAMPGHILIM_OHM_F32 = DataDict.Constant;
MOTDAMPGHILIM_OHM_F32.LongName = 'Motor Damping High Limit';
MOTDAMPGHILIM_OHM_F32.Description = [...
  'Upper limit for the calculated damping term'];
MOTDAMPGHILIM_OHM_F32.DocUnits = 'Ohm';
MOTDAMPGHILIM_OHM_F32.EngDT = dt.float32;
MOTDAMPGHILIM_OHM_F32.EngVal = 5.5;
MOTDAMPGHILIM_OHM_F32.Define = 'Local';


MOTDAMPGLOLIM_OHM_F32 = DataDict.Constant;
MOTDAMPGLOLIM_OHM_F32.LongName = 'Motor Damping Low Limit';
MOTDAMPGLOLIM_OHM_F32.Description = [...
  'Lower limit for the calculated damping term gain factors'];
MOTDAMPGLOLIM_OHM_F32.DocUnits = 'Ohm';
MOTDAMPGLOLIM_OHM_F32.EngDT = dt.float32;
MOTDAMPGLOLIM_OHM_F32.EngVal = -0.11;
MOTDAMPGLOLIM_OHM_F32.Define = 'Local';


MOTDAMPGRATCON_ULS_F32 = DataDict.Constant;
MOTDAMPGRATCON_ULS_F32.LongName = 'Motor Damping Constant';
MOTDAMPGRATCON_ULS_F32.Description = [...
  'It is a constant based on the math equation. And use this name to avoi' ...
  'd magic number.'];
MOTDAMPGRATCON_ULS_F32.DocUnits = 'Uls';
MOTDAMPGRATCON_ULS_F32.EngDT = dt.float32;
MOTDAMPGRATCON_ULS_F32.EngVal = 2;
MOTDAMPGRATCON_ULS_F32.Define = 'Local';


MOTINTGLGAINHILIM_OHM_F32 = DataDict.Constant;
MOTINTGLGAINHILIM_OHM_F32.LongName = 'Motor Integral Gain High Limit';
MOTINTGLGAINHILIM_OHM_F32.Description = [...
  'Upper limit on the calculated motor Ki'];
MOTINTGLGAINHILIM_OHM_F32.DocUnits = 'Ohm';
MOTINTGLGAINHILIM_OHM_F32.EngDT = dt.float32;
MOTINTGLGAINHILIM_OHM_F32.EngVal = 0.6;
MOTINTGLGAINHILIM_OHM_F32.Define = 'Local';


MOTINTGLGAINLOLIM_OHM_F32 = DataDict.Constant;
MOTINTGLGAINLOLIM_OHM_F32.LongName = 'Motor Integral Gain Low Limit';
MOTINTGLGAINLOLIM_OHM_F32.Description = [...
  'Lower limit on the calculated motor Ki'];
MOTINTGLGAINLOLIM_OHM_F32.DocUnits = 'Ohm';
MOTINTGLGAINLOLIM_OHM_F32.EngDT = dt.float32;
MOTINTGLGAINLOLIM_OHM_F32.EngVal = 0;
MOTINTGLGAINLOLIM_OHM_F32.Define = 'Local';


MOTNATFREQHILIM_HZ_F32 = DataDict.Constant;
MOTNATFREQHILIM_HZ_F32.LongName = 'Motor Natural Frequency High Limit';
MOTNATFREQHILIM_HZ_F32.Description = [...
  'Maximum value allowed for motor Natural Frequency.'];
MOTNATFREQHILIM_HZ_F32.DocUnits = 'Hz';
MOTNATFREQHILIM_HZ_F32.EngDT = dt.float32;
MOTNATFREQHILIM_HZ_F32.EngVal = 500;
MOTNATFREQHILIM_HZ_F32.Define = 'Local';


MOTNATFREQLOLIM_HZ_F32 = DataDict.Constant;
MOTNATFREQLOLIM_HZ_F32.LongName = 'Motor Natural Frequency Low Limit';
MOTNATFREQLOLIM_HZ_F32.Description = [...
  'Minimum value allowed for motor Natural Frequency.'];
MOTNATFREQLOLIM_HZ_F32.DocUnits = 'Hz';
MOTNATFREQLOLIM_HZ_F32.EngDT = dt.float32;
MOTNATFREQLOLIM_HZ_F32.EngVal = 0;
MOTNATFREQLOLIM_HZ_F32.Define = 'Local';


MOTPROPGAINHILIM_OHM_F32 = DataDict.Constant;
MOTPROPGAINHILIM_OHM_F32.LongName = 'Motor Proportional Gain High Limit';
MOTPROPGAINHILIM_OHM_F32.Description = [...
  'Upper limit on the calculated Proportional Gain'];
MOTPROPGAINHILIM_OHM_F32.DocUnits = 'Ohm';
MOTPROPGAINHILIM_OHM_F32.EngDT = dt.float32;
MOTPROPGAINHILIM_OHM_F32.EngVal = 2.25;
MOTPROPGAINHILIM_OHM_F32.Define = 'Local';


MOTPROPGAINLOLIM_OHM_F32 = DataDict.Constant;
MOTPROPGAINLOLIM_OHM_F32.LongName = 'Motor Proportional Gain Low Limit';
MOTPROPGAINLOLIM_OHM_F32.Description = [...
  'Lower limit on the calculated Proportional Gain'];
MOTPROPGAINLOLIM_OHM_F32.DocUnits = 'Ohm';
MOTPROPGAINLOLIM_OHM_F32.EngDT = dt.float32;
MOTPROPGAINLOLIM_OHM_F32.EngVal = 0;
MOTPROPGAINLOLIM_OHM_F32.Define = 'Local';


POLETOPHA_ULS_F32 = DataDict.Constant;
POLETOPHA_ULS_F32.LongName = 'Pole to Phase';
POLETOPHA_ULS_F32.Description = [...
  'The phase number,which is half of the number of the poles, is achieved' ...
  ' by multiplying this and the number of the poles.'];
POLETOPHA_ULS_F32.DocUnits = 'Uls';
POLETOPHA_ULS_F32.EngDT = dt.float32;
POLETOPHA_ULS_F32.EngVal = 0.5;
POLETOPHA_ULS_F32.Define = 'Local';


ZEROMOTCTRLGAIN_OHM_F32 = DataDict.Constant;
ZEROMOTCTRLGAIN_OHM_F32.LongName = 'Zero Motor Proportional or Integral Gain';
ZEROMOTCTRLGAIN_OHM_F32.Description = [...
  'Zero Motor Proportional or Integral Gain'];
ZEROMOTCTRLGAIN_OHM_F32.DocUnits = 'Ohm';
ZEROMOTCTRLGAIN_OHM_F32.EngDT = dt.float32;
ZEROMOTCTRLGAIN_OHM_F32.EngVal = 0;
ZEROMOTCTRLGAIN_OHM_F32.Define = 'Local';



%%-------------------------------------------
%% NTC Definition                            
%%-------------------------------------------
%end of Data Dictionary
