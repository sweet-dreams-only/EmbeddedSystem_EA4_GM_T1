<#@ AutosarXml processor="ArDirectiveProcessor" requires="arPrefix='ar';arNamespace='http://autosar.org/4.0.3'" #>
<#@ template inherits="AutosarDirectiveProcessor.ArGtcBase" debug="true" #>
<#@ output extension="" #>
<#@ include file="Helper.tt" #>/**********************************************************************************************************************
* Copyright 2015 Nxtr
* Nxtr Confidential
*
* Module File Name:   TunSelnMngt_Cfg_private.c
* Module Description: Private configuration source file for Tuning Selection Management
* Project           : CBD
* Author            : Kevin Smith
***********************************************************************************************************************
* Version Control:
* %version:          3 %
* %derived_by:       cz7lt6 %
*---------------------------------------------------------------------------------------------------------------------
* Date      Rev     Author  Change Description                                                              SCR #
* --------  ------- ------- ---------------------------------------------------------------------------     ----------
* 10/08/15  1       KJS     Initial version of the private source template                                  EA4#1840
* 03/31/16  2       KJS     Updated template to follow ES400A Rev 1                                         EA4#5092
* 08/29/16  3       KJS     Updated template for XCP write region access and anomaly EA4#6672 corrections   EA4#7236
**********************************************************************************************************************/

#include "TunSelnMngt_Cfg_private.h"

/******************************************** File Level Rule Deviations *********************************************/
/* MISRA-C:2004 Rule 19.1 [NXTRDEV 19.1.1]: AUTOSAR requires deviation from this rule for Memory Mapping include statements */
/* MISRA-C:2004 Rule 11.3 [NXTRDEV 11.3.4]: Cast of a variable address to an integer type is required for range checking.*/
/* MISRA-C:2004 Rule 11.4 [NXTRDEV 11.4.5]: Cast of a variable pointer to a pointer of a different type is allowed for the purpose of efficient memory copying */


/********************************************* Embedded Local Constants **********************************************/

/******************************************* Module Specific Data Types **********************************************/

/******************************************** Module Specific Variables **********************************************/
<#
    /* List Declaration */
    List<CalListClass> CalCmpList = new List<CalListClass>();
    List<string> CalCmpTypesList = new List<string>();
    List<string> OnlineCalGroupList = new List<string>();
    List<WriteRegionClass> WriteRegionList = new List<WriteRegionClass>();

    /* Assign the component types to the list */
    CalCmpTypesList.Add("CommonComponentReference");
    CalCmpTypesList.Add("InitializationComponentReference");
    CalCmpTypesList.Add("RuntimeComponentReference");
    
    /* The following strings are generated by the RTE generated based on the calibration component name, using 
    a variable reference in case the generated is ever altered by Vector */
    string CalCmpNamePrefix = "Rte_CalprmElementGroup_";
    string CalCmpNameSuffix = "_DEFAULT_RTE_CALPRM_GROUP";
    
    /* Change context to TunSelnMngt */
    ChangeContext( Xp.ModuleConfAtDefRefTo( "TunSelnMngt" ) );
    
    int Counter = 0;
    int CountLimit = 0;
#>

<# /* ----[ Gather all calibration components into one list for table generation ]------------------------------- */ #>
<#
    List<ContainerLoopClass> CalCmpMainContainerList = new List<ContainerLoopClass>();

    CalCmpMainContainerList.Add(new ContainerLoopClass("ProgramRegions/CommonComponent","CommonComponentReference"));
    CalCmpMainContainerList.Add(new ContainerLoopClass("ProgramRegions/InitializationComponent","InitializationComponentReference"));
    CalCmpMainContainerList.Add(new ContainerLoopClass("ProgramRegions/RuntimeComponent","RuntimeComponentReference"));

    foreach (ContainerLoopClass entry in CalCmpMainContainerList)
    {
#>
<# !LOOP( Xp.ContainerAtDefRefTo( entry.Container ) ) #>
<#
        /* Create a list of Nxtr calibration components */
        CalListClass data = new CalListClass();

        data.CalCmpName = ValueOf( "ar:SHORT-NAME" );
        data.BaseCmp = ValueOf( Xp.ValueAtDefRefTo( "ComponentPartOfIntegration" ));
        try
        {
            data.BaseCalCmpName = LastValueSegmentOf(Xp.ValueRefAtDefRefTo( entry.SubContainer ));
        }
        catch
        {
            data.BaseCalCmpName = "NULL";
        }

        CalCmpList.Add(data);
#>
<# !ENDLOOP #>
<#
    }
#>
<# /* ----------------------------------------------------------------------------------------------------------- */ #>
<# /* ----[ Generate Tables ]------------------------------------------------------------------------------------ */ #>
<#
    List<TblGenClass> TblGenList = new List<TblGenClass>();

    TblGenList.Add( new TblGenClass( 0, 0,
                                     "CalibrationConfiguration/InitializationCalibrationConfiguration",
                                     "ININCALCFGTBL_REC",
                                     "MAXINITIDXCNT_CNT_U08",
                                     "TunSelnIdxTblRec1",
                                     "InitializationIndex" ) );

    TblGenList.Add( new TblGenClass( 0, 0,
                                     "CalibrationConfiguration/RuntimeSelectableCalibrationConfiguration",
                                     "RTCALCFGTBL_REC",
                                     "MAXRTIDXCNT_CNT_U08",
                                     "TunSelnIdxTblRec1",
                                     "RuntimeIndex" ) );
    
    TblGenList.Add( new TblGenClass( 0, 0,
                                     "OnlineCalibrationGroup",
                                     "ONLINECALCFGTBL_REC",
                                     "MAXONLINECALCFGCNT_CNT_U08",
                                     "TunSelnOnlineCalIdxTblRec1",
                                     "GroupIndex" ) );
    
    foreach (TblGenClass entry in TblGenList)
    {
#>
<# !LOOP( Xp.ContainerAtDefRefTo( entry.ContainerPath ) ) #>
<#
        /* Set up limits for loops to ensure proper code formatting/generation with the table values */
        foreach (string CmpName in CalCmpTypesList)
        {
            /* No need to filter the Rt00 and Inin00 like in the header file, 
             * the source code generation section will take care of those items */
            entry.LoopLimit += Count( Xp.ValueRefAtDefRefTo( CmpName ));
        }
#>
<# !ENDLOOP #>
<#
        if (entry.LoopLimit == 0)
        {
            /* No entries exist, make a dummy table */
#>
const VAR(<#= entry.DataType #>, AUTOMATIC) <#= entry.TblName #>[1U] = { {0x00, TUNSELNMNGT_NOTUSEDIDX_CNT_U8,TUNSELNMNGT_NOTUSEDIDX_CNT_U8} };
<#
        }
        else
        {
#>
const VAR(<#= entry.DataType #>, AUTOMATIC) <#= entry.TblName #>[<#= entry.TblSize #>] = {
<# !LOOP( Xp.ContainerAtDefRefTo( entry.ContainerPath ) ) #>
<#
            string IdxName = "";
            string EndOfTableStr = "";
            int IdxValue = 0;

            IdxName = ValueOf( "ar:SHORT-NAME" ); 
            IdxValue = ValueOf( Xp.ValueAtDefRefTo( entry.CfgIdx )); /* Name of the index in Configurator */

            foreach (string CmpName in CalCmpTypesList)
            {
                if( Count( Xp.ValueRefAtDefRefTo( CmpName )) > 0)
                {
#>
<# !LOOP( Xp.ValueRefAtDefRefTo( CmpName ) ) #>
<#
                    string RefCmpName = "";
                    string BaseRefCmpName = "";

                    RefCmpName = LastValueSegmentOf("." );
                    BaseRefCmpName = RefCmpName;

                    foreach (CalListClass ListItem in CalCmpList)
                    {
                        if ((ListItem.CalCmpName == RefCmpName) && (ListItem.BaseCmp == false))
                        {
                            BaseRefCmpName = ListItem.BaseCalCmpName;
                            break;
                        }
                    }

                    EndOfTableStr = ", /*" + IdxName + " */";
                    if( entry.LoopCounter == (entry.LoopLimit - 1) )
                    {
                        EndOfTableStr = "  /*" + IdxName + " */";
                    }
                    entry.LoopCounter++;
                    
                    if( entry.DataType != "TunSelnOnlineCalIdxTblRec1" )
                    {
#>
    {(uint16)<#= CalCmpNamePrefix#><#= RefCmpName #><#= CalCmpNameSuffix#>, (uint16)<#= CalCmpNamePrefix#><#= BaseRefCmpName #><#= CalCmpNameSuffix#>, <#= FormatHex(IdxValue, 2, HexCase.Upper) #>U }<#= EndOfTableStr #>
<#                  
                    }
                    else
                    {
                        /* Only allow the Inin00 or Rt00 versions in the final table */
                        if ( (RefCmpName.IndexOf("Inin") > 0) || (RefCmpName.IndexOf("Rt") > 0) )
                        {
                            if ( (RefCmpName.IndexOf("Inin00") > 0) || (RefCmpName.IndexOf("Rt00") > 0) )
                            {
#>
    {(uint8 *)(&OnlineRamCalTbl_C.<#= IdxName #>.<#= RefCmpName #>), sizeof(OnlineRamCalTbl_C.<#= IdxName #>.<#= RefCmpName #>), (uint16)<#= CalCmpNamePrefix#><#= BaseRefCmpName #><#= CalCmpNameSuffix#>, <#= FormatHex(IdxValue, 2, HexCase.Upper) #>U}<#= EndOfTableStr #>
<#
                            }
                            else { /* Do nothing */ }
                        }
                        else
                        {
#>
    {(uint8 *)(&OnlineRamCalTbl_C.<#= IdxName #>.<#= RefCmpName #>), sizeof(OnlineRamCalTbl_C.<#= IdxName #>.<#= RefCmpName #>), (uint16)<#= CalCmpNamePrefix#><#= BaseRefCmpName #><#= CalCmpNameSuffix#>, <#= FormatHex(IdxValue, 2, HexCase.Upper) #>U}<#= EndOfTableStr #>
<#
                        }
                    }
#>
<# !ENDLOOP #>
<#
                }
            }
#>
<# !ENDLOOP #>
};
<#
        }
    /* Break or gap was added to add a space in the output of the template between each table. */
#>

<#
    /* See comment above */
    }
#>
<# /* ----------------------------------------------------------------------------------------------------------- */ #>
const VAR(uint32, AUTOMATIC) ONLINECALSEGINFOTBL_U32[ONLINECALGROUPS_CNT_U08] = {
<# 
    Counter = 0;
    CountLimit = Count(Xp.ContainerAtDefRefTo( "OnlineCalibrationGroup" )); 
    string EntryStr = "";
    string tmpEntryStr = "";
#>
<# !LOOP( Xp.ContainerAtDefRefTo( "OnlineCalibrationGroup" ) ) #>
<#
    EntryStr = "";
    tmpEntryStr = "";
    tmpEntryStr = ValueOf( "ar:SHORT-NAME" );
    EntryStr = "sizeof(OnlineRamCalTbl_C." + tmpEntryStr + ")";
    if ( Counter < (CountLimit - 1) )
    {
        EntryStr = EntryStr + ",";
        Counter++;
    }
    else
    {
        Counter++;
    }
#>
    <#= EntryStr #>
<# !ENDLOOP #>
};
<# /* ----------------------------------------------------------------------------------------------------------- */ #>
<#
    /* Gather all write access regions to be processed later */
    int DevCount = 0;
    int ProdCount = 0;
    if ( Count( Xp.ContainerAtDefRefTo("XcpWriteAccess/XcpWriteAccessRegions") ) > 0 )
    {
#>
<# !LOOP( Xp.ContainerAtDefRefTo( "XcpWriteAccess/XcpWriteAccessRegions" ) ) #>
<#
        WriteRegionClass data = new WriteRegionClass();
        
        /* Gather data for each region */
        data.Name = ValueOf( "ar:SHORT-NAME" );
        
        data.StartAddr = ValueOf( Xp.ValueAtDefRefTo( "XcpWriteAccessRegions/StartingAddress" ));
        data.StartAddrSym = ValueOf( Xp.ValueAtDefRefTo( "XcpWriteAccessRegions/StartingAddressSymbol" ));
        data.StartAddrSym = data.StartAddrSym.Trim();
        
        data.EndAddr = ValueOf( Xp.ValueAtDefRefTo( "XcpWriteAccessRegions/EndingAddress" ));
        data.EndAddrSym = ValueOf( Xp.ValueAtDefRefTo( "XcpWriteAccessRegions/EndingAddressSymbol" ));
        data.EndAddrSym = data.EndAddrSym.Trim();
        
        data.UseSym = ValueOf( Xp.ValueAtDefRefTo( "XcpWriteAccessRegions/UseSymbolName" ));
        data.ProdOnly = ValueOf( Xp.ValueAtDefRefTo( "XcpWriteAccessRegions/ProductionModeOnly" ));
        
        /* Quick data checking */
        if ( data.UseSym == true )
        {
            if ( String.IsNullOrEmpty(data.StartAddrSym) )
            {
                data.StartAddrSym = "@error \"Region Start Address not defined\"";
            }
            
            if ( String.IsNullOrEmpty(data.EndAddrSym) )
            {
                data.EndAddrSym = "@error \"Region End Address not defined\"";
            }
        }
        else
        {
            /* check start/end range and convert to hex */
            if ( data.StartAddr > data.EndAddr )
            {
                data.StartAddrSym = "@error \"Region Start Address is larger than the end address\"";
                data.EndAddrSym = "@error \"Region End Address is smaller than the start address\"";
            }
            else
            {
                data.StartAddrSym = FormatHex(data.StartAddr, 8, HexCase.Upper) + "UL";
                data.EndAddrSym = FormatHex(data.EndAddr, 8, HexCase.Upper) + "UL";
            }
        }
        
        if (data.ProdOnly == true)
        {
            ProdCount++;
        }
        
        /* Always increment dev count */
        DevCount++;
        
        /* Add to list */
        WriteRegionList.Add(data);
#>
<# !ENDLOOP #>
<#
    }
#>
/******************************************** Local Function Prototypes **********************************************/

/*********************************************** Function Definitions ************************************************/

/**********************************************************************************************************************
* Name:         TunSelnMngt_ChkXcpWrAcs
*
* Description:  Function is used to check the XCP write access for the provided address. If the address falls within
*               one of the defined regions, the write is allowed to proceed, otherwise it is rejected and a negative
*               response is returned.  
*
* Inputs:       ReqAdr_Cnt_T_u32 - Requested address for the XCP write
*
* Outputs:      Rtn_Cnt_T_logl - TRUE: The write is within a defined region and allowed to proceed, FALSE: Write 
*                                not allowed for that address, reject write. 
*
* Usage Notes:  Function shall only be used by TunSelnMngt and shall not be used by outside applications. 
**********************************************************************************************************************/
FUNC(boolean, TunSelnMngt_CODE) TunSelnMngt_ChkXcpWrAcs(uint32 ReqAdr_Cnt_T_u32)
{
    VAR(boolean, AUTOMATIC) Rtn_Cnt_T_logl = FALSE;

#if (TUNSELNMNGTDEVLPMODENA == STD_ON)
    /* Verify requested address falls in a development mode region */
<#
    string Delim = "";
    int SubDevCount = 0;
    if (DevCount > 0)
    {
#>
    if( ( (ReqAdr_Cnt_T_u32 >= (uint32)&(OnlineRamCalTbl_C.byte[0])) && (ReqAdr_Cnt_T_u32 <= (uint32)&(OnlineRamCalTbl_C.byte[(ONLINECALRAMTBL_CNT_U16-1U)]))) ||
<#
        foreach( WriteRegionClass entry in WriteRegionList )
        {
            if (SubDevCount < (DevCount - 1))
            {
                Delim = "||";
            }
            else
            {
                Delim = ")";
            }
#>
        ( (ReqAdr_Cnt_T_u32 >= (uint32)(<#= entry.StartAddrSym #>)) && (ReqAdr_Cnt_T_u32 <= (uint32)(<#= entry.EndAddrSym #>))) <#= Delim #>
<#
            SubDevCount++;
        }
    }
    else
    {
#>
    if( ( (ReqAdr_Cnt_T_u32 >= (uint32)&(OnlineRamCalTbl_C.byte[0])) && (ReqAdr_Cnt_T_u32 <= (uint32)&(OnlineRamCalTbl_C.byte[(ONLINECALRAMTBL_CNT_U16-1U)]))) )
<#
    }
#>
#else
    /* Verify requested address falls in a production region */
<#
    Delim = "";
    int SubProdCount = 0;
    if (ProdCount > 0)
    {
#>
    if( ( (ReqAdr_Cnt_T_u32 >= (uint32)&(OnlineRamCalTbl_C.byte[0])) && (ReqAdr_Cnt_T_u32 <= (uint32)&(OnlineRamCalTbl_C.byte[(ONLINECALRAMTBL_CNT_U16-1U)]))) ||
<#
        foreach( WriteRegionClass entry in WriteRegionList )
        {
            if ( entry.ProdOnly == true )
            {
                if (SubProdCount < (ProdCount - 1) )
                {
                    Delim = "||";
                }
                else
                {
                    Delim = ")";
                }
#>
        ( (ReqAdr_Cnt_T_u32 >= (uint32)(<#= entry.StartAddrSym #>)) && (ReqAdr_Cnt_T_u32 <= (uint32)(<#= entry.EndAddrSym #>))) <#= Delim #>
<#
                SubProdCount++;
            }
        }
    }
    else
    {
#>
    if( ( (ReqAdr_Cnt_T_u32 >= (uint32)&(OnlineRamCalTbl_C.byte[0])) && (ReqAdr_Cnt_T_u32 <= (uint32)&(OnlineRamCalTbl_C.byte[(ONLINECALRAMTBL_CNT_U16-1U)]))) )
<#
    }
#>
#endif
    {
        Rtn_Cnt_T_logl = TRUE;
    }

    return Rtn_Cnt_T_logl;
}

<# /* ----------------------------------------------------------------------------------------------------------- */ #>
<#+
    public class CalListClass
    {
        public string CalCmpName;
        public string BaseCalCmpName;
        public bool BaseCmp;
    }
    public class ContainerLoopClass
    {
        public ContainerLoopClass(string container, string subcontainer)
        {
            this.Container = container;
            this.SubContainer = subcontainer;
        }
        public string Container;
        public string SubContainer;
    }
    public class TblGenClass
    {
        public TblGenClass(int looplimit, int loopcounter, string containerpath, string tblname, string tblsize, string datatype, string cfgidx)
        {
            this.LoopLimit = looplimit;
            this.LoopCounter = loopcounter;
            this.ContainerPath = containerpath;
            this.TblName = tblname;
            this.TblSize = tblsize; 
            this.DataType = datatype;
            this.CfgIdx = cfgidx;
        }
        public int LoopLimit;
        public int LoopCounter;
        public string ContainerPath;
        public string TblName;
        public string TblSize;
        public string DataType;
        public string CfgIdx;
    }
    public class WriteRegionClass
    {
        public string Name;
        public string StartAddrSym;
        public uint StartAddr;
        public string EndAddrSym;
        public uint EndAddr;
        public bool UseSym;
        public bool ProdOnly;
    }
#>
