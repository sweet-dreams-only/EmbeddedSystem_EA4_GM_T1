diff --git a/suds/client.py b/suds/client.py
index 8b4f258..085a564 100644
--- a/suds/client.py
+++ b/suds/client.py
@@ -705,7 +705,7 @@ class SoapClient:
         @type error: L{transport.TransportError}
         """
         status, reason = (error.httpcode, tostr(error))
-        reply = error.fp.read()
+        reply = error.get_content()
         log.debug('http failed:\n%s', reply)
         if status == 500:
             if len(reply) > 0:
@@ -841,4 +841,4 @@ class RequestContext:
         @type error: A suds I{TransportError}.
         """
         return self.client.failed(self.binding, error)
-        
\ No newline at end of file
+        
diff --git a/suds/transport/__init__.py b/suds/transport/__init__.py
index e1e00d7..62f3833 100644
--- a/suds/transport/__init__.py
+++ b/suds/transport/__init__.py
@@ -18,12 +18,33 @@
 Contains transport interface (classes).
 """
 
+import email.parser
+
+
+def decode_message(headers, raw_message):
+    if headers['content-type'].startswith('multipart/'):
+        raw_reply = str(headers) + raw_message
+        parser = email.parser.Parser()
+        decoded_reply = parser.parsestr(raw_reply)
+        payload_parts = (part.get_payload()
+                         for part in decoded_reply.get_payload())
+        return ''.join(payload_parts)
+    else:
+        return raw_message
+
 
 class TransportError(Exception):
-    def __init__(self, reason, httpcode, fp=None):
+    def __init__(self, reason, httpcode, fp=None, headers=None):
         Exception.__init__(self, reason)
         self.httpcode = httpcode
         self.fp = fp
+        self.headers = headers
+
+    def get_content(self):
+        if not hasattr(self, '_content'):
+            self._content = decode_message(self.headers, self.fp.read())
+        return self._content
+
 
 class Request:
     """
@@ -61,8 +82,10 @@ class Reply:
     A transport reply
     @ivar code: The http code returned.
     @type code: int
-    @ivar message: The message to be sent in a POST request.
+    @ivar message: The message decoded from the HTTP response.
     @type message: str
+    @ivar raw_message: The undecoded message from the HTTP response.
+    @type raw_message: str
     @ivar headers: The http headers to be used for the request.
     @type headers: dict
     """
@@ -77,9 +100,10 @@ class Reply:
         @type message: str
         """
         self.code = code
-        self.headers = headers
-        self.message = message
-        
+        self.headers = headers.dict
+        self.raw_message = message
+        self.message = decode_message(headers, self.raw_message)
+
     def __str__(self):
         s = []
         s.append('CODE: %s' % self.code)
diff --git a/suds/transport/http.py b/suds/transport/http.py
index 6d85b09..9307c41 100644
--- a/suds/transport/http.py
+++ b/suds/transport/http.py
@@ -61,7 +61,7 @@ class HttpTransport(Transport):
             self.proxy = self.options.proxy
             return self.u2open(u2request)
         except u2.HTTPError, e:
-            raise TransportError(str(e), e.code, e.fp)
+            raise TransportError(str(e), e.code, e.fp, e.headers)
 
     def send(self, request):
         result = None
@@ -76,13 +76,13 @@ class HttpTransport(Transport):
             log.debug('sending:\n%s', request)
             fp = self.u2open(u2request)
             self.getcookies(fp, u2request)
-            result = Reply(200, fp.headers.dict, fp.read())
+            result = Reply(200, fp.headers, fp.read())
             log.debug('received:\n%s', result)
         except u2.HTTPError, e:
             if e.code in (202,204):
                 result = None
             else:
-                raise TransportError(e.msg, e.code, e.fp)
+                raise TransportError(e.msg, e.code, e.fp, e.headers)
         return result
 
     def addcookies(self, u2request):
