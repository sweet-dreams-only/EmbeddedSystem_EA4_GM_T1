# ======================================================================================================================
# .\odx.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:e92452c8d3e28a9e27abfc9994d2007779e7f4c9
# Generated 2015-10-27 10:45:42.792000 by PyXB version 1.2.4 using Python 2.7.8.final.0
# Namespace AbsentNamespace0
# ----------------------------------------------------------------------------------------------------------------------
# This generated file is used to work with ODX format files.  It provides the bindings necessary for opening, parsing,
# generating, and saving ODX files.
# ----------------------------------------------------------------------------------------------------------------------

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:65902e4f-7cb9-11e5-8670-18cf5e4ea378')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.4'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.CreateAbsentNamespace()
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: ADDRESSING
class ADDRESSING (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ADDRESSING')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 40, 0)
    _Documentation = None
ADDRESSING._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ADDRESSING, enum_prefix=None)
ADDRESSING.FUNCTIONAL = ADDRESSING._CF_enumeration.addEnumeration(unicode_value='FUNCTIONAL', tag='FUNCTIONAL')
ADDRESSING.PHYSICAL = ADDRESSING._CF_enumeration.addEnumeration(unicode_value='PHYSICAL', tag='PHYSICAL')
ADDRESSING.FUNCTIONAL_OR_PHYSICAL = ADDRESSING._CF_enumeration.addEnumeration(unicode_value='FUNCTIONAL-OR-PHYSICAL', tag='FUNCTIONAL_OR_PHYSICAL')
ADDRESSING._InitializeFacetMap(ADDRESSING._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ADDRESSING', ADDRESSING)

# Atomic simple type: [anonymous]
class STD_ANON (pyxb.binding.datatypes.language):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 51, 0)
    _Documentation = None
STD_ANON._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON._CF_pattern.addPattern(pattern='[a-z]{2}(-[A-Z]{2})?')
STD_ANON._InitializeFacetMap(STD_ANON._CF_pattern)

# Atomic simple type: COMM-RELATION-VALUE-TYPE
class COMM_RELATION_VALUE_TYPE (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMM-RELATION-VALUE-TYPE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 250, 0)
    _Documentation = None
COMM_RELATION_VALUE_TYPE._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=COMM_RELATION_VALUE_TYPE, enum_prefix=None)
COMM_RELATION_VALUE_TYPE.CURRENT = COMM_RELATION_VALUE_TYPE._CF_enumeration.addEnumeration(unicode_value='CURRENT', tag='CURRENT')
COMM_RELATION_VALUE_TYPE.STORED = COMM_RELATION_VALUE_TYPE._CF_enumeration.addEnumeration(unicode_value='STORED', tag='STORED')
COMM_RELATION_VALUE_TYPE.STATIC = COMM_RELATION_VALUE_TYPE._CF_enumeration.addEnumeration(unicode_value='STATIC', tag='STATIC')
COMM_RELATION_VALUE_TYPE.SUBSTITUTED = COMM_RELATION_VALUE_TYPE._CF_enumeration.addEnumeration(unicode_value='SUBSTITUTED', tag='SUBSTITUTED')
COMM_RELATION_VALUE_TYPE._InitializeFacetMap(COMM_RELATION_VALUE_TYPE._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'COMM-RELATION-VALUE-TYPE', COMM_RELATION_VALUE_TYPE)

# Atomic simple type: COMPU-CATEGORY
class COMPU_CATEGORY (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPU-CATEGORY')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 444, 0)
    _Documentation = None
COMPU_CATEGORY._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=COMPU_CATEGORY, enum_prefix=None)
COMPU_CATEGORY.IDENTICAL = COMPU_CATEGORY._CF_enumeration.addEnumeration(unicode_value='IDENTICAL', tag='IDENTICAL')
COMPU_CATEGORY.LINEAR = COMPU_CATEGORY._CF_enumeration.addEnumeration(unicode_value='LINEAR', tag='LINEAR')
COMPU_CATEGORY.SCALE_LINEAR = COMPU_CATEGORY._CF_enumeration.addEnumeration(unicode_value='SCALE-LINEAR', tag='SCALE_LINEAR')
COMPU_CATEGORY.TEXTTABLE = COMPU_CATEGORY._CF_enumeration.addEnumeration(unicode_value='TEXTTABLE', tag='TEXTTABLE')
COMPU_CATEGORY.COMPUCODE = COMPU_CATEGORY._CF_enumeration.addEnumeration(unicode_value='COMPUCODE', tag='COMPUCODE')
COMPU_CATEGORY.TAB_INTP = COMPU_CATEGORY._CF_enumeration.addEnumeration(unicode_value='TAB-INTP', tag='TAB_INTP')
COMPU_CATEGORY.RAT_FUNC = COMPU_CATEGORY._CF_enumeration.addEnumeration(unicode_value='RAT-FUNC', tag='RAT_FUNC')
COMPU_CATEGORY.SCALE_RAT_FUNC = COMPU_CATEGORY._CF_enumeration.addEnumeration(unicode_value='SCALE-RAT-FUNC', tag='SCALE_RAT_FUNC')
COMPU_CATEGORY._InitializeFacetMap(COMPU_CATEGORY._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'COMPU-CATEGORY', COMPU_CATEGORY)

# Atomic simple type: DATAFORMAT-SELECTION
class DATAFORMAT_SELECTION (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DATAFORMAT-SELECTION')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 661, 0)
    _Documentation = None
DATAFORMAT_SELECTION._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DATAFORMAT_SELECTION, enum_prefix=None)
DATAFORMAT_SELECTION.INTEL_HEX = DATAFORMAT_SELECTION._CF_enumeration.addEnumeration(unicode_value='INTEL-HEX', tag='INTEL_HEX')
DATAFORMAT_SELECTION.MOTOROLA_S = DATAFORMAT_SELECTION._CF_enumeration.addEnumeration(unicode_value='MOTOROLA-S', tag='MOTOROLA_S')
DATAFORMAT_SELECTION.BINARY = DATAFORMAT_SELECTION._CF_enumeration.addEnumeration(unicode_value='BINARY', tag='BINARY')
DATAFORMAT_SELECTION.USER_DEFINED = DATAFORMAT_SELECTION._CF_enumeration.addEnumeration(unicode_value='USER-DEFINED', tag='USER_DEFINED')
DATAFORMAT_SELECTION._InitializeFacetMap(DATAFORMAT_SELECTION._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'DATAFORMAT-SELECTION', DATAFORMAT_SELECTION)

# Atomic simple type: DATA-TYPE
class DATA_TYPE (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DATA-TYPE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 718, 0)
    _Documentation = None
DATA_TYPE._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DATA_TYPE, enum_prefix=None)
DATA_TYPE.A_INT32 = DATA_TYPE._CF_enumeration.addEnumeration(unicode_value='A_INT32', tag='A_INT32')
DATA_TYPE.A_UINT32 = DATA_TYPE._CF_enumeration.addEnumeration(unicode_value='A_UINT32', tag='A_UINT32')
DATA_TYPE.A_FLOAT32 = DATA_TYPE._CF_enumeration.addEnumeration(unicode_value='A_FLOAT32', tag='A_FLOAT32')
DATA_TYPE.A_FLOAT64 = DATA_TYPE._CF_enumeration.addEnumeration(unicode_value='A_FLOAT64', tag='A_FLOAT64')
DATA_TYPE.A_ASCIISTRING = DATA_TYPE._CF_enumeration.addEnumeration(unicode_value='A_ASCIISTRING', tag='A_ASCIISTRING')
DATA_TYPE.A_UTF8STRING = DATA_TYPE._CF_enumeration.addEnumeration(unicode_value='A_UTF8STRING', tag='A_UTF8STRING')
DATA_TYPE.A_UNICODE2STRING = DATA_TYPE._CF_enumeration.addEnumeration(unicode_value='A_UNICODE2STRING', tag='A_UNICODE2STRING')
DATA_TYPE.A_BYTEFIELD = DATA_TYPE._CF_enumeration.addEnumeration(unicode_value='A_BYTEFIELD', tag='A_BYTEFIELD')
DATA_TYPE._InitializeFacetMap(DATA_TYPE._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'DATA-TYPE', DATA_TYPE)

# Atomic simple type: [anonymous]
class STD_ANON_ (pyxb.binding.datatypes.unsignedInt):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 753, 0)
    _Documentation = None
STD_ANON_._CF_maxExclusive = pyxb.binding.facets.CF_maxExclusive(value_datatype=pyxb.binding.datatypes.unsignedInt, value=pyxb.binding.datatypes.unsignedLong(8))
STD_ANON_._InitializeFacetMap(STD_ANON_._CF_maxExclusive)

# Atomic simple type: DIAG-CLASS-TYPE
class DIAG_CLASS_TYPE (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DIAG-CLASS-TYPE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 762, 0)
    _Documentation = None
DIAG_CLASS_TYPE._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DIAG_CLASS_TYPE, enum_prefix=None)
DIAG_CLASS_TYPE.STARTCOMM = DIAG_CLASS_TYPE._CF_enumeration.addEnumeration(unicode_value='STARTCOMM', tag='STARTCOMM')
DIAG_CLASS_TYPE.STOPCOMM = DIAG_CLASS_TYPE._CF_enumeration.addEnumeration(unicode_value='STOPCOMM', tag='STOPCOMM')
DIAG_CLASS_TYPE.VARIANTIDENTIFICATION = DIAG_CLASS_TYPE._CF_enumeration.addEnumeration(unicode_value='VARIANTIDENTIFICATION', tag='VARIANTIDENTIFICATION')
DIAG_CLASS_TYPE.READ_DYN_DEF_MESSAGE = DIAG_CLASS_TYPE._CF_enumeration.addEnumeration(unicode_value='READ-DYN-DEF-MESSAGE', tag='READ_DYN_DEF_MESSAGE')
DIAG_CLASS_TYPE.DYN_DEF_MESSAGE = DIAG_CLASS_TYPE._CF_enumeration.addEnumeration(unicode_value='DYN-DEF-MESSAGE', tag='DYN_DEF_MESSAGE')
DIAG_CLASS_TYPE.CLEAR_DYN_DEF_MESSAGE = DIAG_CLASS_TYPE._CF_enumeration.addEnumeration(unicode_value='CLEAR-DYN-DEF-MESSAGE', tag='CLEAR_DYN_DEF_MESSAGE')
DIAG_CLASS_TYPE._InitializeFacetMap(DIAG_CLASS_TYPE._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'DIAG-CLASS-TYPE', DIAG_CLASS_TYPE)

# Atomic simple type: DIRECTION
class DIRECTION (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DIRECTION')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 938, 0)
    _Documentation = None
DIRECTION._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DIRECTION, enum_prefix=None)
DIRECTION.DOWNLOAD = DIRECTION._CF_enumeration.addEnumeration(unicode_value='DOWNLOAD', tag='DOWNLOAD')
DIRECTION.UPLOAD = DIRECTION._CF_enumeration.addEnumeration(unicode_value='UPLOAD', tag='UPLOAD')
DIRECTION._InitializeFacetMap(DIRECTION._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'DIRECTION', DIRECTION)

# Atomic simple type: DOCTYPE
class DOCTYPE (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DOCTYPE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 968, 0)
    _Documentation = None
DOCTYPE._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DOCTYPE, enum_prefix=None)
DOCTYPE.FLASH = DOCTYPE._CF_enumeration.addEnumeration(unicode_value='FLASH', tag='FLASH')
DOCTYPE.CONTAINER = DOCTYPE._CF_enumeration.addEnumeration(unicode_value='CONTAINER', tag='CONTAINER')
DOCTYPE.LAYER = DOCTYPE._CF_enumeration.addEnumeration(unicode_value='LAYER', tag='LAYER')
DOCTYPE.MULTIPLE_ECU_JOB_SPEC = DOCTYPE._CF_enumeration.addEnumeration(unicode_value='MULTIPLE-ECU-JOB-SPEC', tag='MULTIPLE_ECU_JOB_SPEC')
DOCTYPE.COMPARAM_SPEC = DOCTYPE._CF_enumeration.addEnumeration(unicode_value='COMPARAM-SPEC', tag='COMPARAM_SPEC')
DOCTYPE.VEHICLE_INFO_SPEC = DOCTYPE._CF_enumeration.addEnumeration(unicode_value='VEHICLE-INFO-SPEC', tag='VEHICLE_INFO_SPEC')
DOCTYPE.COMPARAM_SUBSET = DOCTYPE._CF_enumeration.addEnumeration(unicode_value='COMPARAM-SUBSET', tag='COMPARAM_SUBSET')
DOCTYPE.ECU_CONFIG = DOCTYPE._CF_enumeration.addEnumeration(unicode_value='ECU-CONFIG', tag='ECU_CONFIG')
DOCTYPE.FUNCTION_DICTIONARY_SPEC = DOCTYPE._CF_enumeration.addEnumeration(unicode_value='FUNCTION-DICTIONARY-SPEC', tag='FUNCTION_DICTIONARY_SPEC')
DOCTYPE._InitializeFacetMap(DOCTYPE._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'DOCTYPE', DOCTYPE)

# Atomic simple type: [anonymous]
class STD_ANON_2 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 995, 0)
    _Documentation = None
STD_ANON_2._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_2._CF_pattern.addPattern(pattern='[a-zA-Z0-9_]{1,128}')
STD_ANON_2._InitializeFacetMap(STD_ANON_2._CF_pattern)

# Atomic simple type: ENCODING
class ENCODING (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ENCODING')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1295, 0)
    _Documentation = None
ENCODING._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ENCODING, enum_prefix=None)
ENCODING.BCD_P = ENCODING._CF_enumeration.addEnumeration(unicode_value='BCD-P', tag='BCD_P')
ENCODING.BCD_UP = ENCODING._CF_enumeration.addEnumeration(unicode_value='BCD-UP', tag='BCD_UP')
ENCODING.n1C = ENCODING._CF_enumeration.addEnumeration(unicode_value='1C', tag='n1C')
ENCODING.n2C = ENCODING._CF_enumeration.addEnumeration(unicode_value='2C', tag='n2C')
ENCODING.SM = ENCODING._CF_enumeration.addEnumeration(unicode_value='SM', tag='SM')
ENCODING.UTF_8 = ENCODING._CF_enumeration.addEnumeration(unicode_value='UTF-8', tag='UTF_8')
ENCODING.UCS_2 = ENCODING._CF_enumeration.addEnumeration(unicode_value='UCS-2', tag='UCS_2')
ENCODING.ISO_8859_1 = ENCODING._CF_enumeration.addEnumeration(unicode_value='ISO-8859-1', tag='ISO_8859_1')
ENCODING.ISO_8859_2 = ENCODING._CF_enumeration.addEnumeration(unicode_value='ISO-8859-2', tag='ISO_8859_2')
ENCODING.WINDOWS_1252 = ENCODING._CF_enumeration.addEnumeration(unicode_value='WINDOWS-1252', tag='WINDOWS_1252')
ENCODING.NONE = ENCODING._CF_enumeration.addEnumeration(unicode_value='NONE', tag='NONE')
ENCODING._InitializeFacetMap(ENCODING._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ENCODING', ENCODING)

# Atomic simple type: ENCRYPT-COMPRESS-METHOD-TYPE
class ENCRYPT_COMPRESS_METHOD_TYPE (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ENCRYPT-COMPRESS-METHOD-TYPE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1318, 0)
    _Documentation = None
ENCRYPT_COMPRESS_METHOD_TYPE._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ENCRYPT_COMPRESS_METHOD_TYPE, enum_prefix=None)
ENCRYPT_COMPRESS_METHOD_TYPE.A_UINT32 = ENCRYPT_COMPRESS_METHOD_TYPE._CF_enumeration.addEnumeration(unicode_value='A_UINT32', tag='A_UINT32')
ENCRYPT_COMPRESS_METHOD_TYPE.A_BYTEFIELD = ENCRYPT_COMPRESS_METHOD_TYPE._CF_enumeration.addEnumeration(unicode_value='A_BYTEFIELD', tag='A_BYTEFIELD')
ENCRYPT_COMPRESS_METHOD_TYPE._InitializeFacetMap(ENCRYPT_COMPRESS_METHOD_TYPE._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ENCRYPT-COMPRESS-METHOD-TYPE', ENCRYPT_COMPRESS_METHOD_TYPE)

# Atomic simple type: IDENT-VALUE-TYPE
class IDENT_VALUE_TYPE (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IDENT-VALUE-TYPE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1770, 0)
    _Documentation = None
IDENT_VALUE_TYPE._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=IDENT_VALUE_TYPE, enum_prefix=None)
IDENT_VALUE_TYPE.A_UINT32 = IDENT_VALUE_TYPE._CF_enumeration.addEnumeration(unicode_value='A_UINT32', tag='A_UINT32')
IDENT_VALUE_TYPE.A_BYTEFIELD = IDENT_VALUE_TYPE._CF_enumeration.addEnumeration(unicode_value='A_BYTEFIELD', tag='A_BYTEFIELD')
IDENT_VALUE_TYPE.A_ASCIISTRING = IDENT_VALUE_TYPE._CF_enumeration.addEnumeration(unicode_value='A_ASCIISTRING', tag='A_ASCIISTRING')
IDENT_VALUE_TYPE._InitializeFacetMap(IDENT_VALUE_TYPE._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'IDENT-VALUE-TYPE', IDENT_VALUE_TYPE)

# Atomic simple type: INTERVAL-TYPE
class INTERVAL_TYPE (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'INTERVAL-TYPE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1845, 0)
    _Documentation = None
INTERVAL_TYPE._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=INTERVAL_TYPE, enum_prefix=None)
INTERVAL_TYPE.OPEN = INTERVAL_TYPE._CF_enumeration.addEnumeration(unicode_value='OPEN', tag='OPEN')
INTERVAL_TYPE.CLOSED = INTERVAL_TYPE._CF_enumeration.addEnumeration(unicode_value='CLOSED', tag='CLOSED')
INTERVAL_TYPE.INFINITE = INTERVAL_TYPE._CF_enumeration.addEnumeration(unicode_value='INFINITE', tag='INFINITE')
INTERVAL_TYPE._InitializeFacetMap(INTERVAL_TYPE._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'INTERVAL-TYPE', INTERVAL_TYPE)

# Atomic simple type: [anonymous]
class STD_ANON_3 (pyxb.binding.datatypes.unsignedInt):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1882, 0)
    _Documentation = None
STD_ANON_3._CF_minExclusive = pyxb.binding.facets.CF_minExclusive(value_datatype=pyxb.binding.datatypes.unsignedInt, value=pyxb.binding.datatypes.unsignedLong(0))
STD_ANON_3._InitializeFacetMap(STD_ANON_3._CF_minExclusive)

# Atomic simple type: [anonymous]
class STD_ANON_4 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1991, 0)
    _Documentation = None
STD_ANON_4._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(255))
STD_ANON_4._InitializeFacetMap(STD_ANON_4._CF_maxLength)

# Atomic simple type: PHYSICAL-DATA-TYPE
class PHYSICAL_DATA_TYPE (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PHYSICAL-DATA-TYPE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2441, 0)
    _Documentation = None
PHYSICAL_DATA_TYPE._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PHYSICAL_DATA_TYPE, enum_prefix=None)
PHYSICAL_DATA_TYPE.A_INT32 = PHYSICAL_DATA_TYPE._CF_enumeration.addEnumeration(unicode_value='A_INT32', tag='A_INT32')
PHYSICAL_DATA_TYPE.A_UINT32 = PHYSICAL_DATA_TYPE._CF_enumeration.addEnumeration(unicode_value='A_UINT32', tag='A_UINT32')
PHYSICAL_DATA_TYPE.A_FLOAT32 = PHYSICAL_DATA_TYPE._CF_enumeration.addEnumeration(unicode_value='A_FLOAT32', tag='A_FLOAT32')
PHYSICAL_DATA_TYPE.A_FLOAT64 = PHYSICAL_DATA_TYPE._CF_enumeration.addEnumeration(unicode_value='A_FLOAT64', tag='A_FLOAT64')
PHYSICAL_DATA_TYPE.A_UNICODE2STRING = PHYSICAL_DATA_TYPE._CF_enumeration.addEnumeration(unicode_value='A_UNICODE2STRING', tag='A_UNICODE2STRING')
PHYSICAL_DATA_TYPE.A_BYTEFIELD = PHYSICAL_DATA_TYPE._CF_enumeration.addEnumeration(unicode_value='A_BYTEFIELD', tag='A_BYTEFIELD')
PHYSICAL_DATA_TYPE._InitializeFacetMap(PHYSICAL_DATA_TYPE._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PHYSICAL-DATA-TYPE', PHYSICAL_DATA_TYPE)

# Atomic simple type: PIN-TYPE
class PIN_TYPE (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PIN-TYPE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2524, 0)
    _Documentation = None
PIN_TYPE._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PIN_TYPE, enum_prefix=None)
PIN_TYPE.HI = PIN_TYPE._CF_enumeration.addEnumeration(unicode_value='HI', tag='HI')
PIN_TYPE.LOW = PIN_TYPE._CF_enumeration.addEnumeration(unicode_value='LOW', tag='LOW')
PIN_TYPE.K = PIN_TYPE._CF_enumeration.addEnumeration(unicode_value='K', tag='K')
PIN_TYPE.L = PIN_TYPE._CF_enumeration.addEnumeration(unicode_value='L', tag='L')
PIN_TYPE.TX = PIN_TYPE._CF_enumeration.addEnumeration(unicode_value='TX', tag='TX')
PIN_TYPE.RX = PIN_TYPE._CF_enumeration.addEnumeration(unicode_value='RX', tag='RX')
PIN_TYPE.PLUS = PIN_TYPE._CF_enumeration.addEnumeration(unicode_value='PLUS', tag='PLUS')
PIN_TYPE.MINUS = PIN_TYPE._CF_enumeration.addEnumeration(unicode_value='MINUS', tag='MINUS')
PIN_TYPE.SINGLE = PIN_TYPE._CF_enumeration.addEnumeration(unicode_value='SINGLE', tag='SINGLE')
PIN_TYPE._InitializeFacetMap(PIN_TYPE._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PIN-TYPE', PIN_TYPE)

# Atomic simple type: [anonymous]
class STD_ANON_5 (pyxb.binding.datatypes.unsignedInt):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2544, 0)
    _Documentation = None
STD_ANON_5._CF_maxExclusive = pyxb.binding.facets.CF_maxExclusive(value_datatype=pyxb.binding.datatypes.unsignedInt, value=pyxb.binding.datatypes.unsignedLong(8))
STD_ANON_5._InitializeFacetMap(STD_ANON_5._CF_maxExclusive)

# Atomic simple type: RADIX
class RADIX (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RADIX')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2687, 0)
    _Documentation = None
RADIX._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=RADIX, enum_prefix=None)
RADIX.HEX = RADIX._CF_enumeration.addEnumeration(unicode_value='HEX', tag='HEX')
RADIX.DEC = RADIX._CF_enumeration.addEnumeration(unicode_value='DEC', tag='DEC')
RADIX.BIN = RADIX._CF_enumeration.addEnumeration(unicode_value='BIN', tag='BIN')
RADIX.OCT = RADIX._CF_enumeration.addEnumeration(unicode_value='OCT', tag='OCT')
RADIX._InitializeFacetMap(RADIX._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'RADIX', RADIX)

# Atomic simple type: [anonymous]
class STD_ANON_6 (pyxb.binding.datatypes.unsignedInt):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2775, 0)
    _Documentation = None
STD_ANON_6._CF_minExclusive = pyxb.binding.facets.CF_minExclusive(value_datatype=pyxb.binding.datatypes.unsignedInt, value=pyxb.binding.datatypes.unsignedLong(0))
STD_ANON_6._InitializeFacetMap(STD_ANON_6._CF_minExclusive)

# Atomic simple type: ROW-FRAGMENT
class ROW_FRAGMENT (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ROW-FRAGMENT')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2802, 0)
    _Documentation = None
ROW_FRAGMENT._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ROW_FRAGMENT, enum_prefix=None)
ROW_FRAGMENT.KEY = ROW_FRAGMENT._CF_enumeration.addEnumeration(unicode_value='KEY', tag='KEY')
ROW_FRAGMENT.STRUCT = ROW_FRAGMENT._CF_enumeration.addEnumeration(unicode_value='STRUCT', tag='STRUCT')
ROW_FRAGMENT._InitializeFacetMap(ROW_FRAGMENT._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ROW-FRAGMENT', ROW_FRAGMENT)

# Atomic simple type: SESSION-SUB-ELEM-TYPE
class SESSION_SUB_ELEM_TYPE (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SESSION-SUB-ELEM-TYPE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2957, 0)
    _Documentation = None
SESSION_SUB_ELEM_TYPE._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SESSION_SUB_ELEM_TYPE, enum_prefix=None)
SESSION_SUB_ELEM_TYPE.A_UINT32 = SESSION_SUB_ELEM_TYPE._CF_enumeration.addEnumeration(unicode_value='A_UINT32', tag='A_UINT32')
SESSION_SUB_ELEM_TYPE.A_BYTEFIELD = SESSION_SUB_ELEM_TYPE._CF_enumeration.addEnumeration(unicode_value='A_BYTEFIELD', tag='A_BYTEFIELD')
SESSION_SUB_ELEM_TYPE.A_ASCIISTRING = SESSION_SUB_ELEM_TYPE._CF_enumeration.addEnumeration(unicode_value='A_ASCIISTRING', tag='A_ASCIISTRING')
SESSION_SUB_ELEM_TYPE._InitializeFacetMap(SESSION_SUB_ELEM_TYPE._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'SESSION-SUB-ELEM-TYPE', SESSION_SUB_ELEM_TYPE)

# Atomic simple type: [anonymous]
class STD_ANON_7 (pyxb.binding.datatypes.unsignedInt):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2989, 0)
    _Documentation = None
STD_ANON_7._CF_minExclusive = pyxb.binding.facets.CF_minExclusive(value_datatype=pyxb.binding.datatypes.unsignedInt, value=pyxb.binding.datatypes.unsignedLong(0))
STD_ANON_7._InitializeFacetMap(STD_ANON_7._CF_minExclusive)

# Atomic simple type: [anonymous]
class STD_ANON_8 (pyxb.binding.datatypes.unsignedInt):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3005, 0)
    _Documentation = None
STD_ANON_8._CF_minExclusive = pyxb.binding.facets.CF_minExclusive(value_datatype=pyxb.binding.datatypes.unsignedInt, value=pyxb.binding.datatypes.unsignedLong(0))
STD_ANON_8._InitializeFacetMap(STD_ANON_8._CF_minExclusive)

# Atomic simple type: [anonymous]
class STD_ANON_9 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3017, 0)
    _Documentation = None
STD_ANON_9._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_9._CF_pattern.addPattern(pattern='[a-zA-Z0-9_]{1,128}(\\.[a-zA-Z0-9_]{1,128})*')
STD_ANON_9._InitializeFacetMap(STD_ANON_9._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_10 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3026, 0)
    _Documentation = None
STD_ANON_10._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_10._CF_pattern.addPattern(pattern='[a-zA-Z0-9_]{1,128}')
STD_ANON_10._InitializeFacetMap(STD_ANON_10._CF_pattern)

# Atomic simple type: STANDARDISATION-LEVEL
class STANDARDISATION_LEVEL (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'STANDARDISATION-LEVEL')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3049, 0)
    _Documentation = None
STANDARDISATION_LEVEL._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STANDARDISATION_LEVEL, enum_prefix=None)
STANDARDISATION_LEVEL.STANDARD = STANDARDISATION_LEVEL._CF_enumeration.addEnumeration(unicode_value='STANDARD', tag='STANDARD')
STANDARDISATION_LEVEL.OEM_SPECIFIC = STANDARDISATION_LEVEL._CF_enumeration.addEnumeration(unicode_value='OEM-SPECIFIC', tag='OEM_SPECIFIC')
STANDARDISATION_LEVEL.OPTIONAL = STANDARDISATION_LEVEL._CF_enumeration.addEnumeration(unicode_value='OPTIONAL', tag='OPTIONAL')
STANDARDISATION_LEVEL.OEM_OPTIONAL = STANDARDISATION_LEVEL._CF_enumeration.addEnumeration(unicode_value='OEM-OPTIONAL', tag='OEM_OPTIONAL')
STANDARDISATION_LEVEL._InitializeFacetMap(STANDARDISATION_LEVEL._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'STANDARDISATION-LEVEL', STANDARDISATION_LEVEL)

# Atomic simple type: [anonymous]
class STD_ANON_11 (pyxb.binding.datatypes.unsignedInt):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3063, 0)
    _Documentation = None
STD_ANON_11._CF_minExclusive = pyxb.binding.facets.CF_minExclusive(value_datatype=pyxb.binding.datatypes.unsignedInt, value=pyxb.binding.datatypes.unsignedLong(0))
STD_ANON_11._InitializeFacetMap(STD_ANON_11._CF_minExclusive)

# Atomic simple type: [anonymous]
class STD_ANON_12 (pyxb.binding.datatypes.unsignedInt):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3239, 0)
    _Documentation = None
STD_ANON_12._CF_maxExclusive = pyxb.binding.facets.CF_maxExclusive(value_datatype=pyxb.binding.datatypes.unsignedInt, value=pyxb.binding.datatypes.unsignedLong(8))
STD_ANON_12._InitializeFacetMap(STD_ANON_12._CF_maxExclusive)

# Atomic simple type: TERMINATION
class TERMINATION (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TERMINATION')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3431, 0)
    _Documentation = None
TERMINATION._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TERMINATION, enum_prefix=None)
TERMINATION.END_OF_PDU = TERMINATION._CF_enumeration.addEnumeration(unicode_value='END-OF-PDU', tag='END_OF_PDU')
TERMINATION.ZERO = TERMINATION._CF_enumeration.addEnumeration(unicode_value='ZERO', tag='ZERO')
TERMINATION.HEX_FF = TERMINATION._CF_enumeration.addEnumeration(unicode_value='HEX-FF', tag='HEX_FF')
TERMINATION._InitializeFacetMap(TERMINATION._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'TERMINATION', TERMINATION)

# Atomic simple type: TRANS-MODE
class TRANS_MODE (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TRANS-MODE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3446, 0)
    _Documentation = None
TRANS_MODE._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TRANS_MODE, enum_prefix=None)
TRANS_MODE.SEND_ONLY = TRANS_MODE._CF_enumeration.addEnumeration(unicode_value='SEND-ONLY', tag='SEND_ONLY')
TRANS_MODE.RECEIVE_ONLY = TRANS_MODE._CF_enumeration.addEnumeration(unicode_value='RECEIVE-ONLY', tag='RECEIVE_ONLY')
TRANS_MODE.SEND_AND_RECEIVE = TRANS_MODE._CF_enumeration.addEnumeration(unicode_value='SEND-AND-RECEIVE', tag='SEND_AND_RECEIVE')
TRANS_MODE.SEND_OR_RECEIVE = TRANS_MODE._CF_enumeration.addEnumeration(unicode_value='SEND-OR-RECEIVE', tag='SEND_OR_RECEIVE')
TRANS_MODE._InitializeFacetMap(TRANS_MODE._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'TRANS-MODE', TRANS_MODE)

# Atomic simple type: UNIT-GROUP-CATEGORY
class UNIT_GROUP_CATEGORY (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UNIT-GROUP-CATEGORY')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3484, 0)
    _Documentation = None
UNIT_GROUP_CATEGORY._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=UNIT_GROUP_CATEGORY, enum_prefix=None)
UNIT_GROUP_CATEGORY.COUNTRY = UNIT_GROUP_CATEGORY._CF_enumeration.addEnumeration(unicode_value='COUNTRY', tag='COUNTRY')
UNIT_GROUP_CATEGORY.EQUIV_UNITS = UNIT_GROUP_CATEGORY._CF_enumeration.addEnumeration(unicode_value='EQUIV-UNITS', tag='EQUIV_UNITS')
UNIT_GROUP_CATEGORY._InitializeFacetMap(UNIT_GROUP_CATEGORY._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'UNIT-GROUP-CATEGORY', UNIT_GROUP_CATEGORY)

# Atomic simple type: USAGE
class USAGE (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'USAGE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3518, 0)
    _Documentation = None
USAGE._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=USAGE, enum_prefix=None)
USAGE.ECU_SOFTWARE = USAGE._CF_enumeration.addEnumeration(unicode_value='ECU-SOFTWARE', tag='ECU_SOFTWARE')
USAGE.ECU_COMM = USAGE._CF_enumeration.addEnumeration(unicode_value='ECU-COMM', tag='ECU_COMM')
USAGE.APPLICATION = USAGE._CF_enumeration.addEnumeration(unicode_value='APPLICATION', tag='APPLICATION')
USAGE.TESTER = USAGE._CF_enumeration.addEnumeration(unicode_value='TESTER', tag='TESTER')
USAGE._InitializeFacetMap(USAGE._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'USAGE', USAGE)

# Atomic simple type: VALID-TYPE
class VALID_TYPE (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VALID-TYPE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3553, 0)
    _Documentation = None
VALID_TYPE._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VALID_TYPE, enum_prefix=None)
VALID_TYPE.VALID = VALID_TYPE._CF_enumeration.addEnumeration(unicode_value='VALID', tag='VALID')
VALID_TYPE.NOT_VALID = VALID_TYPE._CF_enumeration.addEnumeration(unicode_value='NOT-VALID', tag='NOT_VALID')
VALID_TYPE.NOT_DEFINED = VALID_TYPE._CF_enumeration.addEnumeration(unicode_value='NOT-DEFINED', tag='NOT_DEFINED')
VALID_TYPE.NOT_AVAILABLE = VALID_TYPE._CF_enumeration.addEnumeration(unicode_value='NOT-AVAILABLE', tag='NOT_AVAILABLE')
VALID_TYPE._InitializeFacetMap(VALID_TYPE._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'VALID-TYPE', VALID_TYPE)

# Atomic simple type: [anonymous]
class STD_ANON_13 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3742, 0)
    _Documentation = None
STD_ANON_13._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_13._CF_pattern.addPattern(pattern='[a-zA-Z0-9_]{1,128}')
STD_ANON_13._InitializeFacetMap(STD_ANON_13._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_14 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3773, 0)
    _Documentation = None
STD_ANON_14._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_14._CF_pattern.addPattern(pattern='[a-zA-Z0-9_]{1,128}')
STD_ANON_14._InitializeFacetMap(STD_ANON_14._CF_pattern)

# Complex type [anonymous] with content type MIXED
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 4, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element br uses Python identifier br
    __br = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'br'), 'br', '__CTD_ANON_br', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 14, 4), )

    
    br = property(__br.value, __br.set, None, None)

    _ElementMap.update({
        __br.name() : __br
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_ (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 15, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type MIXED
class CTD_ANON_2 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 30, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element br uses Python identifier br
    __br = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'br'), 'br', '__CTD_ANON_2_br', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 14, 4), )

    
    br = property(__br.value, __br.set, None, None)

    _ElementMap.update({
        __br.name() : __br
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type MIXED
class CTD_ANON_3 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 40, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element br uses Python identifier br
    __br = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'br'), 'br', '__CTD_ANON_3_br', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 14, 4), )

    
    br = property(__br.value, __br.set, None, None)

    
    # Element ol uses Python identifier ol
    __ol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ol'), 'ol', '__CTD_ANON_3_ol', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 47, 4), )

    
    ol = property(__ol.value, __ol.set, None, None)

    
    # Element ul uses Python identifier ul
    __ul = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ul'), 'ul', '__CTD_ANON_3_ul', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 80, 4), )

    
    ul = property(__ul.value, __ul.set, None, None)

    
    # Element p uses Python identifier p
    __p = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'p'), 'p', '__CTD_ANON_3_p', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 93, 4), )

    
    p = property(__p.value, __p.set, None, None)

    _ElementMap.update({
        __br.name() : __br,
        __ol.name() : __ol,
        __ul.name() : __ul,
        __p.name() : __p
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_4 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 48, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element li uses Python identifier li
    __li = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'li'), 'li', '__CTD_ANON_4_li', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 39, 4), )

    
    li = property(__li.value, __li.set, None, None)

    _ElementMap.update({
        __li.name() : __li
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type MIXED
class CTD_ANON_5 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 66, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element br uses Python identifier br
    __br = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'br'), 'br', '__CTD_ANON_5_br', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 14, 4), )

    
    br = property(__br.value, __br.set, None, None)

    _ElementMap.update({
        __br.name() : __br
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type MIXED
class CTD_ANON_6 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 71, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element br uses Python identifier br
    __br = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'br'), 'br', '__CTD_ANON_6_br', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 14, 4), )

    
    br = property(__br.value, __br.set, None, None)

    _ElementMap.update({
        __br.name() : __br
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type MIXED
class CTD_ANON_7 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 76, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element br uses Python identifier br
    __br = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'br'), 'br', '__CTD_ANON_7_br', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 14, 4), )

    
    br = property(__br.value, __br.set, None, None)

    _ElementMap.update({
        __br.name() : __br
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_8 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 81, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element li uses Python identifier li
    __li = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'li'), 'li', '__CTD_ANON_8_li', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 39, 4), )

    
    li = property(__li.value, __li.set, None, None)

    _ElementMap.update({
        __li.name() : __li
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type MIXED
class CTD_ANON_9 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 94, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element br uses Python identifier br
    __br = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'br'), 'br', '__CTD_ANON_9_br', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 14, 4), )

    
    br = property(__br.value, __br.set, None, None)

    _ElementMap.update({
        __br.name() : __br
    })
    _AttributeMap.update({
        
    })



# Complex type ADDITIONAL-AUDIENCE with content type ELEMENT_ONLY
class ADDITIONAL_AUDIENCE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ADDITIONAL-AUDIENCE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ADDITIONAL-AUDIENCE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 6, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__ADDITIONAL_AUDIENCE_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__ADDITIONAL_AUDIENCE_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__ADDITIONAL_AUDIENCE_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__ADDITIONAL_AUDIENCE_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 11, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 11, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__ADDITIONAL_AUDIENCE_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 12, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 12, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'ADDITIONAL-AUDIENCE', ADDITIONAL_AUDIENCE)


# Complex type ADDITIONAL-AUDIENCES with content type ELEMENT_ONLY
class ADDITIONAL_AUDIENCES (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ADDITIONAL-AUDIENCES with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ADDITIONAL-AUDIENCES')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 14, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ADDITIONAL-AUDIENCE uses Python identifier ADDITIONAL_AUDIENCE
    __ADDITIONAL_AUDIENCE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ADDITIONAL-AUDIENCE'), 'ADDITIONAL_AUDIENCE', '__ADDITIONAL_AUDIENCES_ADDITIONAL_AUDIENCE', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 17, 0), )

    
    ADDITIONAL_AUDIENCE = property(__ADDITIONAL_AUDIENCE.value, __ADDITIONAL_AUDIENCE.set, None, None)

    _ElementMap.update({
        __ADDITIONAL_AUDIENCE.name() : __ADDITIONAL_AUDIENCE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ADDITIONAL-AUDIENCES', ADDITIONAL_AUDIENCES)


# Complex type ADMIN-DATA with content type ELEMENT_ONLY
class ADMIN_DATA (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ADMIN-DATA with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ADMIN-DATA')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 47, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element LANGUAGE uses Python identifier LANGUAGE
    __LANGUAGE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LANGUAGE'), 'LANGUAGE', '__ADMIN_DATA_LANGUAGE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 50, 0), )

    
    LANGUAGE = property(__LANGUAGE.value, __LANGUAGE.set, None, None)

    
    # Element COMPANY-DOC-INFOS uses Python identifier COMPANY_DOC_INFOS
    __COMPANY_DOC_INFOS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPANY-DOC-INFOS'), 'COMPANY_DOC_INFOS', '__ADMIN_DATA_COMPANY_DOC_INFOS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 57, 0), )

    
    COMPANY_DOC_INFOS = property(__COMPANY_DOC_INFOS.value, __COMPANY_DOC_INFOS.set, None, None)

    
    # Element DOC-REVISIONS uses Python identifier DOC_REVISIONS
    __DOC_REVISIONS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DOC-REVISIONS'), 'DOC_REVISIONS', '__ADMIN_DATA_DOC_REVISIONS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 58, 0), )

    
    DOC_REVISIONS = property(__DOC_REVISIONS.value, __DOC_REVISIONS.set, None, None)

    _ElementMap.update({
        __LANGUAGE.name() : __LANGUAGE,
        __COMPANY_DOC_INFOS.name() : __COMPANY_DOC_INFOS,
        __DOC_REVISIONS.name() : __DOC_REVISIONS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ADMIN-DATA', ADMIN_DATA)


# Complex type ALL-VALUE with content type EMPTY
class ALL_VALUE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ALL-VALUE with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ALL-VALUE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 61, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ALL-VALUE', ALL_VALUE)


# Complex type ALL-VARIANT-REFS with content type ELEMENT_ONLY
class ALL_VARIANT_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ALL-VARIANT-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ALL-VARIANT-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 64, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ALL-VARIANT-REF uses Python identifier ALL_VARIANT_REF
    __ALL_VARIANT_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ALL-VARIANT-REF'), 'ALL_VARIANT_REF', '__ALL_VARIANT_REFS_ALL_VARIANT_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 67, 0), )

    
    ALL_VARIANT_REF = property(__ALL_VARIANT_REF.value, __ALL_VARIANT_REF.set, None, None)

    _ElementMap.update({
        __ALL_VARIANT_REF.name() : __ALL_VARIANT_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ALL-VARIANT-REFS', ALL_VARIANT_REFS)


# Complex type AUDIENCE with content type ELEMENT_ONLY
class AUDIENCE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type AUDIENCE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AUDIENCE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 70, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DISABLED-AUDIENCE-REFS uses Python identifier DISABLED_AUDIENCE_REFS
    __DISABLED_AUDIENCE_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DISABLED-AUDIENCE-REFS'), 'DISABLED_AUDIENCE_REFS', '__AUDIENCE_DISABLED_AUDIENCE_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 74, 0), )

    
    DISABLED_AUDIENCE_REFS = property(__DISABLED_AUDIENCE_REFS.value, __DISABLED_AUDIENCE_REFS.set, None, None)

    
    # Attribute IS-SUPPLIER uses Python identifier IS_SUPPLIER
    __IS_SUPPLIER = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IS-SUPPLIER'), 'IS_SUPPLIER', '__AUDIENCE_IS_SUPPLIER', pyxb.binding.datatypes.boolean, unicode_default='true')
    __IS_SUPPLIER._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 76, 0)
    __IS_SUPPLIER._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 76, 0)
    
    IS_SUPPLIER = property(__IS_SUPPLIER.value, __IS_SUPPLIER.set, None, None)

    
    # Attribute IS-DEVELOPMENT uses Python identifier IS_DEVELOPMENT
    __IS_DEVELOPMENT = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IS-DEVELOPMENT'), 'IS_DEVELOPMENT', '__AUDIENCE_IS_DEVELOPMENT', pyxb.binding.datatypes.boolean, unicode_default='true')
    __IS_DEVELOPMENT._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 77, 0)
    __IS_DEVELOPMENT._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 77, 0)
    
    IS_DEVELOPMENT = property(__IS_DEVELOPMENT.value, __IS_DEVELOPMENT.set, None, None)

    
    # Attribute IS-MANUFACTURING uses Python identifier IS_MANUFACTURING
    __IS_MANUFACTURING = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IS-MANUFACTURING'), 'IS_MANUFACTURING', '__AUDIENCE_IS_MANUFACTURING', pyxb.binding.datatypes.boolean, unicode_default='true')
    __IS_MANUFACTURING._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 78, 0)
    __IS_MANUFACTURING._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 78, 0)
    
    IS_MANUFACTURING = property(__IS_MANUFACTURING.value, __IS_MANUFACTURING.set, None, None)

    
    # Attribute IS-AFTERSALES uses Python identifier IS_AFTERSALES
    __IS_AFTERSALES = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IS-AFTERSALES'), 'IS_AFTERSALES', '__AUDIENCE_IS_AFTERSALES', pyxb.binding.datatypes.boolean, unicode_default='true')
    __IS_AFTERSALES._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 79, 0)
    __IS_AFTERSALES._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 79, 0)
    
    IS_AFTERSALES = property(__IS_AFTERSALES.value, __IS_AFTERSALES.set, None, None)

    
    # Attribute IS-AFTERMARKET uses Python identifier IS_AFTERMARKET
    __IS_AFTERMARKET = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IS-AFTERMARKET'), 'IS_AFTERMARKET', '__AUDIENCE_IS_AFTERMARKET', pyxb.binding.datatypes.boolean, unicode_default='true')
    __IS_AFTERMARKET._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 80, 0)
    __IS_AFTERMARKET._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 80, 0)
    
    IS_AFTERMARKET = property(__IS_AFTERMARKET.value, __IS_AFTERMARKET.set, None, None)

    _ElementMap.update({
        __DISABLED_AUDIENCE_REFS.name() : __DISABLED_AUDIENCE_REFS
    })
    _AttributeMap.update({
        __IS_SUPPLIER.name() : __IS_SUPPLIER,
        __IS_DEVELOPMENT.name() : __IS_DEVELOPMENT,
        __IS_MANUFACTURING.name() : __IS_MANUFACTURING,
        __IS_AFTERSALES.name() : __IS_AFTERSALES,
        __IS_AFTERMARKET.name() : __IS_AFTERMARKET
    })
Namespace.addCategoryObject('typeBinding', 'AUDIENCE', AUDIENCE)


# Complex type BASE-FUNCTION-NODE with content type ELEMENT_ONLY
class BASE_FUNCTION_NODE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type BASE-FUNCTION-NODE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BASE-FUNCTION-NODE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 94, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element AUDIENCE uses Python identifier AUDIENCE
    __AUDIENCE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AUDIENCE'), 'AUDIENCE', '__BASE_FUNCTION_NODE_AUDIENCE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 98, 0), )

    
    AUDIENCE = property(__AUDIENCE.value, __AUDIENCE.set, None, None)

    
    # Element FUNCTION-IN-PARAMS uses Python identifier FUNCTION_IN_PARAMS
    __FUNCTION_IN_PARAMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FUNCTION-IN-PARAMS'), 'FUNCTION_IN_PARAMS', '__BASE_FUNCTION_NODE_FUNCTION_IN_PARAMS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 99, 0), )

    
    FUNCTION_IN_PARAMS = property(__FUNCTION_IN_PARAMS.value, __FUNCTION_IN_PARAMS.set, None, None)

    
    # Element FUNCTION-OUT-PARAMS uses Python identifier FUNCTION_OUT_PARAMS
    __FUNCTION_OUT_PARAMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FUNCTION-OUT-PARAMS'), 'FUNCTION_OUT_PARAMS', '__BASE_FUNCTION_NODE_FUNCTION_OUT_PARAMS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 100, 0), )

    
    FUNCTION_OUT_PARAMS = property(__FUNCTION_OUT_PARAMS.value, __FUNCTION_OUT_PARAMS.set, None, None)

    
    # Element COMPONENT-CONNECTORS uses Python identifier COMPONENT_CONNECTORS
    __COMPONENT_CONNECTORS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPONENT-CONNECTORS'), 'COMPONENT_CONNECTORS', '__BASE_FUNCTION_NODE_COMPONENT_CONNECTORS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 101, 0), )

    
    COMPONENT_CONNECTORS = property(__COMPONENT_CONNECTORS.value, __COMPONENT_CONNECTORS.set, None, None)

    
    # Element MULTIPLE-ECU-JOB-REFS uses Python identifier MULTIPLE_ECU_JOB_REFS
    __MULTIPLE_ECU_JOB_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MULTIPLE-ECU-JOB-REFS'), 'MULTIPLE_ECU_JOB_REFS', '__BASE_FUNCTION_NODE_MULTIPLE_ECU_JOB_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 102, 0), )

    
    MULTIPLE_ECU_JOB_REFS = property(__MULTIPLE_ECU_JOB_REFS.value, __MULTIPLE_ECU_JOB_REFS.set, None, None)

    
    # Element ADMIN-DATA uses Python identifier ADMIN_DATA
    __ADMIN_DATA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), 'ADMIN_DATA', '__BASE_FUNCTION_NODE_ADMIN_DATA', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 103, 0), )

    
    ADMIN_DATA = property(__ADMIN_DATA.value, __ADMIN_DATA.set, None, None)

    
    # Element SDG uses Python identifier SDG
    __SDG = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDG'), 'SDG', '__BASE_FUNCTION_NODE_SDG', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 104, 0), )

    
    SDG = property(__SDG.value, __SDG.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__BASE_FUNCTION_NODE_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__BASE_FUNCTION_NODE_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__BASE_FUNCTION_NODE_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__BASE_FUNCTION_NODE_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 106, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 106, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__BASE_FUNCTION_NODE_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 107, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 107, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __AUDIENCE.name() : __AUDIENCE,
        __FUNCTION_IN_PARAMS.name() : __FUNCTION_IN_PARAMS,
        __FUNCTION_OUT_PARAMS.name() : __FUNCTION_OUT_PARAMS,
        __COMPONENT_CONNECTORS.name() : __COMPONENT_CONNECTORS,
        __MULTIPLE_ECU_JOB_REFS.name() : __MULTIPLE_ECU_JOB_REFS,
        __ADMIN_DATA.name() : __ADMIN_DATA,
        __SDG.name() : __SDG,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'BASE-FUNCTION-NODE', BASE_FUNCTION_NODE)


# Complex type BASE-VALUE with content type EMPTY
class BASE_VALUE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type BASE-VALUE with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BASE-VALUE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 109, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'BASE-VALUE', BASE_VALUE)


# Complex type BASE-VARIANT-PATTERN with content type ELEMENT_ONLY
class BASE_VARIANT_PATTERN (pyxb.binding.basis.complexTypeDefinition):
    """Complex type BASE-VARIANT-PATTERN with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BASE-VARIANT-PATTERN')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 126, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element MATCHING-BASE-VARIANT-PARAMETERS uses Python identifier MATCHING_BASE_VARIANT_PARAMETERS
    __MATCHING_BASE_VARIANT_PARAMETERS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MATCHING-BASE-VARIANT-PARAMETERS'), 'MATCHING_BASE_VARIANT_PARAMETERS', '__BASE_VARIANT_PATTERN_MATCHING_BASE_VARIANT_PARAMETERS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 129, 0), )

    
    MATCHING_BASE_VARIANT_PARAMETERS = property(__MATCHING_BASE_VARIANT_PARAMETERS.value, __MATCHING_BASE_VARIANT_PARAMETERS.set, None, None)

    _ElementMap.update({
        __MATCHING_BASE_VARIANT_PARAMETERS.name() : __MATCHING_BASE_VARIANT_PARAMETERS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'BASE-VARIANT-PATTERN', BASE_VARIANT_PATTERN)


# Complex type BASE-VARIANTS with content type ELEMENT_ONLY
class BASE_VARIANTS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type BASE-VARIANTS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BASE-VARIANTS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 139, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element BASE-VARIANT uses Python identifier BASE_VARIANT
    __BASE_VARIANT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BASE-VARIANT'), 'BASE_VARIANT', '__BASE_VARIANTS_BASE_VARIANT', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 142, 0), )

    
    BASE_VARIANT = property(__BASE_VARIANT.value, __BASE_VARIANT.set, None, None)

    _ElementMap.update({
        __BASE_VARIANT.name() : __BASE_VARIANT
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'BASE-VARIANTS', BASE_VARIANTS)


# Complex type CASE with content type ELEMENT_ONLY
class CASE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type CASE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CASE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 156, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element STRUCTURE-REF uses Python identifier STRUCTURE_REF
    __STRUCTURE_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'STRUCTURE-REF'), 'STRUCTURE_REF', '__CASE_STRUCTURE_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 161, 0), )

    
    STRUCTURE_REF = property(__STRUCTURE_REF.value, __STRUCTURE_REF.set, None, None)

    
    # Element STRUCTURE-SNREF uses Python identifier STRUCTURE_SNREF
    __STRUCTURE_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'STRUCTURE-SNREF'), 'STRUCTURE_SNREF', '__CASE_STRUCTURE_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 162, 0), )

    
    STRUCTURE_SNREF = property(__STRUCTURE_SNREF.value, __STRUCTURE_SNREF.set, None, None)

    
    # Element LOWER-LIMIT uses Python identifier LOWER_LIMIT
    __LOWER_LIMIT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LOWER-LIMIT'), 'LOWER_LIMIT', '__CASE_LOWER_LIMIT', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 164, 0), )

    
    LOWER_LIMIT = property(__LOWER_LIMIT.value, __LOWER_LIMIT.set, None, None)

    
    # Element UPPER-LIMIT uses Python identifier UPPER_LIMIT
    __UPPER_LIMIT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UPPER-LIMIT'), 'UPPER_LIMIT', '__CASE_UPPER_LIMIT', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 165, 0), )

    
    UPPER_LIMIT = property(__UPPER_LIMIT.value, __UPPER_LIMIT.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__CASE_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__CASE_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__CASE_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    _ElementMap.update({
        __STRUCTURE_REF.name() : __STRUCTURE_REF,
        __STRUCTURE_SNREF.name() : __STRUCTURE_SNREF,
        __LOWER_LIMIT.name() : __LOWER_LIMIT,
        __UPPER_LIMIT.name() : __UPPER_LIMIT,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CASE', CASE)


# Complex type CASES with content type ELEMENT_ONLY
class CASES (pyxb.binding.basis.complexTypeDefinition):
    """Complex type CASES with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CASES')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 168, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CASE uses Python identifier CASE
    __CASE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CASE'), 'CASE', '__CASES_CASE', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 171, 0), )

    
    CASE = property(__CASE.value, __CASE.set, None, None)

    _ElementMap.update({
        __CASE.name() : __CASE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CASES', CASES)


# Complex type CHECKSUM with content type ELEMENT_ONLY
class CHECKSUM (pyxb.binding.basis.complexTypeDefinition):
    """Complex type CHECKSUM with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CHECKSUM')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 174, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element FILLBYTE uses Python identifier FILLBYTE
    __FILLBYTE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FILLBYTE'), 'FILLBYTE', '__CHECKSUM_FILLBYTE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 178, 0), )

    
    FILLBYTE = property(__FILLBYTE.value, __FILLBYTE.set, None, None)

    
    # Element SOURCE-START-ADDRESS uses Python identifier SOURCE_START_ADDRESS
    __SOURCE_START_ADDRESS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SOURCE-START-ADDRESS'), 'SOURCE_START_ADDRESS', '__CHECKSUM_SOURCE_START_ADDRESS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 179, 0), )

    
    SOURCE_START_ADDRESS = property(__SOURCE_START_ADDRESS.value, __SOURCE_START_ADDRESS.set, None, None)

    
    # Element COMPRESSED-SIZE uses Python identifier COMPRESSED_SIZE
    __COMPRESSED_SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPRESSED-SIZE'), 'COMPRESSED_SIZE', '__CHECKSUM_COMPRESSED_SIZE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 180, 0), )

    
    COMPRESSED_SIZE = property(__COMPRESSED_SIZE.value, __COMPRESSED_SIZE.set, None, None)

    
    # Element CHECKSUM-ALG uses Python identifier CHECKSUM_ALG
    __CHECKSUM_ALG = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CHECKSUM-ALG'), 'CHECKSUM_ALG', '__CHECKSUM_CHECKSUM_ALG', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 181, 0), )

    
    CHECKSUM_ALG = property(__CHECKSUM_ALG.value, __CHECKSUM_ALG.set, None, None)

    
    # Element SOURCE-END-ADDRESS uses Python identifier SOURCE_END_ADDRESS
    __SOURCE_END_ADDRESS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SOURCE-END-ADDRESS'), 'SOURCE_END_ADDRESS', '__CHECKSUM_SOURCE_END_ADDRESS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 183, 0), )

    
    SOURCE_END_ADDRESS = property(__SOURCE_END_ADDRESS.value, __SOURCE_END_ADDRESS.set, None, None)

    
    # Element UNCOMPRESSED-SIZE uses Python identifier UNCOMPRESSED_SIZE
    __UNCOMPRESSED_SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UNCOMPRESSED-SIZE'), 'UNCOMPRESSED_SIZE', '__CHECKSUM_UNCOMPRESSED_SIZE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 184, 0), )

    
    UNCOMPRESSED_SIZE = property(__UNCOMPRESSED_SIZE.value, __UNCOMPRESSED_SIZE.set, None, None)

    
    # Element CHECKSUM-RESULT uses Python identifier CHECKSUM_RESULT
    __CHECKSUM_RESULT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CHECKSUM-RESULT'), 'CHECKSUM_RESULT', '__CHECKSUM_CHECKSUM_RESULT', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 186, 0), )

    
    CHECKSUM_RESULT = property(__CHECKSUM_RESULT.value, __CHECKSUM_RESULT.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__CHECKSUM_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__CHECKSUM_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__CHECKSUM_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__CHECKSUM_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 188, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 188, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__CHECKSUM_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 189, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 189, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __FILLBYTE.name() : __FILLBYTE,
        __SOURCE_START_ADDRESS.name() : __SOURCE_START_ADDRESS,
        __COMPRESSED_SIZE.name() : __COMPRESSED_SIZE,
        __CHECKSUM_ALG.name() : __CHECKSUM_ALG,
        __SOURCE_END_ADDRESS.name() : __SOURCE_END_ADDRESS,
        __UNCOMPRESSED_SIZE.name() : __UNCOMPRESSED_SIZE,
        __CHECKSUM_RESULT.name() : __CHECKSUM_RESULT,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'CHECKSUM', CHECKSUM)


# Complex type CHECKSUMS with content type ELEMENT_ONLY
class CHECKSUMS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type CHECKSUMS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CHECKSUMS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 199, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CHECKSUM uses Python identifier CHECKSUM
    __CHECKSUM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CHECKSUM'), 'CHECKSUM', '__CHECKSUMS_CHECKSUM', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 202, 0), )

    
    CHECKSUM = property(__CHECKSUM.value, __CHECKSUM.set, None, None)

    _ElementMap.update({
        __CHECKSUM.name() : __CHECKSUM
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CHECKSUMS', CHECKSUMS)


# Complex type CODED-VALUES with content type ELEMENT_ONLY
class CODED_VALUES (pyxb.binding.basis.complexTypeDefinition):
    """Complex type CODED-VALUES with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CODED-VALUES')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 216, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CODED-VALUE uses Python identifier CODED_VALUE
    __CODED_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CODED-VALUE'), 'CODED_VALUE', '__CODED_VALUES_CODED_VALUE', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 219, 0), )

    
    CODED_VALUE = property(__CODED_VALUE.value, __CODED_VALUE.set, None, None)

    _ElementMap.update({
        __CODED_VALUE.name() : __CODED_VALUE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CODED-VALUES', CODED_VALUES)


# Complex type COMM-RELATIONS with content type ELEMENT_ONLY
class COMM_RELATIONS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMM-RELATIONS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMM-RELATIONS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 244, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element COMM-RELATION uses Python identifier COMM_RELATION
    __COMM_RELATION = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMM-RELATION'), 'COMM_RELATION', '__COMM_RELATIONS_COMM_RELATION', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 247, 0), )

    
    COMM_RELATION = property(__COMM_RELATION.value, __COMM_RELATION.set, None, None)

    _ElementMap.update({
        __COMM_RELATION.name() : __COMM_RELATION
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMM-RELATIONS', COMM_RELATIONS)


# Complex type COMPANY-DATA with content type ELEMENT_ONLY
class COMPANY_DATA (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMPANY-DATA with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPANY-DATA')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 258, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ROLES uses Python identifier ROLES
    __ROLES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ROLES'), 'ROLES', '__COMPANY_DATA_ROLES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 262, 0), )

    
    ROLES = property(__ROLES.value, __ROLES.set, None, None)

    
    # Element TEAM-MEMBERS uses Python identifier TEAM_MEMBERS
    __TEAM_MEMBERS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TEAM-MEMBERS'), 'TEAM_MEMBERS', '__COMPANY_DATA_TEAM_MEMBERS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 263, 0), )

    
    TEAM_MEMBERS = property(__TEAM_MEMBERS.value, __TEAM_MEMBERS.set, None, None)

    
    # Element COMPANY-SPECIFIC-INFO uses Python identifier COMPANY_SPECIFIC_INFO
    __COMPANY_SPECIFIC_INFO = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPANY-SPECIFIC-INFO'), 'COMPANY_SPECIFIC_INFO', '__COMPANY_DATA_COMPANY_SPECIFIC_INFO', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 264, 0), )

    
    COMPANY_SPECIFIC_INFO = property(__COMPANY_SPECIFIC_INFO.value, __COMPANY_SPECIFIC_INFO.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__COMPANY_DATA_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__COMPANY_DATA_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__COMPANY_DATA_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__COMPANY_DATA_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 266, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 266, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__COMPANY_DATA_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 267, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 267, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __ROLES.name() : __ROLES,
        __TEAM_MEMBERS.name() : __TEAM_MEMBERS,
        __COMPANY_SPECIFIC_INFO.name() : __COMPANY_SPECIFIC_INFO,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'COMPANY-DATA', COMPANY_DATA)


# Complex type COMPANY-DATAS with content type ELEMENT_ONLY
class COMPANY_DATAS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMPANY-DATAS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPANY-DATAS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 269, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element COMPANY-DATA uses Python identifier COMPANY_DATA
    __COMPANY_DATA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPANY-DATA'), 'COMPANY_DATA', '__COMPANY_DATAS_COMPANY_DATA', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 272, 0), )

    
    COMPANY_DATA = property(__COMPANY_DATA.value, __COMPANY_DATA.set, None, None)

    _ElementMap.update({
        __COMPANY_DATA.name() : __COMPANY_DATA
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPANY-DATAS', COMPANY_DATAS)


# Complex type COMPANY-DOC-INFO with content type ELEMENT_ONLY
class COMPANY_DOC_INFO (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMPANY-DOC-INFO with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPANY-DOC-INFO')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 275, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element COMPANY-DATA-REF uses Python identifier COMPANY_DATA_REF
    __COMPANY_DATA_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPANY-DATA-REF'), 'COMPANY_DATA_REF', '__COMPANY_DOC_INFO_COMPANY_DATA_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 278, 0), )

    
    COMPANY_DATA_REF = property(__COMPANY_DATA_REF.value, __COMPANY_DATA_REF.set, None, None)

    
    # Element TEAM-MEMBER-REF uses Python identifier TEAM_MEMBER_REF
    __TEAM_MEMBER_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TEAM-MEMBER-REF'), 'TEAM_MEMBER_REF', '__COMPANY_DOC_INFO_TEAM_MEMBER_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 279, 0), )

    
    TEAM_MEMBER_REF = property(__TEAM_MEMBER_REF.value, __TEAM_MEMBER_REF.set, None, None)

    
    # Element DOC-LABEL uses Python identifier DOC_LABEL
    __DOC_LABEL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DOC-LABEL'), 'DOC_LABEL', '__COMPANY_DOC_INFO_DOC_LABEL', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 280, 0), )

    
    DOC_LABEL = property(__DOC_LABEL.value, __DOC_LABEL.set, None, None)

    
    # Element SDGS uses Python identifier SDGS
    __SDGS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDGS'), 'SDGS', '__COMPANY_DOC_INFO_SDGS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 281, 0), )

    
    SDGS = property(__SDGS.value, __SDGS.set, None, None)

    _ElementMap.update({
        __COMPANY_DATA_REF.name() : __COMPANY_DATA_REF,
        __TEAM_MEMBER_REF.name() : __TEAM_MEMBER_REF,
        __DOC_LABEL.name() : __DOC_LABEL,
        __SDGS.name() : __SDGS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPANY-DOC-INFO', COMPANY_DOC_INFO)


# Complex type COMPANY-DOC-INFOS with content type ELEMENT_ONLY
class COMPANY_DOC_INFOS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMPANY-DOC-INFOS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPANY-DOC-INFOS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 284, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element COMPANY-DOC-INFO uses Python identifier COMPANY_DOC_INFO
    __COMPANY_DOC_INFO = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPANY-DOC-INFO'), 'COMPANY_DOC_INFO', '__COMPANY_DOC_INFOS_COMPANY_DOC_INFO', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 287, 0), )

    
    COMPANY_DOC_INFO = property(__COMPANY_DOC_INFO.value, __COMPANY_DOC_INFO.set, None, None)

    _ElementMap.update({
        __COMPANY_DOC_INFO.name() : __COMPANY_DOC_INFO
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPANY-DOC-INFOS', COMPANY_DOC_INFOS)


# Complex type COMPANY-REVISION-INFO with content type ELEMENT_ONLY
class COMPANY_REVISION_INFO (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMPANY-REVISION-INFO with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPANY-REVISION-INFO')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 290, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element COMPANY-DATA-REF uses Python identifier COMPANY_DATA_REF
    __COMPANY_DATA_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPANY-DATA-REF'), 'COMPANY_DATA_REF', '__COMPANY_REVISION_INFO_COMPANY_DATA_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 293, 0), )

    
    COMPANY_DATA_REF = property(__COMPANY_DATA_REF.value, __COMPANY_DATA_REF.set, None, None)

    
    # Element REVISION-LABEL uses Python identifier REVISION_LABEL
    __REVISION_LABEL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'REVISION-LABEL'), 'REVISION_LABEL', '__COMPANY_REVISION_INFO_REVISION_LABEL', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 294, 0), )

    
    REVISION_LABEL = property(__REVISION_LABEL.value, __REVISION_LABEL.set, None, None)

    
    # Element STATE uses Python identifier STATE
    __STATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'STATE'), 'STATE', '__COMPANY_REVISION_INFO_STATE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 295, 0), )

    
    STATE = property(__STATE.value, __STATE.set, None, None)

    _ElementMap.update({
        __COMPANY_DATA_REF.name() : __COMPANY_DATA_REF,
        __REVISION_LABEL.name() : __REVISION_LABEL,
        __STATE.name() : __STATE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPANY-REVISION-INFO', COMPANY_REVISION_INFO)


# Complex type COMPANY-REVISION-INFOS with content type ELEMENT_ONLY
class COMPANY_REVISION_INFOS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMPANY-REVISION-INFOS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPANY-REVISION-INFOS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 298, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element COMPANY-REVISIONINFO uses Python identifier COMPANY_REVISIONINFO
    __COMPANY_REVISIONINFO = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPANY-REVISIONINFO'), 'COMPANY_REVISIONINFO', '__COMPANY_REVISION_INFOS_COMPANY_REVISIONINFO', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 301, 0), )

    
    COMPANY_REVISIONINFO = property(__COMPANY_REVISIONINFO.value, __COMPANY_REVISIONINFO.set, None, None)

    _ElementMap.update({
        __COMPANY_REVISIONINFO.name() : __COMPANY_REVISIONINFO
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPANY-REVISION-INFOS', COMPANY_REVISION_INFOS)


# Complex type COMPANY-SPECIFIC-INFO with content type ELEMENT_ONLY
class COMPANY_SPECIFIC_INFO (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMPANY-SPECIFIC-INFO with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPANY-SPECIFIC-INFO')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 304, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element RELATED-DOCS uses Python identifier RELATED_DOCS
    __RELATED_DOCS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RELATED-DOCS'), 'RELATED_DOCS', '__COMPANY_SPECIFIC_INFO_RELATED_DOCS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 307, 0), )

    
    RELATED_DOCS = property(__RELATED_DOCS.value, __RELATED_DOCS.set, None, None)

    
    # Element SDGS uses Python identifier SDGS
    __SDGS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDGS'), 'SDGS', '__COMPANY_SPECIFIC_INFO_SDGS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 308, 0), )

    
    SDGS = property(__SDGS.value, __SDGS.set, None, None)

    _ElementMap.update({
        __RELATED_DOCS.name() : __RELATED_DOCS,
        __SDGS.name() : __SDGS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPANY-SPECIFIC-INFO', COMPANY_SPECIFIC_INFO)


# Complex type COMPARAM-REFS with content type ELEMENT_ONLY
class COMPARAM_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMPARAM-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPARAM-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 335, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element COMPARAM-REF uses Python identifier COMPARAM_REF
    __COMPARAM_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPARAM-REF'), 'COMPARAM_REF', '__COMPARAM_REFS_COMPARAM_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 338, 0), )

    
    COMPARAM_REF = property(__COMPARAM_REF.value, __COMPARAM_REF.set, None, None)

    _ElementMap.update({
        __COMPARAM_REF.name() : __COMPARAM_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPARAM-REFS', COMPARAM_REFS)


# Complex type COMPARAMS with content type ELEMENT_ONLY
class COMPARAMS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMPARAMS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPARAMS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 341, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element COMPARAM uses Python identifier COMPARAM
    __COMPARAM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPARAM'), 'COMPARAM', '__COMPARAMS_COMPARAM', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 344, 0), )

    
    COMPARAM = property(__COMPARAM.value, __COMPARAM.set, None, None)

    _ElementMap.update({
        __COMPARAM.name() : __COMPARAM
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPARAMS', COMPARAMS)


# Complex type COMPARAM-SUBSET-REFS with content type ELEMENT_ONLY
class COMPARAM_SUBSET_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMPARAM-SUBSET-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPARAM-SUBSET-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 371, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element COMPARAM-SUBSET-REF uses Python identifier COMPARAM_SUBSET_REF
    __COMPARAM_SUBSET_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPARAM-SUBSET-REF'), 'COMPARAM_SUBSET_REF', '__COMPARAM_SUBSET_REFS_COMPARAM_SUBSET_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 374, 0), )

    
    COMPARAM_SUBSET_REF = property(__COMPARAM_SUBSET_REF.value, __COMPARAM_SUBSET_REF.set, None, None)

    _ElementMap.update({
        __COMPARAM_SUBSET_REF.name() : __COMPARAM_SUBSET_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPARAM-SUBSET-REFS', COMPARAM_SUBSET_REFS)


# Complex type COMPLEX-COMPARAMS with content type ELEMENT_ONLY
class COMPLEX_COMPARAMS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMPLEX-COMPARAMS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPLEX-COMPARAMS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 392, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element COMPLEX-COMPARAM uses Python identifier COMPLEX_COMPARAM
    __COMPLEX_COMPARAM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPLEX-COMPARAM'), 'COMPLEX_COMPARAM', '__COMPLEX_COMPARAMS_COMPLEX_COMPARAM', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 395, 0), )

    
    COMPLEX_COMPARAM = property(__COMPLEX_COMPARAM.value, __COMPLEX_COMPARAM.set, None, None)

    _ElementMap.update({
        __COMPLEX_COMPARAM.name() : __COMPLEX_COMPARAM
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPLEX-COMPARAMS', COMPLEX_COMPARAMS)


# Complex type COMPLEX-PHYSICAL-DEFAULT-VALUE with content type ELEMENT_ONLY
class COMPLEX_PHYSICAL_DEFAULT_VALUE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMPLEX-PHYSICAL-DEFAULT-VALUE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPLEX-PHYSICAL-DEFAULT-VALUE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 404, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element COMPLEX-VALUES uses Python identifier COMPLEX_VALUES
    __COMPLEX_VALUES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPLEX-VALUES'), 'COMPLEX_VALUES', '__COMPLEX_PHYSICAL_DEFAULT_VALUE_COMPLEX_VALUES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 407, 0), )

    
    COMPLEX_VALUES = property(__COMPLEX_VALUES.value, __COMPLEX_VALUES.set, None, None)

    _ElementMap.update({
        __COMPLEX_VALUES.name() : __COMPLEX_VALUES
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPLEX-PHYSICAL-DEFAULT-VALUE', COMPLEX_PHYSICAL_DEFAULT_VALUE)


# Complex type COMPLEX-VALUES with content type ELEMENT_ONLY
class COMPLEX_VALUES (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMPLEX-VALUES with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPLEX-VALUES')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 421, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element COMPLEX-VALUE uses Python identifier COMPLEX_VALUE
    __COMPLEX_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPLEX-VALUE'), 'COMPLEX_VALUE', '__COMPLEX_VALUES_COMPLEX_VALUE', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 424, 0), )

    
    COMPLEX_VALUE = property(__COMPLEX_VALUE.value, __COMPLEX_VALUE.set, None, None)

    _ElementMap.update({
        __COMPLEX_VALUE.name() : __COMPLEX_VALUE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPLEX-VALUES', COMPLEX_VALUES)


# Complex type COMPONENT-CONNECTOR with content type ELEMENT_ONLY
class COMPONENT_CONNECTOR (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMPONENT-CONNECTOR with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPONENT-CONNECTOR')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 427, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ECU-VARIANT-REFS uses Python identifier ECU_VARIANT_REFS
    __ECU_VARIANT_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ECU-VARIANT-REFS'), 'ECU_VARIANT_REFS', '__COMPONENT_CONNECTOR_ECU_VARIANT_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 430, 0), )

    
    ECU_VARIANT_REFS = property(__ECU_VARIANT_REFS.value, __ECU_VARIANT_REFS.set, None, None)

    
    # Element BASE-VARIANT-REF uses Python identifier BASE_VARIANT_REF
    __BASE_VARIANT_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BASE-VARIANT-REF'), 'BASE_VARIANT_REF', '__COMPONENT_CONNECTOR_BASE_VARIANT_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 431, 0), )

    
    BASE_VARIANT_REF = property(__BASE_VARIANT_REF.value, __BASE_VARIANT_REF.set, None, None)

    
    # Element DIAG-OBJECT-CONNECTOR uses Python identifier DIAG_OBJECT_CONNECTOR
    __DIAG_OBJECT_CONNECTOR = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-OBJECT-CONNECTOR'), 'DIAG_OBJECT_CONNECTOR', '__COMPONENT_CONNECTOR_DIAG_OBJECT_CONNECTOR', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 433, 0), )

    
    DIAG_OBJECT_CONNECTOR = property(__DIAG_OBJECT_CONNECTOR.value, __DIAG_OBJECT_CONNECTOR.set, None, None)

    
    # Element DIAG-OBJECT-CONNECTOR-REF uses Python identifier DIAG_OBJECT_CONNECTOR_REF
    __DIAG_OBJECT_CONNECTOR_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-OBJECT-CONNECTOR-REF'), 'DIAG_OBJECT_CONNECTOR_REF', '__COMPONENT_CONNECTOR_DIAG_OBJECT_CONNECTOR_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 434, 0), )

    
    DIAG_OBJECT_CONNECTOR_REF = property(__DIAG_OBJECT_CONNECTOR_REF.value, __DIAG_OBJECT_CONNECTOR_REF.set, None, None)

    _ElementMap.update({
        __ECU_VARIANT_REFS.name() : __ECU_VARIANT_REFS,
        __BASE_VARIANT_REF.name() : __BASE_VARIANT_REF,
        __DIAG_OBJECT_CONNECTOR.name() : __DIAG_OBJECT_CONNECTOR,
        __DIAG_OBJECT_CONNECTOR_REF.name() : __DIAG_OBJECT_CONNECTOR_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPONENT-CONNECTOR', COMPONENT_CONNECTOR)


# Complex type COMPONENT-CONNECTORS with content type ELEMENT_ONLY
class COMPONENT_CONNECTORS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMPONENT-CONNECTORS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPONENT-CONNECTORS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 438, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element COMPONENT-CONNECTOR uses Python identifier COMPONENT_CONNECTOR
    __COMPONENT_CONNECTOR = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPONENT-CONNECTOR'), 'COMPONENT_CONNECTOR', '__COMPONENT_CONNECTORS_COMPONENT_CONNECTOR', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 441, 0), )

    
    COMPONENT_CONNECTOR = property(__COMPONENT_CONNECTOR.value, __COMPONENT_CONNECTOR.set, None, None)

    _ElementMap.update({
        __COMPONENT_CONNECTOR.name() : __COMPONENT_CONNECTOR
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPONENT-CONNECTORS', COMPONENT_CONNECTORS)


# Complex type COMPU-CONST with content type ELEMENT_ONLY
class COMPU_CONST (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMPU-CONST with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPU-CONST')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 456, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element V uses Python identifier V
    __V = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'V'), 'V', '__COMPU_CONST_V', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 459, 0), )

    
    V = property(__V.value, __V.set, None, None)

    
    # Element VT uses Python identifier VT
    __VT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VT'), 'VT', '__COMPU_CONST_VT', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 460, 0), )

    
    VT = property(__VT.value, __VT.set, None, None)

    _ElementMap.update({
        __V.name() : __V,
        __VT.name() : __VT
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPU-CONST', COMPU_CONST)


# Complex type COMPU-DEFAULT-VALUE with content type ELEMENT_ONLY
class COMPU_DEFAULT_VALUE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMPU-DEFAULT-VALUE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPU-DEFAULT-VALUE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 463, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element V uses Python identifier V
    __V = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'V'), 'V', '__COMPU_DEFAULT_VALUE_V', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 467, 0), )

    
    V = property(__V.value, __V.set, None, None)

    
    # Element VT uses Python identifier VT
    __VT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VT'), 'VT', '__COMPU_DEFAULT_VALUE_VT', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 468, 0), )

    
    VT = property(__VT.value, __VT.set, None, None)

    
    # Element COMPU-INVERSE-VALUE uses Python identifier COMPU_INVERSE_VALUE
    __COMPU_INVERSE_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPU-INVERSE-VALUE'), 'COMPU_INVERSE_VALUE', '__COMPU_DEFAULT_VALUE_COMPU_INVERSE_VALUE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 470, 0), )

    
    COMPU_INVERSE_VALUE = property(__COMPU_INVERSE_VALUE.value, __COMPU_INVERSE_VALUE.set, None, None)

    _ElementMap.update({
        __V.name() : __V,
        __VT.name() : __VT,
        __COMPU_INVERSE_VALUE.name() : __COMPU_INVERSE_VALUE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPU-DEFAULT-VALUE', COMPU_DEFAULT_VALUE)


# Complex type COMPU-DENOMINATOR with content type ELEMENT_ONLY
class COMPU_DENOMINATOR (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMPU-DENOMINATOR with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPU-DENOMINATOR')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 473, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element V uses Python identifier V
    __V = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'V'), 'V', '__COMPU_DENOMINATOR_V', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 476, 0), )

    
    V = property(__V.value, __V.set, None, None)

    _ElementMap.update({
        __V.name() : __V
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPU-DENOMINATOR', COMPU_DENOMINATOR)


# Complex type COMPU-INTERNAL-TO-PHYS with content type ELEMENT_ONLY
class COMPU_INTERNAL_TO_PHYS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMPU-INTERNAL-TO-PHYS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPU-INTERNAL-TO-PHYS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 479, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element COMPU-SCALES uses Python identifier COMPU_SCALES
    __COMPU_SCALES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPU-SCALES'), 'COMPU_SCALES', '__COMPU_INTERNAL_TO_PHYS_COMPU_SCALES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 483, 0), )

    
    COMPU_SCALES = property(__COMPU_SCALES.value, __COMPU_SCALES.set, None, None)

    
    # Element PROG-CODE uses Python identifier PROG_CODE
    __PROG_CODE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PROG-CODE'), 'PROG_CODE', '__COMPU_INTERNAL_TO_PHYS_PROG_CODE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 484, 0), )

    
    PROG_CODE = property(__PROG_CODE.value, __PROG_CODE.set, None, None)

    
    # Element COMPU-DEFAULT-VALUE uses Python identifier COMPU_DEFAULT_VALUE
    __COMPU_DEFAULT_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPU-DEFAULT-VALUE'), 'COMPU_DEFAULT_VALUE', '__COMPU_INTERNAL_TO_PHYS_COMPU_DEFAULT_VALUE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 486, 0), )

    
    COMPU_DEFAULT_VALUE = property(__COMPU_DEFAULT_VALUE.value, __COMPU_DEFAULT_VALUE.set, None, None)

    _ElementMap.update({
        __COMPU_SCALES.name() : __COMPU_SCALES,
        __PROG_CODE.name() : __PROG_CODE,
        __COMPU_DEFAULT_VALUE.name() : __COMPU_DEFAULT_VALUE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPU-INTERNAL-TO-PHYS', COMPU_INTERNAL_TO_PHYS)


# Complex type COMPU-INVERSE-VALUE with content type ELEMENT_ONLY
class COMPU_INVERSE_VALUE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMPU-INVERSE-VALUE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPU-INVERSE-VALUE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 489, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element V uses Python identifier V
    __V = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'V'), 'V', '__COMPU_INVERSE_VALUE_V', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 492, 0), )

    
    V = property(__V.value, __V.set, None, None)

    
    # Element VT uses Python identifier VT
    __VT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VT'), 'VT', '__COMPU_INVERSE_VALUE_VT', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 493, 0), )

    
    VT = property(__VT.value, __VT.set, None, None)

    _ElementMap.update({
        __V.name() : __V,
        __VT.name() : __VT
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPU-INVERSE-VALUE', COMPU_INVERSE_VALUE)


# Complex type COMPU-METHOD with content type ELEMENT_ONLY
class COMPU_METHOD (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMPU-METHOD with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPU-METHOD')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 496, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CATEGORY uses Python identifier CATEGORY
    __CATEGORY = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CATEGORY'), 'CATEGORY', '__COMPU_METHOD_CATEGORY', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 499, 0), )

    
    CATEGORY = property(__CATEGORY.value, __CATEGORY.set, None, None)

    
    # Element COMPU-INTERNAL-TO-PHYS uses Python identifier COMPU_INTERNAL_TO_PHYS
    __COMPU_INTERNAL_TO_PHYS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPU-INTERNAL-TO-PHYS'), 'COMPU_INTERNAL_TO_PHYS', '__COMPU_METHOD_COMPU_INTERNAL_TO_PHYS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 500, 0), )

    
    COMPU_INTERNAL_TO_PHYS = property(__COMPU_INTERNAL_TO_PHYS.value, __COMPU_INTERNAL_TO_PHYS.set, None, None)

    
    # Element COMPU-PHYS-TO-INTERNAL uses Python identifier COMPU_PHYS_TO_INTERNAL
    __COMPU_PHYS_TO_INTERNAL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPU-PHYS-TO-INTERNAL'), 'COMPU_PHYS_TO_INTERNAL', '__COMPU_METHOD_COMPU_PHYS_TO_INTERNAL', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 501, 0), )

    
    COMPU_PHYS_TO_INTERNAL = property(__COMPU_PHYS_TO_INTERNAL.value, __COMPU_PHYS_TO_INTERNAL.set, None, None)

    _ElementMap.update({
        __CATEGORY.name() : __CATEGORY,
        __COMPU_INTERNAL_TO_PHYS.name() : __COMPU_INTERNAL_TO_PHYS,
        __COMPU_PHYS_TO_INTERNAL.name() : __COMPU_PHYS_TO_INTERNAL
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPU-METHOD', COMPU_METHOD)


# Complex type COMPU-NUMERATOR with content type ELEMENT_ONLY
class COMPU_NUMERATOR (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMPU-NUMERATOR with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPU-NUMERATOR')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 504, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element V uses Python identifier V
    __V = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'V'), 'V', '__COMPU_NUMERATOR_V', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 507, 0), )

    
    V = property(__V.value, __V.set, None, None)

    _ElementMap.update({
        __V.name() : __V
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPU-NUMERATOR', COMPU_NUMERATOR)


# Complex type COMPU-PHYS-TO-INTERNAL with content type ELEMENT_ONLY
class COMPU_PHYS_TO_INTERNAL (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMPU-PHYS-TO-INTERNAL with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPU-PHYS-TO-INTERNAL')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 510, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PROG-CODE uses Python identifier PROG_CODE
    __PROG_CODE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PROG-CODE'), 'PROG_CODE', '__COMPU_PHYS_TO_INTERNAL_PROG_CODE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 514, 0), )

    
    PROG_CODE = property(__PROG_CODE.value, __PROG_CODE.set, None, None)

    
    # Element COMPU-SCALES uses Python identifier COMPU_SCALES
    __COMPU_SCALES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPU-SCALES'), 'COMPU_SCALES', '__COMPU_PHYS_TO_INTERNAL_COMPU_SCALES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 515, 0), )

    
    COMPU_SCALES = property(__COMPU_SCALES.value, __COMPU_SCALES.set, None, None)

    
    # Element COMPU-DEFAULT-VALUE uses Python identifier COMPU_DEFAULT_VALUE
    __COMPU_DEFAULT_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPU-DEFAULT-VALUE'), 'COMPU_DEFAULT_VALUE', '__COMPU_PHYS_TO_INTERNAL_COMPU_DEFAULT_VALUE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 517, 0), )

    
    COMPU_DEFAULT_VALUE = property(__COMPU_DEFAULT_VALUE.value, __COMPU_DEFAULT_VALUE.set, None, None)

    _ElementMap.update({
        __PROG_CODE.name() : __PROG_CODE,
        __COMPU_SCALES.name() : __COMPU_SCALES,
        __COMPU_DEFAULT_VALUE.name() : __COMPU_DEFAULT_VALUE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPU-PHYS-TO-INTERNAL', COMPU_PHYS_TO_INTERNAL)


# Complex type COMPU-RATIONAL-COEFFS with content type ELEMENT_ONLY
class COMPU_RATIONAL_COEFFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMPU-RATIONAL-COEFFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPU-RATIONAL-COEFFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 520, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element COMPU-NUMERATOR uses Python identifier COMPU_NUMERATOR
    __COMPU_NUMERATOR = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPU-NUMERATOR'), 'COMPU_NUMERATOR', '__COMPU_RATIONAL_COEFFS_COMPU_NUMERATOR', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 523, 0), )

    
    COMPU_NUMERATOR = property(__COMPU_NUMERATOR.value, __COMPU_NUMERATOR.set, None, None)

    
    # Element COMPU-DENOMINATOR uses Python identifier COMPU_DENOMINATOR
    __COMPU_DENOMINATOR = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPU-DENOMINATOR'), 'COMPU_DENOMINATOR', '__COMPU_RATIONAL_COEFFS_COMPU_DENOMINATOR', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 524, 0), )

    
    COMPU_DENOMINATOR = property(__COMPU_DENOMINATOR.value, __COMPU_DENOMINATOR.set, None, None)

    _ElementMap.update({
        __COMPU_NUMERATOR.name() : __COMPU_NUMERATOR,
        __COMPU_DENOMINATOR.name() : __COMPU_DENOMINATOR
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPU-RATIONAL-COEFFS', COMPU_RATIONAL_COEFFS)


# Complex type COMPU-SCALE with content type ELEMENT_ONLY
class COMPU_SCALE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMPU-SCALE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPU-SCALE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 527, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SHORT-LABEL uses Python identifier SHORT_LABEL
    __SHORT_LABEL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-LABEL'), 'SHORT_LABEL', '__COMPU_SCALE_SHORT_LABEL', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 530, 0), )

    
    SHORT_LABEL = property(__SHORT_LABEL.value, __SHORT_LABEL.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__COMPU_SCALE_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 531, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Element LOWER-LIMIT uses Python identifier LOWER_LIMIT
    __LOWER_LIMIT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LOWER-LIMIT'), 'LOWER_LIMIT', '__COMPU_SCALE_LOWER_LIMIT', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 532, 0), )

    
    LOWER_LIMIT = property(__LOWER_LIMIT.value, __LOWER_LIMIT.set, None, None)

    
    # Element UPPER-LIMIT uses Python identifier UPPER_LIMIT
    __UPPER_LIMIT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UPPER-LIMIT'), 'UPPER_LIMIT', '__COMPU_SCALE_UPPER_LIMIT', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 533, 0), )

    
    UPPER_LIMIT = property(__UPPER_LIMIT.value, __UPPER_LIMIT.set, None, None)

    
    # Element COMPU-INVERSE-VALUE uses Python identifier COMPU_INVERSE_VALUE
    __COMPU_INVERSE_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPU-INVERSE-VALUE'), 'COMPU_INVERSE_VALUE', '__COMPU_SCALE_COMPU_INVERSE_VALUE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 534, 0), )

    
    COMPU_INVERSE_VALUE = property(__COMPU_INVERSE_VALUE.value, __COMPU_INVERSE_VALUE.set, None, None)

    
    # Element COMPU-CONST uses Python identifier COMPU_CONST
    __COMPU_CONST = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPU-CONST'), 'COMPU_CONST', '__COMPU_SCALE_COMPU_CONST', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 536, 0), )

    
    COMPU_CONST = property(__COMPU_CONST.value, __COMPU_CONST.set, None, None)

    
    # Element COMPU-RATIONAL-COEFFS uses Python identifier COMPU_RATIONAL_COEFFS
    __COMPU_RATIONAL_COEFFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPU-RATIONAL-COEFFS'), 'COMPU_RATIONAL_COEFFS', '__COMPU_SCALE_COMPU_RATIONAL_COEFFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 537, 0), )

    
    COMPU_RATIONAL_COEFFS = property(__COMPU_RATIONAL_COEFFS.value, __COMPU_RATIONAL_COEFFS.set, None, None)

    _ElementMap.update({
        __SHORT_LABEL.name() : __SHORT_LABEL,
        __DESC.name() : __DESC,
        __LOWER_LIMIT.name() : __LOWER_LIMIT,
        __UPPER_LIMIT.name() : __UPPER_LIMIT,
        __COMPU_INVERSE_VALUE.name() : __COMPU_INVERSE_VALUE,
        __COMPU_CONST.name() : __COMPU_CONST,
        __COMPU_RATIONAL_COEFFS.name() : __COMPU_RATIONAL_COEFFS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPU-SCALE', COMPU_SCALE)


# Complex type COMPU-SCALES with content type ELEMENT_ONLY
class COMPU_SCALES (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMPU-SCALES with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPU-SCALES')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 541, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element COMPU-SCALE uses Python identifier COMPU_SCALE
    __COMPU_SCALE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPU-SCALE'), 'COMPU_SCALE', '__COMPU_SCALES_COMPU_SCALE', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 544, 0), )

    
    COMPU_SCALE = property(__COMPU_SCALE.value, __COMPU_SCALE.set, None, None)

    _ElementMap.update({
        __COMPU_SCALE.name() : __COMPU_SCALE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPU-SCALES', COMPU_SCALES)


# Complex type CONFIG-DATA with content type ELEMENT_ONLY
class CONFIG_DATA (pyxb.binding.basis.complexTypeDefinition):
    """Complex type CONFIG-DATA with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CONFIG-DATA')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 547, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element VALID-BASE-VARIANTS uses Python identifier VALID_BASE_VARIANTS
    __VALID_BASE_VARIANTS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VALID-BASE-VARIANTS'), 'VALID_BASE_VARIANTS', '__CONFIG_DATA_VALID_BASE_VARIANTS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 551, 0), )

    
    VALID_BASE_VARIANTS = property(__VALID_BASE_VARIANTS.value, __VALID_BASE_VARIANTS.set, None, None)

    
    # Element CONFIG-RECORDS uses Python identifier CONFIG_RECORDS
    __CONFIG_RECORDS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CONFIG-RECORDS'), 'CONFIG_RECORDS', '__CONFIG_DATA_CONFIG_RECORDS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 552, 0), )

    
    CONFIG_RECORDS = property(__CONFIG_RECORDS.value, __CONFIG_RECORDS.set, None, None)

    
    # Element SDGS uses Python identifier SDGS
    __SDGS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDGS'), 'SDGS', '__CONFIG_DATA_SDGS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 553, 0), )

    
    SDGS = property(__SDGS.value, __SDGS.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__CONFIG_DATA_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__CONFIG_DATA_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__CONFIG_DATA_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    _ElementMap.update({
        __VALID_BASE_VARIANTS.name() : __VALID_BASE_VARIANTS,
        __CONFIG_RECORDS.name() : __CONFIG_RECORDS,
        __SDGS.name() : __SDGS,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CONFIG-DATA', CONFIG_DATA)


# Complex type CONFIG-DATA-DICTIONARY-SPEC with content type ELEMENT_ONLY
class CONFIG_DATA_DICTIONARY_SPEC (pyxb.binding.basis.complexTypeDefinition):
    """Complex type CONFIG-DATA-DICTIONARY-SPEC with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CONFIG-DATA-DICTIONARY-SPEC')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 556, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DATA-OBJECT-PROPS uses Python identifier DATA_OBJECT_PROPS
    __DATA_OBJECT_PROPS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROPS'), 'DATA_OBJECT_PROPS', '__CONFIG_DATA_DICTIONARY_SPEC_DATA_OBJECT_PROPS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 559, 0), )

    
    DATA_OBJECT_PROPS = property(__DATA_OBJECT_PROPS.value, __DATA_OBJECT_PROPS.set, None, None)

    
    # Element UNIT-SPEC uses Python identifier UNIT_SPEC
    __UNIT_SPEC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UNIT-SPEC'), 'UNIT_SPEC', '__CONFIG_DATA_DICTIONARY_SPEC_UNIT_SPEC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 560, 0), )

    
    UNIT_SPEC = property(__UNIT_SPEC.value, __UNIT_SPEC.set, None, None)

    _ElementMap.update({
        __DATA_OBJECT_PROPS.name() : __DATA_OBJECT_PROPS,
        __UNIT_SPEC.name() : __UNIT_SPEC
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CONFIG-DATA-DICTIONARY-SPEC', CONFIG_DATA_DICTIONARY_SPEC)


# Complex type CONFIG-DATAS with content type ELEMENT_ONLY
class CONFIG_DATAS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type CONFIG-DATAS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CONFIG-DATAS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 563, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CONFIG-DATA uses Python identifier CONFIG_DATA
    __CONFIG_DATA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CONFIG-DATA'), 'CONFIG_DATA', '__CONFIG_DATAS_CONFIG_DATA', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 566, 0), )

    
    CONFIG_DATA = property(__CONFIG_DATA.value, __CONFIG_DATA.set, None, None)

    _ElementMap.update({
        __CONFIG_DATA.name() : __CONFIG_DATA
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CONFIG-DATAS', CONFIG_DATAS)


# Complex type CONFIG-ITEM with content type ELEMENT_ONLY
class CONFIG_ITEM (pyxb.binding.basis.complexTypeDefinition):
    """Complex type CONFIG-ITEM with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CONFIG-ITEM')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 575, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element BYTE-POSITION uses Python identifier BYTE_POSITION
    __BYTE_POSITION = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION'), 'BYTE_POSITION', '__CONFIG_ITEM_BYTE_POSITION', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 579, 0), )

    
    BYTE_POSITION = property(__BYTE_POSITION.value, __BYTE_POSITION.set, None, None)

    
    # Element BIT-POSITION uses Python identifier BIT_POSITION
    __BIT_POSITION = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BIT-POSITION'), 'BIT_POSITION', '__CONFIG_ITEM_BIT_POSITION', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 580, 0), )

    
    BIT_POSITION = property(__BIT_POSITION.value, __BIT_POSITION.set, None, None)

    
    # Element DATA-OBJECT-PROP-REF uses Python identifier DATA_OBJECT_PROP_REF
    __DATA_OBJECT_PROP_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-REF'), 'DATA_OBJECT_PROP_REF', '__CONFIG_ITEM_DATA_OBJECT_PROP_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 582, 0), )

    
    DATA_OBJECT_PROP_REF = property(__DATA_OBJECT_PROP_REF.value, __DATA_OBJECT_PROP_REF.set, None, None)

    
    # Element DATA-OBJECT-PROP-SNREF uses Python identifier DATA_OBJECT_PROP_SNREF
    __DATA_OBJECT_PROP_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-SNREF'), 'DATA_OBJECT_PROP_SNREF', '__CONFIG_ITEM_DATA_OBJECT_PROP_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 583, 0), )

    
    DATA_OBJECT_PROP_SNREF = property(__DATA_OBJECT_PROP_SNREF.value, __DATA_OBJECT_PROP_SNREF.set, None, None)

    
    # Element SDGS uses Python identifier SDGS
    __SDGS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDGS'), 'SDGS', '__CONFIG_ITEM_SDGS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 585, 0), )

    
    SDGS = property(__SDGS.value, __SDGS.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__CONFIG_ITEM_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__CONFIG_ITEM_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__CONFIG_ITEM_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute SEMANTIC uses Python identifier SEMANTIC
    __SEMANTIC = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SEMANTIC'), 'SEMANTIC', '__CONFIG_ITEM_SEMANTIC', pyxb.binding.datatypes.string)
    __SEMANTIC._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 587, 0)
    __SEMANTIC._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 587, 0)
    
    SEMANTIC = property(__SEMANTIC.value, __SEMANTIC.set, None, None)

    _ElementMap.update({
        __BYTE_POSITION.name() : __BYTE_POSITION,
        __BIT_POSITION.name() : __BIT_POSITION,
        __DATA_OBJECT_PROP_REF.name() : __DATA_OBJECT_PROP_REF,
        __DATA_OBJECT_PROP_SNREF.name() : __DATA_OBJECT_PROP_SNREF,
        __SDGS.name() : __SDGS,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __SEMANTIC.name() : __SEMANTIC
    })
Namespace.addCategoryObject('typeBinding', 'CONFIG-ITEM', CONFIG_ITEM)


# Complex type CONFIG-RECORD with content type ELEMENT_ONLY
class CONFIG_RECORD (pyxb.binding.basis.complexTypeDefinition):
    """Complex type CONFIG-RECORD with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CONFIG-RECORD')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 589, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CONFIG-ID-ITEM uses Python identifier CONFIG_ID_ITEM
    __CONFIG_ID_ITEM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CONFIG-ID-ITEM'), 'CONFIG_ID_ITEM', '__CONFIG_RECORD_CONFIG_ID_ITEM', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 593, 0), )

    
    CONFIG_ID_ITEM = property(__CONFIG_ID_ITEM.value, __CONFIG_ID_ITEM.set, None, None)

    
    # Element DIAG-COMM-DATA-CONNECTORS uses Python identifier DIAG_COMM_DATA_CONNECTORS
    __DIAG_COMM_DATA_CONNECTORS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-DATA-CONNECTORS'), 'DIAG_COMM_DATA_CONNECTORS', '__CONFIG_RECORD_DIAG_COMM_DATA_CONNECTORS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 594, 0), )

    
    DIAG_COMM_DATA_CONNECTORS = property(__DIAG_COMM_DATA_CONNECTORS.value, __DIAG_COMM_DATA_CONNECTORS.set, None, None)

    
    # Element CONFIG-ID uses Python identifier CONFIG_ID
    __CONFIG_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CONFIG-ID'), 'CONFIG_ID', '__CONFIG_RECORD_CONFIG_ID', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 596, 0), )

    
    CONFIG_ID = property(__CONFIG_ID.value, __CONFIG_ID.set, None, None)

    
    # Element DATA-RECORDS uses Python identifier DATA_RECORDS
    __DATA_RECORDS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DATA-RECORDS'), 'DATA_RECORDS', '__CONFIG_RECORD_DATA_RECORDS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 597, 0), )

    
    DATA_RECORDS = property(__DATA_RECORDS.value, __DATA_RECORDS.set, None, None)

    
    # Element AUDIENCE uses Python identifier AUDIENCE
    __AUDIENCE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AUDIENCE'), 'AUDIENCE', '__CONFIG_RECORD_AUDIENCE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 598, 0), )

    
    AUDIENCE = property(__AUDIENCE.value, __AUDIENCE.set, None, None)

    
    # Element SYSTEM-ITEMS uses Python identifier SYSTEM_ITEMS
    __SYSTEM_ITEMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SYSTEM-ITEMS'), 'SYSTEM_ITEMS', '__CONFIG_RECORD_SYSTEM_ITEMS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 599, 0), )

    
    SYSTEM_ITEMS = property(__SYSTEM_ITEMS.value, __SYSTEM_ITEMS.set, None, None)

    
    # Element DATA-ID-ITEM uses Python identifier DATA_ID_ITEM
    __DATA_ID_ITEM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DATA-ID-ITEM'), 'DATA_ID_ITEM', '__CONFIG_RECORD_DATA_ID_ITEM', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 600, 0), )

    
    DATA_ID_ITEM = property(__DATA_ID_ITEM.value, __DATA_ID_ITEM.set, None, None)

    
    # Element OPTION-ITEMS uses Python identifier OPTION_ITEMS
    __OPTION_ITEMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OPTION-ITEMS'), 'OPTION_ITEMS', '__CONFIG_RECORD_OPTION_ITEMS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 601, 0), )

    
    OPTION_ITEMS = property(__OPTION_ITEMS.value, __OPTION_ITEMS.set, None, None)

    
    # Element DEFAULT-DATA-RECORD-SNREF uses Python identifier DEFAULT_DATA_RECORD_SNREF
    __DEFAULT_DATA_RECORD_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DEFAULT-DATA-RECORD-SNREF'), 'DEFAULT_DATA_RECORD_SNREF', '__CONFIG_RECORD_DEFAULT_DATA_RECORD_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 602, 0), )

    
    DEFAULT_DATA_RECORD_SNREF = property(__DEFAULT_DATA_RECORD_SNREF.value, __DEFAULT_DATA_RECORD_SNREF.set, None, None)

    
    # Element SDGS uses Python identifier SDGS
    __SDGS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDGS'), 'SDGS', '__CONFIG_RECORD_SDGS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 603, 0), )

    
    SDGS = property(__SDGS.value, __SDGS.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__CONFIG_RECORD_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__CONFIG_RECORD_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__CONFIG_RECORD_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    _ElementMap.update({
        __CONFIG_ID_ITEM.name() : __CONFIG_ID_ITEM,
        __DIAG_COMM_DATA_CONNECTORS.name() : __DIAG_COMM_DATA_CONNECTORS,
        __CONFIG_ID.name() : __CONFIG_ID,
        __DATA_RECORDS.name() : __DATA_RECORDS,
        __AUDIENCE.name() : __AUDIENCE,
        __SYSTEM_ITEMS.name() : __SYSTEM_ITEMS,
        __DATA_ID_ITEM.name() : __DATA_ID_ITEM,
        __OPTION_ITEMS.name() : __OPTION_ITEMS,
        __DEFAULT_DATA_RECORD_SNREF.name() : __DEFAULT_DATA_RECORD_SNREF,
        __SDGS.name() : __SDGS,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CONFIG-RECORD', CONFIG_RECORD)


# Complex type CONFIG-RECORDS with content type ELEMENT_ONLY
class CONFIG_RECORDS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type CONFIG-RECORDS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CONFIG-RECORDS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 606, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CONFIG-RECORD uses Python identifier CONFIG_RECORD
    __CONFIG_RECORD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CONFIG-RECORD'), 'CONFIG_RECORD', '__CONFIG_RECORDS_CONFIG_RECORD', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 609, 0), )

    
    CONFIG_RECORD = property(__CONFIG_RECORD.value, __CONFIG_RECORD.set, None, None)

    _ElementMap.update({
        __CONFIG_RECORD.name() : __CONFIG_RECORD
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CONFIG-RECORDS', CONFIG_RECORDS)


# Complex type DATA with content type SIMPLE
class DATA (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DATA with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DATA')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 612, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DATA', DATA)


# Complex type DATABLOCK with content type ELEMENT_ONLY
class DATABLOCK (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DATABLOCK with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DATABLOCK')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 618, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element LOGICAL-BLOCK-INDEX uses Python identifier LOGICAL_BLOCK_INDEX
    __LOGICAL_BLOCK_INDEX = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LOGICAL-BLOCK-INDEX'), 'LOGICAL_BLOCK_INDEX', '__DATABLOCK_LOGICAL_BLOCK_INDEX', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 622, 0), )

    
    LOGICAL_BLOCK_INDEX = property(__LOGICAL_BLOCK_INDEX.value, __LOGICAL_BLOCK_INDEX.set, None, None)

    
    # Element FLASHDATA-REF uses Python identifier FLASHDATA_REF
    __FLASHDATA_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FLASHDATA-REF'), 'FLASHDATA_REF', '__DATABLOCK_FLASHDATA_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 623, 0), )

    
    FLASHDATA_REF = property(__FLASHDATA_REF.value, __FLASHDATA_REF.set, None, None)

    
    # Element FILTERS uses Python identifier FILTERS
    __FILTERS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FILTERS'), 'FILTERS', '__DATABLOCK_FILTERS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 624, 0), )

    
    FILTERS = property(__FILTERS.value, __FILTERS.set, None, None)

    
    # Element SEGMENTS uses Python identifier SEGMENTS
    __SEGMENTS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SEGMENTS'), 'SEGMENTS', '__DATABLOCK_SEGMENTS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 625, 0), )

    
    SEGMENTS = property(__SEGMENTS.value, __SEGMENTS.set, None, None)

    
    # Element TARGET-ADDR-OFFSET uses Python identifier TARGET_ADDR_OFFSET
    __TARGET_ADDR_OFFSET = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TARGET-ADDR-OFFSET'), 'TARGET_ADDR_OFFSET', '__DATABLOCK_TARGET_ADDR_OFFSET', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 626, 0), )

    
    TARGET_ADDR_OFFSET = property(__TARGET_ADDR_OFFSET.value, __TARGET_ADDR_OFFSET.set, None, None)

    
    # Element OWN-IDENTS uses Python identifier OWN_IDENTS
    __OWN_IDENTS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OWN-IDENTS'), 'OWN_IDENTS', '__DATABLOCK_OWN_IDENTS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 627, 0), )

    
    OWN_IDENTS = property(__OWN_IDENTS.value, __OWN_IDENTS.set, None, None)

    
    # Element SECURITYS uses Python identifier SECURITYS
    __SECURITYS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SECURITYS'), 'SECURITYS', '__DATABLOCK_SECURITYS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 628, 0), )

    
    SECURITYS = property(__SECURITYS.value, __SECURITYS.set, None, None)

    
    # Element SDGS uses Python identifier SDGS
    __SDGS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDGS'), 'SDGS', '__DATABLOCK_SDGS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 629, 0), )

    
    SDGS = property(__SDGS.value, __SDGS.set, None, None)

    
    # Element AUDIENCE uses Python identifier AUDIENCE
    __AUDIENCE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AUDIENCE'), 'AUDIENCE', '__DATABLOCK_AUDIENCE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 630, 0), )

    
    AUDIENCE = property(__AUDIENCE.value, __AUDIENCE.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__DATABLOCK_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__DATABLOCK_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__DATABLOCK_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__DATABLOCK_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 632, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 632, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__DATABLOCK_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 633, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 633, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    
    # Attribute TYPE uses Python identifier TYPE
    __TYPE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TYPE'), 'TYPE', '__DATABLOCK_TYPE', pyxb.binding.datatypes.string, required=True)
    __TYPE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 634, 0)
    __TYPE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 634, 0)
    
    TYPE = property(__TYPE.value, __TYPE.set, None, None)

    _ElementMap.update({
        __LOGICAL_BLOCK_INDEX.name() : __LOGICAL_BLOCK_INDEX,
        __FLASHDATA_REF.name() : __FLASHDATA_REF,
        __FILTERS.name() : __FILTERS,
        __SEGMENTS.name() : __SEGMENTS,
        __TARGET_ADDR_OFFSET.name() : __TARGET_ADDR_OFFSET,
        __OWN_IDENTS.name() : __OWN_IDENTS,
        __SECURITYS.name() : __SECURITYS,
        __SDGS.name() : __SDGS,
        __AUDIENCE.name() : __AUDIENCE,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID,
        __TYPE.name() : __TYPE
    })
Namespace.addCategoryObject('typeBinding', 'DATABLOCK', DATABLOCK)


# Complex type DATABLOCK-REFS with content type ELEMENT_ONLY
class DATABLOCK_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DATABLOCK-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DATABLOCK-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 636, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DATABLOCK-REF uses Python identifier DATABLOCK_REF
    __DATABLOCK_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DATABLOCK-REF'), 'DATABLOCK_REF', '__DATABLOCK_REFS_DATABLOCK_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 639, 0), )

    
    DATABLOCK_REF = property(__DATABLOCK_REF.value, __DATABLOCK_REF.set, None, None)

    _ElementMap.update({
        __DATABLOCK_REF.name() : __DATABLOCK_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DATABLOCK-REFS', DATABLOCK_REFS)


# Complex type DATABLOCKS with content type ELEMENT_ONLY
class DATABLOCKS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DATABLOCKS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DATABLOCKS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 642, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DATABLOCK uses Python identifier DATABLOCK
    __DATABLOCK = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DATABLOCK'), 'DATABLOCK', '__DATABLOCKS_DATABLOCK', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 645, 0), )

    
    DATABLOCK = property(__DATABLOCK.value, __DATABLOCK.set, None, None)

    _ElementMap.update({
        __DATABLOCK.name() : __DATABLOCK
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DATABLOCKS', DATABLOCKS)


# Complex type DATAFILE with content type SIMPLE
class DATAFILE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DATAFILE with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DATAFILE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 648, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute LATEBOUND-DATAFILE uses Python identifier LATEBOUND_DATAFILE
    __LATEBOUND_DATAFILE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LATEBOUND-DATAFILE'), 'LATEBOUND_DATAFILE', '__DATAFILE_LATEBOUND_DATAFILE', pyxb.binding.datatypes.boolean, required=True)
    __LATEBOUND_DATAFILE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 652, 0)
    __LATEBOUND_DATAFILE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 652, 0)
    
    LATEBOUND_DATAFILE = property(__LATEBOUND_DATAFILE.value, __LATEBOUND_DATAFILE.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __LATEBOUND_DATAFILE.name() : __LATEBOUND_DATAFILE
    })
Namespace.addCategoryObject('typeBinding', 'DATAFILE', DATAFILE)


# Complex type DATA-OBJECT-PROPS with content type ELEMENT_ONLY
class DATA_OBJECT_PROPS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DATA-OBJECT-PROPS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DATA-OBJECT-PROPS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 690, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DATA-OBJECT-PROP uses Python identifier DATA_OBJECT_PROP
    __DATA_OBJECT_PROP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP'), 'DATA_OBJECT_PROP', '__DATA_OBJECT_PROPS_DATA_OBJECT_PROP', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 693, 0), )

    
    DATA_OBJECT_PROP = property(__DATA_OBJECT_PROP.value, __DATA_OBJECT_PROP.set, None, None)

    _ElementMap.update({
        __DATA_OBJECT_PROP.name() : __DATA_OBJECT_PROP
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DATA-OBJECT-PROPS', DATA_OBJECT_PROPS)


# Complex type DATA-RECORDS with content type ELEMENT_ONLY
class DATA_RECORDS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DATA-RECORDS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DATA-RECORDS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 712, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DATA-RECORD uses Python identifier DATA_RECORD
    __DATA_RECORD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DATA-RECORD'), 'DATA_RECORD', '__DATA_RECORDS_DATA_RECORD', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 715, 0), )

    
    DATA_RECORD = property(__DATA_RECORD.value, __DATA_RECORD.set, None, None)

    _ElementMap.update({
        __DATA_RECORD.name() : __DATA_RECORD
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DATA-RECORDS', DATA_RECORDS)


# Complex type DEFAULT-CASE with content type ELEMENT_ONLY
class DEFAULT_CASE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DEFAULT-CASE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DEFAULT-CASE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 730, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element STRUCTURE-REF uses Python identifier STRUCTURE_REF
    __STRUCTURE_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'STRUCTURE-REF'), 'STRUCTURE_REF', '__DEFAULT_CASE_STRUCTURE_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 735, 0), )

    
    STRUCTURE_REF = property(__STRUCTURE_REF.value, __STRUCTURE_REF.set, None, None)

    
    # Element STRUCTURE-SNREF uses Python identifier STRUCTURE_SNREF
    __STRUCTURE_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'STRUCTURE-SNREF'), 'STRUCTURE_SNREF', '__DEFAULT_CASE_STRUCTURE_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 736, 0), )

    
    STRUCTURE_SNREF = property(__STRUCTURE_SNREF.value, __STRUCTURE_SNREF.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__DEFAULT_CASE_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__DEFAULT_CASE_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__DEFAULT_CASE_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    _ElementMap.update({
        __STRUCTURE_REF.name() : __STRUCTURE_REF,
        __STRUCTURE_SNREF.name() : __STRUCTURE_SNREF,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DEFAULT-CASE', DEFAULT_CASE)


# Complex type DESCRIPTION with content type ELEMENT_ONLY
class DESCRIPTION (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DESCRIPTION with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DESCRIPTION')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 740, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ol uses Python identifier ol
    __ol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ol'), 'ol', '__DESCRIPTION_ol', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 47, 4), )

    
    ol = property(__ol.value, __ol.set, None, None)

    
    # Element ul uses Python identifier ul
    __ul = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ul'), 'ul', '__DESCRIPTION_ul', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 80, 4), )

    
    ul = property(__ul.value, __ul.set, None, None)

    
    # Element p uses Python identifier p
    __p = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'p'), 'p', '__DESCRIPTION_p', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 93, 4), )

    
    p = property(__p.value, __p.set, None, None)

    
    # Element EXTERNAL-DOCS uses Python identifier EXTERNAL_DOCS
    __EXTERNAL_DOCS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EXTERNAL-DOCS'), 'EXTERNAL_DOCS', '__DESCRIPTION_EXTERNAL_DOCS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 744, 0), )

    
    EXTERNAL_DOCS = property(__EXTERNAL_DOCS.value, __EXTERNAL_DOCS.set, None, None)

    
    # Attribute TI uses Python identifier TI
    __TI = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TI'), 'TI', '__DESCRIPTION_TI', pyxb.binding.datatypes.string)
    __TI._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 746, 0)
    __TI._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 746, 0)
    
    TI = property(__TI.value, __TI.set, None, None)

    _ElementMap.update({
        __ol.name() : __ol,
        __ul.name() : __ul,
        __p.name() : __p,
        __EXTERNAL_DOCS.name() : __EXTERNAL_DOCS
    })
    _AttributeMap.update({
        __TI.name() : __TI
    })
Namespace.addCategoryObject('typeBinding', 'DESCRIPTION', DESCRIPTION)


# Complex type DETERMINE-NUMBER-OF-ITEMS with content type ELEMENT_ONLY
class DETERMINE_NUMBER_OF_ITEMS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DETERMINE-NUMBER-OF-ITEMS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DETERMINE-NUMBER-OF-ITEMS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 748, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element BYTE-POSITION uses Python identifier BYTE_POSITION
    __BYTE_POSITION = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION'), 'BYTE_POSITION', '__DETERMINE_NUMBER_OF_ITEMS_BYTE_POSITION', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 751, 0), )

    
    BYTE_POSITION = property(__BYTE_POSITION.value, __BYTE_POSITION.set, None, None)

    
    # Element BIT-POSITION uses Python identifier BIT_POSITION
    __BIT_POSITION = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BIT-POSITION'), 'BIT_POSITION', '__DETERMINE_NUMBER_OF_ITEMS_BIT_POSITION', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 752, 0), )

    
    BIT_POSITION = property(__BIT_POSITION.value, __BIT_POSITION.set, None, None)

    
    # Element DATA-OBJECT-PROP-REF uses Python identifier DATA_OBJECT_PROP_REF
    __DATA_OBJECT_PROP_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-REF'), 'DATA_OBJECT_PROP_REF', '__DETERMINE_NUMBER_OF_ITEMS_DATA_OBJECT_PROP_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 759, 0), )

    
    DATA_OBJECT_PROP_REF = property(__DATA_OBJECT_PROP_REF.value, __DATA_OBJECT_PROP_REF.set, None, None)

    _ElementMap.update({
        __BYTE_POSITION.name() : __BYTE_POSITION,
        __BIT_POSITION.name() : __BIT_POSITION,
        __DATA_OBJECT_PROP_REF.name() : __DATA_OBJECT_PROP_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DETERMINE-NUMBER-OF-ITEMS', DETERMINE_NUMBER_OF_ITEMS)


# Complex type DIAG-COMM-DATA-CONNECTOR with content type ELEMENT_ONLY
class DIAG_COMM_DATA_CONNECTOR (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DIAG-COMM-DATA-CONNECTOR with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DIAG-COMM-DATA-CONNECTOR')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 800, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element UNCOMPRESSED-SIZE uses Python identifier UNCOMPRESSED_SIZE
    __UNCOMPRESSED_SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UNCOMPRESSED-SIZE'), 'UNCOMPRESSED_SIZE', '__DIAG_COMM_DATA_CONNECTOR_UNCOMPRESSED_SIZE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 803, 0), )

    
    UNCOMPRESSED_SIZE = property(__UNCOMPRESSED_SIZE.value, __UNCOMPRESSED_SIZE.set, None, None)

    
    # Element SOURCE-START-ADDRESS uses Python identifier SOURCE_START_ADDRESS
    __SOURCE_START_ADDRESS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SOURCE-START-ADDRESS'), 'SOURCE_START_ADDRESS', '__DIAG_COMM_DATA_CONNECTOR_SOURCE_START_ADDRESS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 804, 0), )

    
    SOURCE_START_ADDRESS = property(__SOURCE_START_ADDRESS.value, __SOURCE_START_ADDRESS.set, None, None)

    
    # Element READ-DIAG-COMMCONNECTOR uses Python identifier READ_DIAG_COMMCONNECTOR
    __READ_DIAG_COMMCONNECTOR = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'READ-DIAG-COMMCONNECTOR'), 'READ_DIAG_COMMCONNECTOR', '__DIAG_COMM_DATA_CONNECTOR_READ_DIAG_COMMCONNECTOR', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 805, 0), )

    
    READ_DIAG_COMMCONNECTOR = property(__READ_DIAG_COMMCONNECTOR.value, __READ_DIAG_COMMCONNECTOR.set, None, None)

    
    # Element WRITE-DIAG-COMMCONNECTOR uses Python identifier WRITE_DIAG_COMMCONNECTOR
    __WRITE_DIAG_COMMCONNECTOR = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'WRITE-DIAG-COMMCONNECTOR'), 'WRITE_DIAG_COMMCONNECTOR', '__DIAG_COMM_DATA_CONNECTOR_WRITE_DIAG_COMMCONNECTOR', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 806, 0), )

    
    WRITE_DIAG_COMMCONNECTOR = property(__WRITE_DIAG_COMMCONNECTOR.value, __WRITE_DIAG_COMMCONNECTOR.set, None, None)

    _ElementMap.update({
        __UNCOMPRESSED_SIZE.name() : __UNCOMPRESSED_SIZE,
        __SOURCE_START_ADDRESS.name() : __SOURCE_START_ADDRESS,
        __READ_DIAG_COMMCONNECTOR.name() : __READ_DIAG_COMMCONNECTOR,
        __WRITE_DIAG_COMMCONNECTOR.name() : __WRITE_DIAG_COMMCONNECTOR
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DIAG-COMM-DATA-CONNECTOR', DIAG_COMM_DATA_CONNECTOR)


# Complex type DIAG-COMM-DATA-CONNECTORS with content type ELEMENT_ONLY
class DIAG_COMM_DATA_CONNECTORS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DIAG-COMM-DATA-CONNECTORS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DIAG-COMM-DATA-CONNECTORS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 809, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DIAG-COMM-DATACONNECTOR uses Python identifier DIAG_COMM_DATACONNECTOR
    __DIAG_COMM_DATACONNECTOR = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-DATACONNECTOR'), 'DIAG_COMM_DATACONNECTOR', '__DIAG_COMM_DATA_CONNECTORS_DIAG_COMM_DATACONNECTOR', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 812, 0), )

    
    DIAG_COMM_DATACONNECTOR = property(__DIAG_COMM_DATACONNECTOR.value, __DIAG_COMM_DATACONNECTOR.set, None, None)

    _ElementMap.update({
        __DIAG_COMM_DATACONNECTOR.name() : __DIAG_COMM_DATACONNECTOR
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DIAG-COMM-DATA-CONNECTORS', DIAG_COMM_DATA_CONNECTORS)


# Complex type DIAG-COMMS with content type ELEMENT_ONLY
class DIAG_COMMS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DIAG-COMMS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DIAG-COMMS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 815, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DIAG-SERVICE uses Python identifier DIAG_SERVICE
    __DIAG_SERVICE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-SERVICE'), 'DIAG_SERVICE', '__DIAG_COMMS_DIAG_SERVICE', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3721, 0), )

    
    DIAG_SERVICE = property(__DIAG_SERVICE.value, __DIAG_SERVICE.set, None, None)

    
    # Element SINGLE-ECU-JOB uses Python identifier SINGLE_ECU_JOB
    __SINGLE_ECU_JOB = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SINGLE-ECU-JOB'), 'SINGLE_ECU_JOB', '__DIAG_COMMS_SINGLE_ECU_JOB', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3722, 0), )

    
    SINGLE_ECU_JOB = property(__SINGLE_ECU_JOB.value, __SINGLE_ECU_JOB.set, None, None)

    
    # Element DIAG-COMM-REF uses Python identifier DIAG_COMM_REF
    __DIAG_COMM_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-REF'), 'DIAG_COMM_REF', '__DIAG_COMMS_DIAG_COMM_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3724, 0), )

    
    DIAG_COMM_REF = property(__DIAG_COMM_REF.value, __DIAG_COMM_REF.set, None, None)

    _ElementMap.update({
        __DIAG_SERVICE.name() : __DIAG_SERVICE,
        __SINGLE_ECU_JOB.name() : __SINGLE_ECU_JOB,
        __DIAG_COMM_REF.name() : __DIAG_COMM_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DIAG-COMMS', DIAG_COMMS)


# Complex type DIAG-DATA-DICTIONARY-SPEC with content type ELEMENT_ONLY
class DIAG_DATA_DICTIONARY_SPEC (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DIAG-DATA-DICTIONARY-SPEC with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DIAG-DATA-DICTIONARY-SPEC')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 821, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ADMIN-DATA uses Python identifier ADMIN_DATA
    __ADMIN_DATA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), 'ADMIN_DATA', '__DIAG_DATA_DICTIONARY_SPEC_ADMIN_DATA', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 824, 0), )

    
    ADMIN_DATA = property(__ADMIN_DATA.value, __ADMIN_DATA.set, None, None)

    
    # Element DTC-DOPS uses Python identifier DTC_DOPS
    __DTC_DOPS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DTC-DOPS'), 'DTC_DOPS', '__DIAG_DATA_DICTIONARY_SPEC_DTC_DOPS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 825, 0), )

    
    DTC_DOPS = property(__DTC_DOPS.value, __DTC_DOPS.set, None, None)

    
    # Element ENV-DATA-DESCS uses Python identifier ENV_DATA_DESCS
    __ENV_DATA_DESCS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ENV-DATA-DESCS'), 'ENV_DATA_DESCS', '__DIAG_DATA_DICTIONARY_SPEC_ENV_DATA_DESCS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 826, 0), )

    
    ENV_DATA_DESCS = property(__ENV_DATA_DESCS.value, __ENV_DATA_DESCS.set, None, None)

    
    # Element DATA-OBJECT-PROPS uses Python identifier DATA_OBJECT_PROPS
    __DATA_OBJECT_PROPS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROPS'), 'DATA_OBJECT_PROPS', '__DIAG_DATA_DICTIONARY_SPEC_DATA_OBJECT_PROPS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 827, 0), )

    
    DATA_OBJECT_PROPS = property(__DATA_OBJECT_PROPS.value, __DATA_OBJECT_PROPS.set, None, None)

    
    # Element STRUCTURES uses Python identifier STRUCTURES
    __STRUCTURES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'STRUCTURES'), 'STRUCTURES', '__DIAG_DATA_DICTIONARY_SPEC_STRUCTURES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 828, 0), )

    
    STRUCTURES = property(__STRUCTURES.value, __STRUCTURES.set, None, None)

    
    # Element STATIC-FIELDS uses Python identifier STATIC_FIELDS
    __STATIC_FIELDS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'STATIC-FIELDS'), 'STATIC_FIELDS', '__DIAG_DATA_DICTIONARY_SPEC_STATIC_FIELDS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 829, 0), )

    
    STATIC_FIELDS = property(__STATIC_FIELDS.value, __STATIC_FIELDS.set, None, None)

    
    # Element DYNAMIC-LENGTH-FIELDS uses Python identifier DYNAMIC_LENGTH_FIELDS
    __DYNAMIC_LENGTH_FIELDS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DYNAMIC-LENGTH-FIELDS'), 'DYNAMIC_LENGTH_FIELDS', '__DIAG_DATA_DICTIONARY_SPEC_DYNAMIC_LENGTH_FIELDS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 830, 0), )

    
    DYNAMIC_LENGTH_FIELDS = property(__DYNAMIC_LENGTH_FIELDS.value, __DYNAMIC_LENGTH_FIELDS.set, None, None)

    
    # Element DYNAMIC-ENDMARKER-FIELDS uses Python identifier DYNAMIC_ENDMARKER_FIELDS
    __DYNAMIC_ENDMARKER_FIELDS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DYNAMIC-ENDMARKER-FIELDS'), 'DYNAMIC_ENDMARKER_FIELDS', '__DIAG_DATA_DICTIONARY_SPEC_DYNAMIC_ENDMARKER_FIELDS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 831, 0), )

    
    DYNAMIC_ENDMARKER_FIELDS = property(__DYNAMIC_ENDMARKER_FIELDS.value, __DYNAMIC_ENDMARKER_FIELDS.set, None, None)

    
    # Element END-OF-PDU-FIELDS uses Python identifier END_OF_PDU_FIELDS
    __END_OF_PDU_FIELDS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'END-OF-PDU-FIELDS'), 'END_OF_PDU_FIELDS', '__DIAG_DATA_DICTIONARY_SPEC_END_OF_PDU_FIELDS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 833, 0), )

    
    END_OF_PDU_FIELDS = property(__END_OF_PDU_FIELDS.value, __END_OF_PDU_FIELDS.set, None, None)

    
    # Element MUXS uses Python identifier MUXS
    __MUXS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MUXS'), 'MUXS', '__DIAG_DATA_DICTIONARY_SPEC_MUXS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 834, 0), )

    
    MUXS = property(__MUXS.value, __MUXS.set, None, None)

    
    # Element ENV-DATAS uses Python identifier ENV_DATAS
    __ENV_DATAS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ENV-DATAS'), 'ENV_DATAS', '__DIAG_DATA_DICTIONARY_SPEC_ENV_DATAS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 835, 0), )

    
    ENV_DATAS = property(__ENV_DATAS.value, __ENV_DATAS.set, None, None)

    
    # Element UNIT-SPEC uses Python identifier UNIT_SPEC
    __UNIT_SPEC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UNIT-SPEC'), 'UNIT_SPEC', '__DIAG_DATA_DICTIONARY_SPEC_UNIT_SPEC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 836, 0), )

    
    UNIT_SPEC = property(__UNIT_SPEC.value, __UNIT_SPEC.set, None, None)

    
    # Element TABLES uses Python identifier TABLES
    __TABLES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TABLES'), 'TABLES', '__DIAG_DATA_DICTIONARY_SPEC_TABLES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 837, 0), )

    
    TABLES = property(__TABLES.value, __TABLES.set, None, None)

    
    # Element SDGS uses Python identifier SDGS
    __SDGS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDGS'), 'SDGS', '__DIAG_DATA_DICTIONARY_SPEC_SDGS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 838, 0), )

    
    SDGS = property(__SDGS.value, __SDGS.set, None, None)

    _ElementMap.update({
        __ADMIN_DATA.name() : __ADMIN_DATA,
        __DTC_DOPS.name() : __DTC_DOPS,
        __ENV_DATA_DESCS.name() : __ENV_DATA_DESCS,
        __DATA_OBJECT_PROPS.name() : __DATA_OBJECT_PROPS,
        __STRUCTURES.name() : __STRUCTURES,
        __STATIC_FIELDS.name() : __STATIC_FIELDS,
        __DYNAMIC_LENGTH_FIELDS.name() : __DYNAMIC_LENGTH_FIELDS,
        __DYNAMIC_ENDMARKER_FIELDS.name() : __DYNAMIC_ENDMARKER_FIELDS,
        __END_OF_PDU_FIELDS.name() : __END_OF_PDU_FIELDS,
        __MUXS.name() : __MUXS,
        __ENV_DATAS.name() : __ENV_DATAS,
        __UNIT_SPEC.name() : __UNIT_SPEC,
        __TABLES.name() : __TABLES,
        __SDGS.name() : __SDGS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DIAG-DATA-DICTIONARY-SPEC', DIAG_DATA_DICTIONARY_SPEC)


# Complex type DIAG-LAYER with content type ELEMENT_ONLY
class DIAG_LAYER (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DIAG-LAYER with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DIAG-LAYER')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 841, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ADMIN-DATA uses Python identifier ADMIN_DATA
    __ADMIN_DATA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), 'ADMIN_DATA', '__DIAG_LAYER_ADMIN_DATA', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 845, 0), )

    
    ADMIN_DATA = property(__ADMIN_DATA.value, __ADMIN_DATA.set, None, None)

    
    # Element COMPANY-DATAS uses Python identifier COMPANY_DATAS
    __COMPANY_DATAS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPANY-DATAS'), 'COMPANY_DATAS', '__DIAG_LAYER_COMPANY_DATAS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 846, 0), )

    
    COMPANY_DATAS = property(__COMPANY_DATAS.value, __COMPANY_DATAS.set, None, None)

    
    # Element FUNCT-CLASSS uses Python identifier FUNCT_CLASSS
    __FUNCT_CLASSS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASSS'), 'FUNCT_CLASSS', '__DIAG_LAYER_FUNCT_CLASSS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 847, 0), )

    
    FUNCT_CLASSS = property(__FUNCT_CLASSS.value, __FUNCT_CLASSS.set, None, None)

    
    # Element DIAG-DATA-DICTIONARY-SPEC uses Python identifier DIAG_DATA_DICTIONARY_SPEC
    __DIAG_DATA_DICTIONARY_SPEC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-DATA-DICTIONARY-SPEC'), 'DIAG_DATA_DICTIONARY_SPEC', '__DIAG_LAYER_DIAG_DATA_DICTIONARY_SPEC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 848, 0), )

    
    DIAG_DATA_DICTIONARY_SPEC = property(__DIAG_DATA_DICTIONARY_SPEC.value, __DIAG_DATA_DICTIONARY_SPEC.set, None, None)

    
    # Element DIAG-COMMS uses Python identifier DIAG_COMMS
    __DIAG_COMMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-COMMS'), 'DIAG_COMMS', '__DIAG_LAYER_DIAG_COMMS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 849, 0), )

    
    DIAG_COMMS = property(__DIAG_COMMS.value, __DIAG_COMMS.set, None, None)

    
    # Element REQUESTS uses Python identifier REQUESTS
    __REQUESTS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'REQUESTS'), 'REQUESTS', '__DIAG_LAYER_REQUESTS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 850, 0), )

    
    REQUESTS = property(__REQUESTS.value, __REQUESTS.set, None, None)

    
    # Element POS-RESPONSES uses Python identifier POS_RESPONSES
    __POS_RESPONSES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'POS-RESPONSES'), 'POS_RESPONSES', '__DIAG_LAYER_POS_RESPONSES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 851, 0), )

    
    POS_RESPONSES = property(__POS_RESPONSES.value, __POS_RESPONSES.set, None, None)

    
    # Element NEG-RESPONSES uses Python identifier NEG_RESPONSES
    __NEG_RESPONSES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NEG-RESPONSES'), 'NEG_RESPONSES', '__DIAG_LAYER_NEG_RESPONSES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 852, 0), )

    
    NEG_RESPONSES = property(__NEG_RESPONSES.value, __NEG_RESPONSES.set, None, None)

    
    # Element GLOBAL-NEG-RESPONSES uses Python identifier GLOBAL_NEG_RESPONSES
    __GLOBAL_NEG_RESPONSES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'GLOBAL-NEG-RESPONSES'), 'GLOBAL_NEG_RESPONSES', '__DIAG_LAYER_GLOBAL_NEG_RESPONSES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 853, 0), )

    
    GLOBAL_NEG_RESPONSES = property(__GLOBAL_NEG_RESPONSES.value, __GLOBAL_NEG_RESPONSES.set, None, None)

    
    # Element IMPORT-REFS uses Python identifier IMPORT_REFS
    __IMPORT_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IMPORT-REFS'), 'IMPORT_REFS', '__DIAG_LAYER_IMPORT_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 854, 0), )

    
    IMPORT_REFS = property(__IMPORT_REFS.value, __IMPORT_REFS.set, None, None)

    
    # Element STATE-CHARTS uses Python identifier STATE_CHARTS
    __STATE_CHARTS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'STATE-CHARTS'), 'STATE_CHARTS', '__DIAG_LAYER_STATE_CHARTS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 855, 0), )

    
    STATE_CHARTS = property(__STATE_CHARTS.value, __STATE_CHARTS.set, None, None)

    
    # Element ADDITIONAL-AUDIENCES uses Python identifier ADDITIONAL_AUDIENCES
    __ADDITIONAL_AUDIENCES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ADDITIONAL-AUDIENCES'), 'ADDITIONAL_AUDIENCES', '__DIAG_LAYER_ADDITIONAL_AUDIENCES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 856, 0), )

    
    ADDITIONAL_AUDIENCES = property(__ADDITIONAL_AUDIENCES.value, __ADDITIONAL_AUDIENCES.set, None, None)

    
    # Element SUB-COMPONENTS uses Python identifier SUB_COMPONENTS
    __SUB_COMPONENTS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SUB-COMPONENTS'), 'SUB_COMPONENTS', '__DIAG_LAYER_SUB_COMPONENTS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 857, 0), )

    
    SUB_COMPONENTS = property(__SUB_COMPONENTS.value, __SUB_COMPONENTS.set, None, None)

    
    # Element LIBRARYS uses Python identifier LIBRARYS
    __LIBRARYS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LIBRARYS'), 'LIBRARYS', '__DIAG_LAYER_LIBRARYS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 858, 0), )

    
    LIBRARYS = property(__LIBRARYS.value, __LIBRARYS.set, None, None)

    
    # Element SDGS uses Python identifier SDGS
    __SDGS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDGS'), 'SDGS', '__DIAG_LAYER_SDGS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 859, 0), )

    
    SDGS = property(__SDGS.value, __SDGS.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__DIAG_LAYER_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__DIAG_LAYER_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__DIAG_LAYER_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__DIAG_LAYER_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 861, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 861, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__DIAG_LAYER_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 862, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 862, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __ADMIN_DATA.name() : __ADMIN_DATA,
        __COMPANY_DATAS.name() : __COMPANY_DATAS,
        __FUNCT_CLASSS.name() : __FUNCT_CLASSS,
        __DIAG_DATA_DICTIONARY_SPEC.name() : __DIAG_DATA_DICTIONARY_SPEC,
        __DIAG_COMMS.name() : __DIAG_COMMS,
        __REQUESTS.name() : __REQUESTS,
        __POS_RESPONSES.name() : __POS_RESPONSES,
        __NEG_RESPONSES.name() : __NEG_RESPONSES,
        __GLOBAL_NEG_RESPONSES.name() : __GLOBAL_NEG_RESPONSES,
        __IMPORT_REFS.name() : __IMPORT_REFS,
        __STATE_CHARTS.name() : __STATE_CHARTS,
        __ADDITIONAL_AUDIENCES.name() : __ADDITIONAL_AUDIENCES,
        __SUB_COMPONENTS.name() : __SUB_COMPONENTS,
        __LIBRARYS.name() : __LIBRARYS,
        __SDGS.name() : __SDGS,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'DIAG-LAYER', DIAG_LAYER)


# Complex type DIAG-LAYER-REFS with content type ELEMENT_ONLY
class DIAG_LAYER_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DIAG-LAYER-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DIAG-LAYER-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 878, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DIAG-LAYER-REF uses Python identifier DIAG_LAYER_REF
    __DIAG_LAYER_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-LAYER-REF'), 'DIAG_LAYER_REF', '__DIAG_LAYER_REFS_DIAG_LAYER_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 881, 0), )

    
    DIAG_LAYER_REF = property(__DIAG_LAYER_REF.value, __DIAG_LAYER_REF.set, None, None)

    _ElementMap.update({
        __DIAG_LAYER_REF.name() : __DIAG_LAYER_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DIAG-LAYER-REFS', DIAG_LAYER_REFS)


# Complex type DIAG-OBJECT-CONNECTOR with content type ELEMENT_ONLY
class DIAG_OBJECT_CONNECTOR (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DIAG-OBJECT-CONNECTOR with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DIAG-OBJECT-CONNECTOR')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 884, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element FUNCTION-DIAG-COMM-CONNECTORS uses Python identifier FUNCTION_DIAG_COMM_CONNECTORS
    __FUNCTION_DIAG_COMM_CONNECTORS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FUNCTION-DIAG-COMM-CONNECTORS'), 'FUNCTION_DIAG_COMM_CONNECTORS', '__DIAG_OBJECT_CONNECTOR_FUNCTION_DIAG_COMM_CONNECTORS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 888, 0), )

    
    FUNCTION_DIAG_COMM_CONNECTORS = property(__FUNCTION_DIAG_COMM_CONNECTORS.value, __FUNCTION_DIAG_COMM_CONNECTORS.set, None, None)

    
    # Element TABLE-ROW-CONNECTORS uses Python identifier TABLE_ROW_CONNECTORS
    __TABLE_ROW_CONNECTORS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TABLE-ROW-CONNECTORS'), 'TABLE_ROW_CONNECTORS', '__DIAG_OBJECT_CONNECTOR_TABLE_ROW_CONNECTORS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 890, 0), )

    
    TABLE_ROW_CONNECTORS = property(__TABLE_ROW_CONNECTORS.value, __TABLE_ROW_CONNECTORS.set, None, None)

    
    # Element ENV-DATA-CONNECTORS uses Python identifier ENV_DATA_CONNECTORS
    __ENV_DATA_CONNECTORS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ENV-DATA-CONNECTORS'), 'ENV_DATA_CONNECTORS', '__DIAG_OBJECT_CONNECTOR_ENV_DATA_CONNECTORS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 891, 0), )

    
    ENV_DATA_CONNECTORS = property(__ENV_DATA_CONNECTORS.value, __ENV_DATA_CONNECTORS.set, None, None)

    
    # Element DTC-CONNECTORS uses Python identifier DTC_CONNECTORS
    __DTC_CONNECTORS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DTC-CONNECTORS'), 'DTC_CONNECTORS', '__DIAG_OBJECT_CONNECTOR_DTC_CONNECTORS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 892, 0), )

    
    DTC_CONNECTORS = property(__DTC_CONNECTORS.value, __DTC_CONNECTORS.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__DIAG_OBJECT_CONNECTOR_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__DIAG_OBJECT_CONNECTOR_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__DIAG_OBJECT_CONNECTOR_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__DIAG_OBJECT_CONNECTOR_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 894, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 894, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__DIAG_OBJECT_CONNECTOR_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 895, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 895, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __FUNCTION_DIAG_COMM_CONNECTORS.name() : __FUNCTION_DIAG_COMM_CONNECTORS,
        __TABLE_ROW_CONNECTORS.name() : __TABLE_ROW_CONNECTORS,
        __ENV_DATA_CONNECTORS.name() : __ENV_DATA_CONNECTORS,
        __DTC_CONNECTORS.name() : __DTC_CONNECTORS,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'DIAG-OBJECT-CONNECTOR', DIAG_OBJECT_CONNECTOR)


# Complex type DIAG-VARIABLE with content type ELEMENT_ONLY
class DIAG_VARIABLE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DIAG-VARIABLE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DIAG-VARIABLE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 915, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ADMIN-DATA uses Python identifier ADMIN_DATA
    __ADMIN_DATA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), 'ADMIN_DATA', '__DIAG_VARIABLE_ADMIN_DATA', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 919, 0), )

    
    ADMIN_DATA = property(__ADMIN_DATA.value, __ADMIN_DATA.set, None, None)

    
    # Element VARIABLE-GROUP-REF uses Python identifier VARIABLE_GROUP_REF
    __VARIABLE_GROUP_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VARIABLE-GROUP-REF'), 'VARIABLE_GROUP_REF', '__DIAG_VARIABLE_VARIABLE_GROUP_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 920, 0), )

    
    VARIABLE_GROUP_REF = property(__VARIABLE_GROUP_REF.value, __VARIABLE_GROUP_REF.set, None, None)

    
    # Element SW-VARIABLES uses Python identifier SW_VARIABLES
    __SW_VARIABLES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SW-VARIABLES'), 'SW_VARIABLES', '__DIAG_VARIABLE_SW_VARIABLES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 921, 0), )

    
    SW_VARIABLES = property(__SW_VARIABLES.value, __SW_VARIABLES.set, None, None)

    
    # Element COMM-RELATIONS uses Python identifier COMM_RELATIONS
    __COMM_RELATIONS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMM-RELATIONS'), 'COMM_RELATIONS', '__DIAG_VARIABLE_COMM_RELATIONS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 923, 0), )

    
    COMM_RELATIONS = property(__COMM_RELATIONS.value, __COMM_RELATIONS.set, None, None)

    
    # Element SNREF-TO-TABLEROW uses Python identifier SNREF_TO_TABLEROW
    __SNREF_TO_TABLEROW = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SNREF-TO-TABLEROW'), 'SNREF_TO_TABLEROW', '__DIAG_VARIABLE_SNREF_TO_TABLEROW', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 924, 0), )

    
    SNREF_TO_TABLEROW = property(__SNREF_TO_TABLEROW.value, __SNREF_TO_TABLEROW.set, None, None)

    
    # Element SDGS uses Python identifier SDGS
    __SDGS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDGS'), 'SDGS', '__DIAG_VARIABLE_SDGS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 926, 0), )

    
    SDGS = property(__SDGS.value, __SDGS.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__DIAG_VARIABLE_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__DIAG_VARIABLE_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__DIAG_VARIABLE_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__DIAG_VARIABLE_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 928, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 928, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__DIAG_VARIABLE_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 929, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 929, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    
    # Attribute IS-READ-BEFORE-WRITE uses Python identifier IS_READ_BEFORE_WRITE
    __IS_READ_BEFORE_WRITE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IS-READ-BEFORE-WRITE'), 'IS_READ_BEFORE_WRITE', '__DIAG_VARIABLE_IS_READ_BEFORE_WRITE', pyxb.binding.datatypes.boolean, unicode_default='false')
    __IS_READ_BEFORE_WRITE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 930, 0)
    __IS_READ_BEFORE_WRITE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 930, 0)
    
    IS_READ_BEFORE_WRITE = property(__IS_READ_BEFORE_WRITE.value, __IS_READ_BEFORE_WRITE.set, None, None)

    _ElementMap.update({
        __ADMIN_DATA.name() : __ADMIN_DATA,
        __VARIABLE_GROUP_REF.name() : __VARIABLE_GROUP_REF,
        __SW_VARIABLES.name() : __SW_VARIABLES,
        __COMM_RELATIONS.name() : __COMM_RELATIONS,
        __SNREF_TO_TABLEROW.name() : __SNREF_TO_TABLEROW,
        __SDGS.name() : __SDGS,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID,
        __IS_READ_BEFORE_WRITE.name() : __IS_READ_BEFORE_WRITE
    })
Namespace.addCategoryObject('typeBinding', 'DIAG-VARIABLE', DIAG_VARIABLE)


# Complex type DIAG-VARIABLES with content type ELEMENT_ONLY
class DIAG_VARIABLES (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DIAG-VARIABLES with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DIAG-VARIABLES')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 932, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DIAG-VARIABLE-REF uses Python identifier DIAG_VARIABLE_REF
    __DIAG_VARIABLE_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-VARIABLE-REF'), 'DIAG_VARIABLE_REF', '__DIAG_VARIABLES_DIAG_VARIABLE_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3729, 0), )

    
    DIAG_VARIABLE_REF = property(__DIAG_VARIABLE_REF.value, __DIAG_VARIABLE_REF.set, None, None)

    
    # Element DIAG-VARIABLE uses Python identifier DIAG_VARIABLE
    __DIAG_VARIABLE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-VARIABLE'), 'DIAG_VARIABLE', '__DIAG_VARIABLES_DIAG_VARIABLE', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3730, 0), )

    
    DIAG_VARIABLE = property(__DIAG_VARIABLE.value, __DIAG_VARIABLE.set, None, None)

    _ElementMap.update({
        __DIAG_VARIABLE_REF.name() : __DIAG_VARIABLE_REF,
        __DIAG_VARIABLE.name() : __DIAG_VARIABLE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DIAG-VARIABLES', DIAG_VARIABLES)


# Complex type DISABLED-AUDIENCE-REFS with content type ELEMENT_ONLY
class DISABLED_AUDIENCE_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DISABLED-AUDIENCE-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DISABLED-AUDIENCE-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 944, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DISABLED-AUDIENCE-REF uses Python identifier DISABLED_AUDIENCE_REF
    __DISABLED_AUDIENCE_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DISABLED-AUDIENCE-REF'), 'DISABLED_AUDIENCE_REF', '__DISABLED_AUDIENCE_REFS_DISABLED_AUDIENCE_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 947, 4), )

    
    DISABLED_AUDIENCE_REF = property(__DISABLED_AUDIENCE_REF.value, __DISABLED_AUDIENCE_REF.set, None, None)

    _ElementMap.update({
        __DISABLED_AUDIENCE_REF.name() : __DISABLED_AUDIENCE_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DISABLED-AUDIENCE-REFS', DISABLED_AUDIENCE_REFS)


# Complex type DOC-REVISION with content type ELEMENT_ONLY
class DOC_REVISION (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DOC-REVISION with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DOC-REVISION')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 950, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TEAM-MEMBER-REF uses Python identifier TEAM_MEMBER_REF
    __TEAM_MEMBER_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TEAM-MEMBER-REF'), 'TEAM_MEMBER_REF', '__DOC_REVISION_TEAM_MEMBER_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 953, 0), )

    
    TEAM_MEMBER_REF = property(__TEAM_MEMBER_REF.value, __TEAM_MEMBER_REF.set, None, None)

    
    # Element REVISION-LABEL uses Python identifier REVISION_LABEL
    __REVISION_LABEL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'REVISION-LABEL'), 'REVISION_LABEL', '__DOC_REVISION_REVISION_LABEL', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 954, 0), )

    
    REVISION_LABEL = property(__REVISION_LABEL.value, __REVISION_LABEL.set, None, None)

    
    # Element STATE uses Python identifier STATE
    __STATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'STATE'), 'STATE', '__DOC_REVISION_STATE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 955, 0), )

    
    STATE = property(__STATE.value, __STATE.set, None, None)

    
    # Element DATE uses Python identifier DATE
    __DATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DATE'), 'DATE', '__DOC_REVISION_DATE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 956, 0), )

    
    DATE = property(__DATE.value, __DATE.set, None, None)

    
    # Element TOOL uses Python identifier TOOL
    __TOOL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TOOL'), 'TOOL', '__DOC_REVISION_TOOL', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 957, 0), )

    
    TOOL = property(__TOOL.value, __TOOL.set, None, None)

    
    # Element COMPANY-REVISION-INFOS uses Python identifier COMPANY_REVISION_INFOS
    __COMPANY_REVISION_INFOS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPANY-REVISION-INFOS'), 'COMPANY_REVISION_INFOS', '__DOC_REVISION_COMPANY_REVISION_INFOS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 958, 0), )

    
    COMPANY_REVISION_INFOS = property(__COMPANY_REVISION_INFOS.value, __COMPANY_REVISION_INFOS.set, None, None)

    
    # Element MODIFICATIONS uses Python identifier MODIFICATIONS
    __MODIFICATIONS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MODIFICATIONS'), 'MODIFICATIONS', '__DOC_REVISION_MODIFICATIONS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 959, 0), )

    
    MODIFICATIONS = property(__MODIFICATIONS.value, __MODIFICATIONS.set, None, None)

    _ElementMap.update({
        __TEAM_MEMBER_REF.name() : __TEAM_MEMBER_REF,
        __REVISION_LABEL.name() : __REVISION_LABEL,
        __STATE.name() : __STATE,
        __DATE.name() : __DATE,
        __TOOL.name() : __TOOL,
        __COMPANY_REVISION_INFOS.name() : __COMPANY_REVISION_INFOS,
        __MODIFICATIONS.name() : __MODIFICATIONS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DOC-REVISION', DOC_REVISION)


# Complex type DOC-REVISIONS with content type ELEMENT_ONLY
class DOC_REVISIONS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DOC-REVISIONS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DOC-REVISIONS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 962, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DOC-REVISION uses Python identifier DOC_REVISION
    __DOC_REVISION = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DOC-REVISION'), 'DOC_REVISION', '__DOC_REVISIONS_DOC_REVISION', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 965, 0), )

    
    DOC_REVISION = property(__DOC_REVISION.value, __DOC_REVISION.set, None, None)

    _ElementMap.update({
        __DOC_REVISION.name() : __DOC_REVISION
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DOC-REVISIONS', DOC_REVISIONS)


# Complex type DOP-BASE with content type ELEMENT_ONLY
class DOP_BASE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DOP-BASE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DOP-BASE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 981, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ADMIN-DATA uses Python identifier ADMIN_DATA
    __ADMIN_DATA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), 'ADMIN_DATA', '__DOP_BASE_ADMIN_DATA', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0), )

    
    ADMIN_DATA = property(__ADMIN_DATA.value, __ADMIN_DATA.set, None, None)

    
    # Element SDGS uses Python identifier SDGS
    __SDGS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDGS'), 'SDGS', '__DOP_BASE_SDGS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0), )

    
    SDGS = property(__SDGS.value, __SDGS.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__DOP_BASE_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__DOP_BASE_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__DOP_BASE_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__DOP_BASE_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 988, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 988, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__DOP_BASE_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 989, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 989, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __ADMIN_DATA.name() : __ADMIN_DATA,
        __SDGS.name() : __SDGS,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'DOP-BASE', DOP_BASE)


# Complex type DTC with content type ELEMENT_ONLY
class DTC (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DTC with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DTC')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 991, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__DTC_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 994, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element TROUBLE-CODE uses Python identifier TROUBLE_CODE
    __TROUBLE_CODE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TROUBLE-CODE'), 'TROUBLE_CODE', '__DTC_TROUBLE_CODE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1001, 0), )

    
    TROUBLE_CODE = property(__TROUBLE_CODE.value, __TROUBLE_CODE.set, None, None)

    
    # Element DISPLAY-TROUBLE-CODE uses Python identifier DISPLAY_TROUBLE_CODE
    __DISPLAY_TROUBLE_CODE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DISPLAY-TROUBLE-CODE'), 'DISPLAY_TROUBLE_CODE', '__DTC_DISPLAY_TROUBLE_CODE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1002, 0), )

    
    DISPLAY_TROUBLE_CODE = property(__DISPLAY_TROUBLE_CODE.value, __DISPLAY_TROUBLE_CODE.set, None, None)

    
    # Element TEXT uses Python identifier TEXT
    __TEXT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TEXT'), 'TEXT', '__DTC_TEXT', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1003, 0), )

    
    TEXT = property(__TEXT.value, __TEXT.set, None, None)

    
    # Element LEVEL uses Python identifier LEVEL
    __LEVEL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LEVEL'), 'LEVEL', '__DTC_LEVEL', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1004, 0), )

    
    LEVEL = property(__LEVEL.value, __LEVEL.set, None, None)

    
    # Element SDGS uses Python identifier SDGS
    __SDGS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDGS'), 'SDGS', '__DTC_SDGS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1005, 0), )

    
    SDGS = property(__SDGS.value, __SDGS.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__DTC_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1007, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1007, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__DTC_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1008, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1008, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    
    # Attribute IS-TEMPORARY uses Python identifier IS_TEMPORARY
    __IS_TEMPORARY = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IS-TEMPORARY'), 'IS_TEMPORARY', '__DTC_IS_TEMPORARY', pyxb.binding.datatypes.boolean, unicode_default='false')
    __IS_TEMPORARY._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1009, 0)
    __IS_TEMPORARY._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1009, 0)
    
    IS_TEMPORARY = property(__IS_TEMPORARY.value, __IS_TEMPORARY.set, None, None)

    _ElementMap.update({
        __SHORT_NAME.name() : __SHORT_NAME,
        __TROUBLE_CODE.name() : __TROUBLE_CODE,
        __DISPLAY_TROUBLE_CODE.name() : __DISPLAY_TROUBLE_CODE,
        __TEXT.name() : __TEXT,
        __LEVEL.name() : __LEVEL,
        __SDGS.name() : __SDGS
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID,
        __IS_TEMPORARY.name() : __IS_TEMPORARY
    })
Namespace.addCategoryObject('typeBinding', 'DTC', DTC)


# Complex type DTC-CONNECTOR with content type ELEMENT_ONLY
class DTC_CONNECTOR (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DTC-CONNECTOR with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DTC-CONNECTOR')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1011, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DTC-DOP-REF uses Python identifier DTC_DOP_REF
    __DTC_DOP_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DTC-DOP-REF'), 'DTC_DOP_REF', '__DTC_CONNECTOR_DTC_DOP_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1015, 0), )

    
    DTC_DOP_REF = property(__DTC_DOP_REF.value, __DTC_DOP_REF.set, None, None)

    
    # Element DTC-SNREF uses Python identifier DTC_SNREF
    __DTC_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DTC-SNREF'), 'DTC_SNREF', '__DTC_CONNECTOR_DTC_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1016, 0), )

    
    DTC_SNREF = property(__DTC_SNREF.value, __DTC_SNREF.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__DTC_CONNECTOR_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__DTC_CONNECTOR_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__DTC_CONNECTOR_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    _ElementMap.update({
        __DTC_DOP_REF.name() : __DTC_DOP_REF,
        __DTC_SNREF.name() : __DTC_SNREF,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DTC-CONNECTOR', DTC_CONNECTOR)


# Complex type DTC-CONNECTORS with content type ELEMENT_ONLY
class DTC_CONNECTORS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DTC-CONNECTORS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DTC-CONNECTORS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1019, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DTC-CONNECTOR uses Python identifier DTC_CONNECTOR
    __DTC_CONNECTOR = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DTC-CONNECTOR'), 'DTC_CONNECTOR', '__DTC_CONNECTORS_DTC_CONNECTOR', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1022, 0), )

    
    DTC_CONNECTOR = property(__DTC_CONNECTOR.value, __DTC_CONNECTOR.set, None, None)

    _ElementMap.update({
        __DTC_CONNECTOR.name() : __DTC_CONNECTOR
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DTC-CONNECTORS', DTC_CONNECTORS)


# Complex type DTC-DOPS with content type ELEMENT_ONLY
class DTC_DOPS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DTC-DOPS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DTC-DOPS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1040, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DTC-DOP uses Python identifier DTC_DOP
    __DTC_DOP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DTC-DOP'), 'DTC_DOP', '__DTC_DOPS_DTC_DOP', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1043, 0), )

    
    DTC_DOP = property(__DTC_DOP.value, __DTC_DOP.set, None, None)

    _ElementMap.update({
        __DTC_DOP.name() : __DTC_DOP
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DTC-DOPS', DTC_DOPS)


# Complex type DTCS with content type ELEMENT_ONLY
class DTCS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DTCS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DTCS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1046, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DTC-REF uses Python identifier DTC_REF
    __DTC_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DTC-REF'), 'DTC_REF', '__DTCS_DTC_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3735, 0), )

    
    DTC_REF = property(__DTC_REF.value, __DTC_REF.set, None, None)

    
    # Element DTC uses Python identifier DTC
    __DTC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DTC'), 'DTC', '__DTCS_DTC', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3736, 0), )

    
    DTC = property(__DTC.value, __DTC.set, None, None)

    _ElementMap.update({
        __DTC_REF.name() : __DTC_REF,
        __DTC.name() : __DTC
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DTCS', DTCS)


# Complex type DTC-VALUE with content type SIMPLE
class DTC_VALUE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DTC-VALUE with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.unsignedInt
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DTC-VALUE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1052, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.unsignedInt
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DTC-VALUE', DTC_VALUE)


# Complex type DTC-VALUES with content type ELEMENT_ONLY
class DTC_VALUES (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DTC-VALUES with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DTC-VALUES')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1058, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DTC-VALUE uses Python identifier DTC_VALUE
    __DTC_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DTC-VALUE'), 'DTC_VALUE', '__DTC_VALUES_DTC_VALUE', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1061, 0), )

    
    DTC_VALUE = property(__DTC_VALUE.value, __DTC_VALUE.set, None, None)

    _ElementMap.update({
        __DTC_VALUE.name() : __DTC_VALUE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DTC-VALUES', DTC_VALUES)


# Complex type DYNAMIC-ENDMARKER-FIELDS with content type ELEMENT_ONLY
class DYNAMIC_ENDMARKER_FIELDS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DYNAMIC-ENDMARKER-FIELDS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DYNAMIC-ENDMARKER-FIELDS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1080, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DYNAMIC-ENDMARKERFIELD uses Python identifier DYNAMIC_ENDMARKERFIELD
    __DYNAMIC_ENDMARKERFIELD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DYNAMIC-ENDMARKERFIELD'), 'DYNAMIC_ENDMARKERFIELD', '__DYNAMIC_ENDMARKER_FIELDS_DYNAMIC_ENDMARKERFIELD', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1083, 0), )

    
    DYNAMIC_ENDMARKERFIELD = property(__DYNAMIC_ENDMARKERFIELD.value, __DYNAMIC_ENDMARKERFIELD.set, None, None)

    _ElementMap.update({
        __DYNAMIC_ENDMARKERFIELD.name() : __DYNAMIC_ENDMARKERFIELD
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DYNAMIC-ENDMARKER-FIELDS', DYNAMIC_ENDMARKER_FIELDS)


# Complex type DYNAMIC-LENGTH-FIELDS with content type ELEMENT_ONLY
class DYNAMIC_LENGTH_FIELDS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DYNAMIC-LENGTH-FIELDS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DYNAMIC-LENGTH-FIELDS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1097, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DYNAMIC-LENGTHFIELD uses Python identifier DYNAMIC_LENGTHFIELD
    __DYNAMIC_LENGTHFIELD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DYNAMIC-LENGTHFIELD'), 'DYNAMIC_LENGTHFIELD', '__DYNAMIC_LENGTH_FIELDS_DYNAMIC_LENGTHFIELD', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1100, 0), )

    
    DYNAMIC_LENGTHFIELD = property(__DYNAMIC_LENGTHFIELD.value, __DYNAMIC_LENGTHFIELD.set, None, None)

    _ElementMap.update({
        __DYNAMIC_LENGTHFIELD.name() : __DYNAMIC_LENGTHFIELD
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DYNAMIC-LENGTH-FIELDS', DYNAMIC_LENGTH_FIELDS)


# Complex type DYN-DEFINED-SPEC with content type ELEMENT_ONLY
class DYN_DEFINED_SPEC (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DYN-DEFINED-SPEC with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DYN-DEFINED-SPEC')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1103, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DYN-ID-DEF-MODE-INFOS uses Python identifier DYN_ID_DEF_MODE_INFOS
    __DYN_ID_DEF_MODE_INFOS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DYN-ID-DEF-MODE-INFOS'), 'DYN_ID_DEF_MODE_INFOS', '__DYN_DEFINED_SPEC_DYN_ID_DEF_MODE_INFOS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1106, 0), )

    
    DYN_ID_DEF_MODE_INFOS = property(__DYN_ID_DEF_MODE_INFOS.value, __DYN_ID_DEF_MODE_INFOS.set, None, None)

    _ElementMap.update({
        __DYN_ID_DEF_MODE_INFOS.name() : __DYN_ID_DEF_MODE_INFOS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DYN-DEFINED-SPEC', DYN_DEFINED_SPEC)


# Complex type DYN-ID-DEF-MODE-INFO with content type ELEMENT_ONLY
class DYN_ID_DEF_MODE_INFO (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DYN-ID-DEF-MODE-INFO with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DYN-ID-DEF-MODE-INFO')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1116, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DEF-MODE uses Python identifier DEF_MODE
    __DEF_MODE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DEF-MODE'), 'DEF_MODE', '__DYN_ID_DEF_MODE_INFO_DEF_MODE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1119, 0), )

    
    DEF_MODE = property(__DEF_MODE.value, __DEF_MODE.set, None, None)

    
    # Element CLEAR-DYN-DEF-MESSAGE-REF uses Python identifier CLEAR_DYN_DEF_MESSAGE_REF
    __CLEAR_DYN_DEF_MESSAGE_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CLEAR-DYN-DEF-MESSAGE-REF'), 'CLEAR_DYN_DEF_MESSAGE_REF', '__DYN_ID_DEF_MODE_INFO_CLEAR_DYN_DEF_MESSAGE_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1121, 0), )

    
    CLEAR_DYN_DEF_MESSAGE_REF = property(__CLEAR_DYN_DEF_MESSAGE_REF.value, __CLEAR_DYN_DEF_MESSAGE_REF.set, None, None)

    
    # Element CLEAR-DYN-DEF-MESSAGE-SNREF uses Python identifier CLEAR_DYN_DEF_MESSAGE_SNREF
    __CLEAR_DYN_DEF_MESSAGE_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CLEAR-DYN-DEF-MESSAGE-SNREF'), 'CLEAR_DYN_DEF_MESSAGE_SNREF', '__DYN_ID_DEF_MODE_INFO_CLEAR_DYN_DEF_MESSAGE_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1122, 0), )

    
    CLEAR_DYN_DEF_MESSAGE_SNREF = property(__CLEAR_DYN_DEF_MESSAGE_SNREF.value, __CLEAR_DYN_DEF_MESSAGE_SNREF.set, None, None)

    
    # Element READ-DYN-DEF-MESSAGE-REF uses Python identifier READ_DYN_DEF_MESSAGE_REF
    __READ_DYN_DEF_MESSAGE_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'READ-DYN-DEF-MESSAGE-REF'), 'READ_DYN_DEF_MESSAGE_REF', '__DYN_ID_DEF_MODE_INFO_READ_DYN_DEF_MESSAGE_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1125, 0), )

    
    READ_DYN_DEF_MESSAGE_REF = property(__READ_DYN_DEF_MESSAGE_REF.value, __READ_DYN_DEF_MESSAGE_REF.set, None, None)

    
    # Element READ-DYN-DEF-MESSAGE-SNREF uses Python identifier READ_DYN_DEF_MESSAGE_SNREF
    __READ_DYN_DEF_MESSAGE_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'READ-DYN-DEF-MESSAGE-SNREF'), 'READ_DYN_DEF_MESSAGE_SNREF', '__DYN_ID_DEF_MODE_INFO_READ_DYN_DEF_MESSAGE_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1126, 0), )

    
    READ_DYN_DEF_MESSAGE_SNREF = property(__READ_DYN_DEF_MESSAGE_SNREF.value, __READ_DYN_DEF_MESSAGE_SNREF.set, None, None)

    
    # Element DYN-DEF-MESSAGE-REF uses Python identifier DYN_DEF_MESSAGE_REF
    __DYN_DEF_MESSAGE_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DYN-DEF-MESSAGE-REF'), 'DYN_DEF_MESSAGE_REF', '__DYN_ID_DEF_MODE_INFO_DYN_DEF_MESSAGE_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1129, 0), )

    
    DYN_DEF_MESSAGE_REF = property(__DYN_DEF_MESSAGE_REF.value, __DYN_DEF_MESSAGE_REF.set, None, None)

    
    # Element DYN-DEF-MESSAGE-SNREF uses Python identifier DYN_DEF_MESSAGE_SNREF
    __DYN_DEF_MESSAGE_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DYN-DEF-MESSAGE-SNREF'), 'DYN_DEF_MESSAGE_SNREF', '__DYN_ID_DEF_MODE_INFO_DYN_DEF_MESSAGE_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1130, 0), )

    
    DYN_DEF_MESSAGE_SNREF = property(__DYN_DEF_MESSAGE_SNREF.value, __DYN_DEF_MESSAGE_SNREF.set, None, None)

    
    # Element SUPPORTED-DYN-IDS uses Python identifier SUPPORTED_DYN_IDS
    __SUPPORTED_DYN_IDS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SUPPORTED-DYN-IDS'), 'SUPPORTED_DYN_IDS', '__DYN_ID_DEF_MODE_INFO_SUPPORTED_DYN_IDS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1132, 0), )

    
    SUPPORTED_DYN_IDS = property(__SUPPORTED_DYN_IDS.value, __SUPPORTED_DYN_IDS.set, None, None)

    
    # Element SELECTION-TABLE-REFS uses Python identifier SELECTION_TABLE_REFS
    __SELECTION_TABLE_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SELECTION-TABLE-REFS'), 'SELECTION_TABLE_REFS', '__DYN_ID_DEF_MODE_INFO_SELECTION_TABLE_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1133, 0), )

    
    SELECTION_TABLE_REFS = property(__SELECTION_TABLE_REFS.value, __SELECTION_TABLE_REFS.set, None, None)

    _ElementMap.update({
        __DEF_MODE.name() : __DEF_MODE,
        __CLEAR_DYN_DEF_MESSAGE_REF.name() : __CLEAR_DYN_DEF_MESSAGE_REF,
        __CLEAR_DYN_DEF_MESSAGE_SNREF.name() : __CLEAR_DYN_DEF_MESSAGE_SNREF,
        __READ_DYN_DEF_MESSAGE_REF.name() : __READ_DYN_DEF_MESSAGE_REF,
        __READ_DYN_DEF_MESSAGE_SNREF.name() : __READ_DYN_DEF_MESSAGE_SNREF,
        __DYN_DEF_MESSAGE_REF.name() : __DYN_DEF_MESSAGE_REF,
        __DYN_DEF_MESSAGE_SNREF.name() : __DYN_DEF_MESSAGE_SNREF,
        __SUPPORTED_DYN_IDS.name() : __SUPPORTED_DYN_IDS,
        __SELECTION_TABLE_REFS.name() : __SELECTION_TABLE_REFS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DYN-ID-DEF-MODE-INFO', DYN_ID_DEF_MODE_INFO)


# Complex type DYN-ID-DEF-MODE-INFOS with content type ELEMENT_ONLY
class DYN_ID_DEF_MODE_INFOS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DYN-ID-DEF-MODE-INFOS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DYN-ID-DEF-MODE-INFOS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1136, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DYN-ID-DEF-MODEINFO uses Python identifier DYN_ID_DEF_MODEINFO
    __DYN_ID_DEF_MODEINFO = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DYN-ID-DEF-MODEINFO'), 'DYN_ID_DEF_MODEINFO', '__DYN_ID_DEF_MODE_INFOS_DYN_ID_DEF_MODEINFO', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1139, 0), )

    
    DYN_ID_DEF_MODEINFO = property(__DYN_ID_DEF_MODEINFO.value, __DYN_ID_DEF_MODEINFO.set, None, None)

    _ElementMap.update({
        __DYN_ID_DEF_MODEINFO.name() : __DYN_ID_DEF_MODEINFO
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DYN-ID-DEF-MODE-INFOS', DYN_ID_DEF_MODE_INFOS)


# Complex type ECU-GROUP with content type ELEMENT_ONLY
class ECU_GROUP (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ECU-GROUP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ECU-GROUP')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1155, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element GROUP-MEMBERS uses Python identifier GROUP_MEMBERS
    __GROUP_MEMBERS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'GROUP-MEMBERS'), 'GROUP_MEMBERS', '__ECU_GROUP_GROUP_MEMBERS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1159, 0), )

    
    GROUP_MEMBERS = property(__GROUP_MEMBERS.value, __GROUP_MEMBERS.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__ECU_GROUP_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__ECU_GROUP_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__ECU_GROUP_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__ECU_GROUP_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1161, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1161, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __GROUP_MEMBERS.name() : __GROUP_MEMBERS,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'ECU-GROUP', ECU_GROUP)


# Complex type ECU-GROUPS with content type ELEMENT_ONLY
class ECU_GROUPS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ECU-GROUPS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ECU-GROUPS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1163, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ECU-GROUP uses Python identifier ECU_GROUP
    __ECU_GROUP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ECU-GROUP'), 'ECU_GROUP', '__ECU_GROUPS_ECU_GROUP', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1166, 0), )

    
    ECU_GROUP = property(__ECU_GROUP.value, __ECU_GROUP.set, None, None)

    _ElementMap.update({
        __ECU_GROUP.name() : __ECU_GROUP
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ECU-GROUPS', ECU_GROUPS)


# Complex type ECU-MEM with content type ELEMENT_ONLY
class ECU_MEM (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ECU-MEM with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ECU-MEM')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1169, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ADMIN-DATA uses Python identifier ADMIN_DATA
    __ADMIN_DATA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), 'ADMIN_DATA', '__ECU_MEM_ADMIN_DATA', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1173, 0), )

    
    ADMIN_DATA = property(__ADMIN_DATA.value, __ADMIN_DATA.set, None, None)

    
    # Element MEM uses Python identifier MEM
    __MEM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MEM'), 'MEM', '__ECU_MEM_MEM', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1174, 0), )

    
    MEM = property(__MEM.value, __MEM.set, None, None)

    
    # Element PHYS-MEM uses Python identifier PHYS_MEM
    __PHYS_MEM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PHYS-MEM'), 'PHYS_MEM', '__ECU_MEM_PHYS_MEM', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1175, 0), )

    
    PHYS_MEM = property(__PHYS_MEM.value, __PHYS_MEM.set, None, None)

    
    # Element SDGS uses Python identifier SDGS
    __SDGS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDGS'), 'SDGS', '__ECU_MEM_SDGS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1176, 0), )

    
    SDGS = property(__SDGS.value, __SDGS.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__ECU_MEM_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__ECU_MEM_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__ECU_MEM_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__ECU_MEM_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1178, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1178, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__ECU_MEM_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1179, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1179, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __ADMIN_DATA.name() : __ADMIN_DATA,
        __MEM.name() : __MEM,
        __PHYS_MEM.name() : __PHYS_MEM,
        __SDGS.name() : __SDGS,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'ECU-MEM', ECU_MEM)


# Complex type ECU-MEM-CONNECTOR with content type ELEMENT_ONLY
class ECU_MEM_CONNECTOR (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ECU-MEM-CONNECTOR with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ECU-MEM-CONNECTOR')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1181, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ADMIN-DATA uses Python identifier ADMIN_DATA
    __ADMIN_DATA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), 'ADMIN_DATA', '__ECU_MEM_CONNECTOR_ADMIN_DATA', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1185, 0), )

    
    ADMIN_DATA = property(__ADMIN_DATA.value, __ADMIN_DATA.set, None, None)

    
    # Element FLASH-CLASSS uses Python identifier FLASH_CLASSS
    __FLASH_CLASSS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FLASH-CLASSS'), 'FLASH_CLASSS', '__ECU_MEM_CONNECTOR_FLASH_CLASSS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1186, 0), )

    
    FLASH_CLASSS = property(__FLASH_CLASSS.value, __FLASH_CLASSS.set, None, None)

    
    # Element SESSION-DESCS uses Python identifier SESSION_DESCS
    __SESSION_DESCS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SESSION-DESCS'), 'SESSION_DESCS', '__ECU_MEM_CONNECTOR_SESSION_DESCS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1187, 0), )

    
    SESSION_DESCS = property(__SESSION_DESCS.value, __SESSION_DESCS.set, None, None)

    
    # Element IDENT-DESCS uses Python identifier IDENT_DESCS
    __IDENT_DESCS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IDENT-DESCS'), 'IDENT_DESCS', '__ECU_MEM_CONNECTOR_IDENT_DESCS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1188, 0), )

    
    IDENT_DESCS = property(__IDENT_DESCS.value, __IDENT_DESCS.set, None, None)

    
    # Element ECU-MEM-REF uses Python identifier ECU_MEM_REF
    __ECU_MEM_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ECU-MEM-REF'), 'ECU_MEM_REF', '__ECU_MEM_CONNECTOR_ECU_MEM_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1189, 0), )

    
    ECU_MEM_REF = property(__ECU_MEM_REF.value, __ECU_MEM_REF.set, None, None)

    
    # Element LAYER-REFS uses Python identifier LAYER_REFS
    __LAYER_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LAYER-REFS'), 'LAYER_REFS', '__ECU_MEM_CONNECTOR_LAYER_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1190, 0), )

    
    LAYER_REFS = property(__LAYER_REFS.value, __LAYER_REFS.set, None, None)

    
    # Element ALL-VARIANT-REFS uses Python identifier ALL_VARIANT_REFS
    __ALL_VARIANT_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ALL-VARIANT-REFS'), 'ALL_VARIANT_REFS', '__ECU_MEM_CONNECTOR_ALL_VARIANT_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1191, 0), )

    
    ALL_VARIANT_REFS = property(__ALL_VARIANT_REFS.value, __ALL_VARIANT_REFS.set, None, None)

    
    # Element SDGS uses Python identifier SDGS
    __SDGS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDGS'), 'SDGS', '__ECU_MEM_CONNECTOR_SDGS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1192, 0), )

    
    SDGS = property(__SDGS.value, __SDGS.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__ECU_MEM_CONNECTOR_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__ECU_MEM_CONNECTOR_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__ECU_MEM_CONNECTOR_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__ECU_MEM_CONNECTOR_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1194, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1194, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__ECU_MEM_CONNECTOR_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1195, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1195, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __ADMIN_DATA.name() : __ADMIN_DATA,
        __FLASH_CLASSS.name() : __FLASH_CLASSS,
        __SESSION_DESCS.name() : __SESSION_DESCS,
        __IDENT_DESCS.name() : __IDENT_DESCS,
        __ECU_MEM_REF.name() : __ECU_MEM_REF,
        __LAYER_REFS.name() : __LAYER_REFS,
        __ALL_VARIANT_REFS.name() : __ALL_VARIANT_REFS,
        __SDGS.name() : __SDGS,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'ECU-MEM-CONNECTOR', ECU_MEM_CONNECTOR)


# Complex type ECU-MEM-CONNECTORS with content type ELEMENT_ONLY
class ECU_MEM_CONNECTORS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ECU-MEM-CONNECTORS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ECU-MEM-CONNECTORS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1197, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ECU-MEM-CONNECTOR uses Python identifier ECU_MEM_CONNECTOR
    __ECU_MEM_CONNECTOR = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ECU-MEM-CONNECTOR'), 'ECU_MEM_CONNECTOR', '__ECU_MEM_CONNECTORS_ECU_MEM_CONNECTOR', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1200, 0), )

    
    ECU_MEM_CONNECTOR = property(__ECU_MEM_CONNECTOR.value, __ECU_MEM_CONNECTOR.set, None, None)

    _ElementMap.update({
        __ECU_MEM_CONNECTOR.name() : __ECU_MEM_CONNECTOR
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ECU-MEM-CONNECTORS', ECU_MEM_CONNECTORS)


# Complex type ECU-MEMS with content type ELEMENT_ONLY
class ECU_MEMS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ECU-MEMS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ECU-MEMS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1203, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ECU-MEM uses Python identifier ECU_MEM
    __ECU_MEM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ECU-MEM'), 'ECU_MEM', '__ECU_MEMS_ECU_MEM', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1206, 0), )

    
    ECU_MEM = property(__ECU_MEM.value, __ECU_MEM.set, None, None)

    _ElementMap.update({
        __ECU_MEM.name() : __ECU_MEM
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ECU-MEMS', ECU_MEMS)


# Complex type ECU-PROXY-REFS with content type ELEMENT_ONLY
class ECU_PROXY_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ECU-PROXY-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ECU-PROXY-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1215, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ECU-PROXY-REF uses Python identifier ECU_PROXY_REF
    __ECU_PROXY_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ECU-PROXY-REF'), 'ECU_PROXY_REF', '__ECU_PROXY_REFS_ECU_PROXY_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1218, 0), )

    
    ECU_PROXY_REF = property(__ECU_PROXY_REF.value, __ECU_PROXY_REF.set, None, None)

    _ElementMap.update({
        __ECU_PROXY_REF.name() : __ECU_PROXY_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ECU-PROXY-REFS', ECU_PROXY_REFS)


# Complex type ECU-SHARED-DATAS with content type ELEMENT_ONLY
class ECU_SHARED_DATAS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ECU-SHARED-DATAS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ECU-SHARED-DATAS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1238, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ECU-SHARED-DATA uses Python identifier ECU_SHARED_DATA
    __ECU_SHARED_DATA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ECU-SHARED-DATA'), 'ECU_SHARED_DATA', '__ECU_SHARED_DATAS_ECU_SHARED_DATA', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1241, 0), )

    
    ECU_SHARED_DATA = property(__ECU_SHARED_DATA.value, __ECU_SHARED_DATA.set, None, None)

    _ElementMap.update({
        __ECU_SHARED_DATA.name() : __ECU_SHARED_DATA
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ECU-SHARED-DATAS', ECU_SHARED_DATAS)


# Complex type ECU-VARIANT-PATTERN with content type ELEMENT_ONLY
class ECU_VARIANT_PATTERN (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ECU-VARIANT-PATTERN with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ECU-VARIANT-PATTERN')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1259, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element MATCHING-PARAMETERS uses Python identifier MATCHING_PARAMETERS
    __MATCHING_PARAMETERS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MATCHING-PARAMETERS'), 'MATCHING_PARAMETERS', '__ECU_VARIANT_PATTERN_MATCHING_PARAMETERS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1262, 0), )

    
    MATCHING_PARAMETERS = property(__MATCHING_PARAMETERS.value, __MATCHING_PARAMETERS.set, None, None)

    _ElementMap.update({
        __MATCHING_PARAMETERS.name() : __MATCHING_PARAMETERS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ECU-VARIANT-PATTERN', ECU_VARIANT_PATTERN)


# Complex type ECU-VARIANT-PATTERNS with content type ELEMENT_ONLY
class ECU_VARIANT_PATTERNS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ECU-VARIANT-PATTERNS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ECU-VARIANT-PATTERNS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1265, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ECU-VARIANT-PATTERN uses Python identifier ECU_VARIANT_PATTERN
    __ECU_VARIANT_PATTERN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ECU-VARIANT-PATTERN'), 'ECU_VARIANT_PATTERN', '__ECU_VARIANT_PATTERNS_ECU_VARIANT_PATTERN', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1268, 0), )

    
    ECU_VARIANT_PATTERN = property(__ECU_VARIANT_PATTERN.value, __ECU_VARIANT_PATTERN.set, None, None)

    _ElementMap.update({
        __ECU_VARIANT_PATTERN.name() : __ECU_VARIANT_PATTERN
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ECU-VARIANT-PATTERNS', ECU_VARIANT_PATTERNS)


# Complex type ECU-VARIANT-REFS with content type ELEMENT_ONLY
class ECU_VARIANT_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ECU-VARIANT-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ECU-VARIANT-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1271, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ECU-VARIANT-REF uses Python identifier ECU_VARIANT_REF
    __ECU_VARIANT_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ECU-VARIANT-REF'), 'ECU_VARIANT_REF', '__ECU_VARIANT_REFS_ECU_VARIANT_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1274, 0), )

    
    ECU_VARIANT_REF = property(__ECU_VARIANT_REF.value, __ECU_VARIANT_REF.set, None, None)

    _ElementMap.update({
        __ECU_VARIANT_REF.name() : __ECU_VARIANT_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ECU-VARIANT-REFS', ECU_VARIANT_REFS)


# Complex type ECU-VARIANTS with content type ELEMENT_ONLY
class ECU_VARIANTS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ECU-VARIANTS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ECU-VARIANTS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1277, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ECU-VARIANT uses Python identifier ECU_VARIANT
    __ECU_VARIANT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ECU-VARIANT'), 'ECU_VARIANT', '__ECU_VARIANTS_ECU_VARIANT', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1280, 0), )

    
    ECU_VARIANT = property(__ECU_VARIANT.value, __ECU_VARIANT.set, None, None)

    _ElementMap.update({
        __ECU_VARIANT.name() : __ECU_VARIANT
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ECU-VARIANTS', ECU_VARIANTS)


# Complex type ECU-VARIANT-SNREFS with content type ELEMENT_ONLY
class ECU_VARIANT_SNREFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ECU-VARIANT-SNREFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ECU-VARIANT-SNREFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1283, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ECU-VARIANT-SNREF uses Python identifier ECU_VARIANT_SNREF
    __ECU_VARIANT_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ECU-VARIANT-SNREF'), 'ECU_VARIANT_SNREF', '__ECU_VARIANT_SNREFS_ECU_VARIANT_SNREF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1286, 0), )

    
    ECU_VARIANT_SNREF = property(__ECU_VARIANT_SNREF.value, __ECU_VARIANT_SNREF.set, None, None)

    _ElementMap.update({
        __ECU_VARIANT_SNREF.name() : __ECU_VARIANT_SNREF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ECU-VARIANT-SNREFS', ECU_VARIANT_SNREFS)


# Complex type ENABLED-AUDIENCE-REFS with content type ELEMENT_ONLY
class ENABLED_AUDIENCE_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ENABLED-AUDIENCE-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ENABLED-AUDIENCE-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1289, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ENABLED-AUDIENCE-REF uses Python identifier ENABLED_AUDIENCE_REF
    __ENABLED_AUDIENCE_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ENABLED-AUDIENCE-REF'), 'ENABLED_AUDIENCE_REF', '__ENABLED_AUDIENCE_REFS_ENABLED_AUDIENCE_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1292, 0), )

    
    ENABLED_AUDIENCE_REF = property(__ENABLED_AUDIENCE_REF.value, __ENABLED_AUDIENCE_REF.set, None, None)

    _ElementMap.update({
        __ENABLED_AUDIENCE_REF.name() : __ENABLED_AUDIENCE_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ENABLED-AUDIENCE-REFS', ENABLED_AUDIENCE_REFS)


# Complex type END-OF-PDU-FIELDS with content type ELEMENT_ONLY
class END_OF_PDU_FIELDS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type END-OF-PDU-FIELDS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'END-OF-PDU-FIELDS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1335, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element END-OF-PDU-FIELD uses Python identifier END_OF_PDU_FIELD
    __END_OF_PDU_FIELD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'END-OF-PDU-FIELD'), 'END_OF_PDU_FIELD', '__END_OF_PDU_FIELDS_END_OF_PDU_FIELD', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1338, 0), )

    
    END_OF_PDU_FIELD = property(__END_OF_PDU_FIELD.value, __END_OF_PDU_FIELD.set, None, None)

    _ElementMap.update({
        __END_OF_PDU_FIELD.name() : __END_OF_PDU_FIELD
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'END-OF-PDU-FIELDS', END_OF_PDU_FIELDS)


# Complex type ENV-DATA-CONNECTOR with content type ELEMENT_ONLY
class ENV_DATA_CONNECTOR (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ENV-DATA-CONNECTOR with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ENV-DATA-CONNECTOR')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1352, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ENV-DATA-DESC-REF uses Python identifier ENV_DATA_DESC_REF
    __ENV_DATA_DESC_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ENV-DATA-DESC-REF'), 'ENV_DATA_DESC_REF', '__ENV_DATA_CONNECTOR_ENV_DATA_DESC_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1356, 0), )

    
    ENV_DATA_DESC_REF = property(__ENV_DATA_DESC_REF.value, __ENV_DATA_DESC_REF.set, None, None)

    
    # Element ENV-DATA-SNREF uses Python identifier ENV_DATA_SNREF
    __ENV_DATA_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ENV-DATA-SNREF'), 'ENV_DATA_SNREF', '__ENV_DATA_CONNECTOR_ENV_DATA_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1357, 0), )

    
    ENV_DATA_SNREF = property(__ENV_DATA_SNREF.value, __ENV_DATA_SNREF.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__ENV_DATA_CONNECTOR_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__ENV_DATA_CONNECTOR_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__ENV_DATA_CONNECTOR_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    _ElementMap.update({
        __ENV_DATA_DESC_REF.name() : __ENV_DATA_DESC_REF,
        __ENV_DATA_SNREF.name() : __ENV_DATA_SNREF,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ENV-DATA-CONNECTOR', ENV_DATA_CONNECTOR)


# Complex type ENV-DATA-CONNECTORS with content type ELEMENT_ONLY
class ENV_DATA_CONNECTORS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ENV-DATA-CONNECTORS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ENV-DATA-CONNECTORS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1360, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ENV-DATA-CONNECTOR uses Python identifier ENV_DATA_CONNECTOR
    __ENV_DATA_CONNECTOR = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ENV-DATA-CONNECTOR'), 'ENV_DATA_CONNECTOR', '__ENV_DATA_CONNECTORS_ENV_DATA_CONNECTOR', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1363, 0), )

    
    ENV_DATA_CONNECTOR = property(__ENV_DATA_CONNECTOR.value, __ENV_DATA_CONNECTOR.set, None, None)

    _ElementMap.update({
        __ENV_DATA_CONNECTOR.name() : __ENV_DATA_CONNECTOR
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ENV-DATA-CONNECTORS', ENV_DATA_CONNECTORS)


# Complex type ENV-DATA-DESCS with content type ELEMENT_ONLY
class ENV_DATA_DESCS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ENV-DATA-DESCS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ENV-DATA-DESCS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1380, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ENV-DATA-DESC uses Python identifier ENV_DATA_DESC
    __ENV_DATA_DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ENV-DATA-DESC'), 'ENV_DATA_DESC', '__ENV_DATA_DESCS_ENV_DATA_DESC', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1383, 0), )

    
    ENV_DATA_DESC = property(__ENV_DATA_DESC.value, __ENV_DATA_DESC.set, None, None)

    _ElementMap.update({
        __ENV_DATA_DESC.name() : __ENV_DATA_DESC
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ENV-DATA-DESCS', ENV_DATA_DESCS)


# Complex type ENV-DATA-REFS with content type ELEMENT_ONLY
class ENV_DATA_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ENV-DATA-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ENV-DATA-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1386, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ENV-DATA-REF uses Python identifier ENV_DATA_REF
    __ENV_DATA_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ENV-DATA-REF'), 'ENV_DATA_REF', '__ENV_DATA_REFS_ENV_DATA_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1389, 0), )

    
    ENV_DATA_REF = property(__ENV_DATA_REF.value, __ENV_DATA_REF.set, None, None)

    _ElementMap.update({
        __ENV_DATA_REF.name() : __ENV_DATA_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ENV-DATA-REFS', ENV_DATA_REFS)


# Complex type ENV-DATAS with content type ELEMENT_ONLY
class ENV_DATAS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ENV-DATAS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ENV-DATAS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1392, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ENV-DATA uses Python identifier ENV_DATA
    __ENV_DATA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ENV-DATA'), 'ENV_DATA', '__ENV_DATAS_ENV_DATA', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1395, 0), )

    
    ENV_DATA = property(__ENV_DATA.value, __ENV_DATA.set, None, None)

    _ElementMap.update({
        __ENV_DATA.name() : __ENV_DATA
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ENV-DATAS', ENV_DATAS)


# Complex type EXPECTED-IDENT with content type ELEMENT_ONLY
class EXPECTED_IDENT (pyxb.binding.basis.complexTypeDefinition):
    """Complex type EXPECTED-IDENT with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EXPECTED-IDENT')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1398, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element IDENT-VALUES uses Python identifier IDENT_VALUES
    __IDENT_VALUES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IDENT-VALUES'), 'IDENT_VALUES', '__EXPECTED_IDENT_IDENT_VALUES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1402, 0), )

    
    IDENT_VALUES = property(__IDENT_VALUES.value, __IDENT_VALUES.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__EXPECTED_IDENT_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__EXPECTED_IDENT_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__EXPECTED_IDENT_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__EXPECTED_IDENT_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1404, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1404, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__EXPECTED_IDENT_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1405, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1405, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __IDENT_VALUES.name() : __IDENT_VALUES,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'EXPECTED-IDENT', EXPECTED_IDENT)


# Complex type EXPECTED-IDENTS with content type ELEMENT_ONLY
class EXPECTED_IDENTS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type EXPECTED-IDENTS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EXPECTED-IDENTS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1407, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element EXPECTED-IDENT uses Python identifier EXPECTED_IDENT
    __EXPECTED_IDENT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EXPECTED-IDENT'), 'EXPECTED_IDENT', '__EXPECTED_IDENTS_EXPECTED_IDENT', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1410, 0), )

    
    EXPECTED_IDENT = property(__EXPECTED_IDENT.value, __EXPECTED_IDENT.set, None, None)

    _ElementMap.update({
        __EXPECTED_IDENT.name() : __EXPECTED_IDENT
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'EXPECTED-IDENTS', EXPECTED_IDENTS)


# Complex type EXTERNAL-ACCESS-METHOD with content type ELEMENT_ONLY
class EXTERNAL_ACCESS_METHOD (pyxb.binding.basis.complexTypeDefinition):
    """Complex type EXTERNAL-ACCESS-METHOD with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EXTERNAL-ACCESS-METHOD')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1413, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element METHOD uses Python identifier METHOD
    __METHOD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'METHOD'), 'METHOD', '__EXTERNAL_ACCESS_METHOD_METHOD', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1417, 0), )

    
    METHOD = property(__METHOD.value, __METHOD.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__EXTERNAL_ACCESS_METHOD_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__EXTERNAL_ACCESS_METHOD_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__EXTERNAL_ACCESS_METHOD_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__EXTERNAL_ACCESS_METHOD_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1419, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1419, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__EXTERNAL_ACCESS_METHOD_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1420, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1420, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __METHOD.name() : __METHOD,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'EXTERNAL-ACCESS-METHOD', EXTERNAL_ACCESS_METHOD)


# Complex type EXTERNAL-DOC with content type SIMPLE
class EXTERNAL_DOC (pyxb.binding.basis.complexTypeDefinition):
    """Complex type EXTERNAL-DOC with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EXTERNAL-DOC')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1422, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute HREF uses Python identifier HREF
    __HREF = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'HREF'), 'HREF', '__EXTERNAL_DOC_HREF', pyxb.binding.datatypes.anyURI, required=True)
    __HREF._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1426, 0)
    __HREF._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1426, 0)
    
    HREF = property(__HREF.value, __HREF.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __HREF.name() : __HREF
    })
Namespace.addCategoryObject('typeBinding', 'EXTERNAL-DOC', EXTERNAL_DOC)


# Complex type EXTERNAL-DOCS with content type ELEMENT_ONLY
class EXTERNAL_DOCS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type EXTERNAL-DOCS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EXTERNAL-DOCS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1430, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element EXTERNAL-DOC uses Python identifier EXTERNAL_DOC
    __EXTERNAL_DOC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EXTERNAL-DOC'), 'EXTERNAL_DOC', '__EXTERNAL_DOCS_EXTERNAL_DOC', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1433, 0), )

    
    EXTERNAL_DOC = property(__EXTERNAL_DOC.value, __EXTERNAL_DOC.set, None, None)

    _ElementMap.update({
        __EXTERNAL_DOC.name() : __EXTERNAL_DOC
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'EXTERNAL-DOCS', EXTERNAL_DOCS)


# Complex type FILTER with content type ELEMENT_ONLY
class FILTER (pyxb.binding.basis.complexTypeDefinition):
    """Complex type FILTER with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FILTER')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1464, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element FILTER-START uses Python identifier FILTER_START
    __FILTER_START = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FILTER-START'), 'FILTER_START', '__FILTER_FILTER_START', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1467, 0), )

    
    FILTER_START = property(__FILTER_START.value, __FILTER_START.set, None, None)

    _ElementMap.update({
        __FILTER_START.name() : __FILTER_START
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'FILTER', FILTER)


# Complex type FILTERS with content type ELEMENT_ONLY
class FILTERS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type FILTERS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FILTERS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1470, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element FILTER uses Python identifier FILTER
    __FILTER = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FILTER'), 'FILTER', '__FILTERS_FILTER', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1473, 0), )

    
    FILTER = property(__FILTER.value, __FILTER.set, None, None)

    _ElementMap.update({
        __FILTER.name() : __FILTER
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'FILTERS', FILTERS)


# Complex type FLASH-CLASS with content type ELEMENT_ONLY
class FLASH_CLASS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type FLASH-CLASS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FLASH-CLASS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1489, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__FLASH_CLASS_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__FLASH_CLASS_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__FLASH_CLASS_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__FLASH_CLASS_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1494, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1494, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__FLASH_CLASS_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1495, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1495, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'FLASH-CLASS', FLASH_CLASS)


# Complex type FLASH-CLASS-REFS with content type ELEMENT_ONLY
class FLASH_CLASS_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type FLASH-CLASS-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FLASH-CLASS-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1497, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element FLASH-CLASS-REF uses Python identifier FLASH_CLASS_REF
    __FLASH_CLASS_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FLASH-CLASS-REF'), 'FLASH_CLASS_REF', '__FLASH_CLASS_REFS_FLASH_CLASS_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1500, 0), )

    
    FLASH_CLASS_REF = property(__FLASH_CLASS_REF.value, __FLASH_CLASS_REF.set, None, None)

    _ElementMap.update({
        __FLASH_CLASS_REF.name() : __FLASH_CLASS_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'FLASH-CLASS-REFS', FLASH_CLASS_REFS)


# Complex type FLASH-CLASSS with content type ELEMENT_ONLY
class FLASH_CLASSS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type FLASH-CLASSS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FLASH-CLASSS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1503, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element FLASH-CLASS uses Python identifier FLASH_CLASS
    __FLASH_CLASS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FLASH-CLASS'), 'FLASH_CLASS', '__FLASH_CLASSS_FLASH_CLASS', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1506, 0), )

    
    FLASH_CLASS = property(__FLASH_CLASS.value, __FLASH_CLASS.set, None, None)

    _ElementMap.update({
        __FLASH_CLASS.name() : __FLASH_CLASS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'FLASH-CLASSS', FLASH_CLASSS)


# Complex type FLASHDATA with content type ELEMENT_ONLY
class FLASHDATA (pyxb.binding.basis.complexTypeDefinition):
    """Complex type FLASHDATA with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FLASHDATA')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1509, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SIZE-LENGTH uses Python identifier SIZE_LENGTH
    __SIZE_LENGTH = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SIZE-LENGTH'), 'SIZE_LENGTH', '__FLASHDATA_SIZE_LENGTH', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1513, 0), )

    
    SIZE_LENGTH = property(__SIZE_LENGTH.value, __SIZE_LENGTH.set, None, None)

    
    # Element ADDRESS-LENGTH uses Python identifier ADDRESS_LENGTH
    __ADDRESS_LENGTH = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ADDRESS-LENGTH'), 'ADDRESS_LENGTH', '__FLASHDATA_ADDRESS_LENGTH', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1514, 0), )

    
    ADDRESS_LENGTH = property(__ADDRESS_LENGTH.value, __ADDRESS_LENGTH.set, None, None)

    
    # Element DATAFORMAT uses Python identifier DATAFORMAT
    __DATAFORMAT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DATAFORMAT'), 'DATAFORMAT', '__FLASHDATA_DATAFORMAT', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1515, 0), )

    
    DATAFORMAT = property(__DATAFORMAT.value, __DATAFORMAT.set, None, None)

    
    # Element ENCRYPT-COMPRESS-METHOD uses Python identifier ENCRYPT_COMPRESS_METHOD
    __ENCRYPT_COMPRESS_METHOD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ENCRYPT-COMPRESS-METHOD'), 'ENCRYPT_COMPRESS_METHOD', '__FLASHDATA_ENCRYPT_COMPRESS_METHOD', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1516, 0), )

    
    ENCRYPT_COMPRESS_METHOD = property(__ENCRYPT_COMPRESS_METHOD.value, __ENCRYPT_COMPRESS_METHOD.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__FLASHDATA_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__FLASHDATA_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__FLASHDATA_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__FLASHDATA_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1518, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1518, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__FLASHDATA_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1519, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1519, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __SIZE_LENGTH.name() : __SIZE_LENGTH,
        __ADDRESS_LENGTH.name() : __ADDRESS_LENGTH,
        __DATAFORMAT.name() : __DATAFORMAT,
        __ENCRYPT_COMPRESS_METHOD.name() : __ENCRYPT_COMPRESS_METHOD,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'FLASHDATA', FLASHDATA)


# Complex type FLASHDATAS with content type ELEMENT_ONLY
class FLASHDATAS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type FLASHDATAS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FLASHDATAS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1521, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element FLASHDATA uses Python identifier FLASHDATA
    __FLASHDATA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FLASHDATA'), 'FLASHDATA', '__FLASHDATAS_FLASHDATA', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1524, 0), )

    
    FLASHDATA = property(__FLASHDATA.value, __FLASHDATA.set, None, None)

    _ElementMap.update({
        __FLASHDATA.name() : __FLASHDATA
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'FLASHDATAS', FLASHDATAS)


# Complex type FUNCT-CLASS with content type ELEMENT_ONLY
class FUNCT_CLASS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type FUNCT-CLASS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FUNCT-CLASS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1527, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ADMIN-DATA uses Python identifier ADMIN_DATA
    __ADMIN_DATA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), 'ADMIN_DATA', '__FUNCT_CLASS_ADMIN_DATA', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1531, 0), )

    
    ADMIN_DATA = property(__ADMIN_DATA.value, __ADMIN_DATA.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__FUNCT_CLASS_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__FUNCT_CLASS_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__FUNCT_CLASS_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__FUNCT_CLASS_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1533, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1533, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__FUNCT_CLASS_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1534, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1534, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __ADMIN_DATA.name() : __ADMIN_DATA,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'FUNCT-CLASS', FUNCT_CLASS)


# Complex type FUNCT-CLASS-REFS with content type ELEMENT_ONLY
class FUNCT_CLASS_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type FUNCT-CLASS-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FUNCT-CLASS-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1536, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element FUNCT-CLASS-REF uses Python identifier FUNCT_CLASS_REF
    __FUNCT_CLASS_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASS-REF'), 'FUNCT_CLASS_REF', '__FUNCT_CLASS_REFS_FUNCT_CLASS_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1539, 0), )

    
    FUNCT_CLASS_REF = property(__FUNCT_CLASS_REF.value, __FUNCT_CLASS_REF.set, None, None)

    _ElementMap.update({
        __FUNCT_CLASS_REF.name() : __FUNCT_CLASS_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'FUNCT-CLASS-REFS', FUNCT_CLASS_REFS)


# Complex type FUNCT-CLASSS with content type ELEMENT_ONLY
class FUNCT_CLASSS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type FUNCT-CLASSS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FUNCT-CLASSS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1542, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element FUNCT-CLASS uses Python identifier FUNCT_CLASS
    __FUNCT_CLASS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASS'), 'FUNCT_CLASS', '__FUNCT_CLASSS_FUNCT_CLASS', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1545, 0), )

    
    FUNCT_CLASS = property(__FUNCT_CLASS.value, __FUNCT_CLASS.set, None, None)

    _ElementMap.update({
        __FUNCT_CLASS.name() : __FUNCT_CLASS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'FUNCT-CLASSS', FUNCT_CLASSS)


# Complex type FUNCTIONAL-GROUPS with content type ELEMENT_ONLY
class FUNCTIONAL_GROUPS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type FUNCTIONAL-GROUPS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FUNCTIONAL-GROUPS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1566, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element FUNCTIONAL-GROUP uses Python identifier FUNCTIONAL_GROUP
    __FUNCTIONAL_GROUP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FUNCTIONAL-GROUP'), 'FUNCTIONAL_GROUP', '__FUNCTIONAL_GROUPS_FUNCTIONAL_GROUP', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1569, 0), )

    
    FUNCTIONAL_GROUP = property(__FUNCTIONAL_GROUP.value, __FUNCTIONAL_GROUP.set, None, None)

    _ElementMap.update({
        __FUNCTIONAL_GROUP.name() : __FUNCTIONAL_GROUP
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'FUNCTIONAL-GROUPS', FUNCTIONAL_GROUPS)


# Complex type FUNCTION-DIAG-COMM-CONNECTOR with content type ELEMENT_ONLY
class FUNCTION_DIAG_COMM_CONNECTOR (pyxb.binding.basis.complexTypeDefinition):
    """Complex type FUNCTION-DIAG-COMM-CONNECTOR with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FUNCTION-DIAG-COMM-CONNECTOR')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1572, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element LOGICAL-LINK-REF uses Python identifier LOGICAL_LINK_REF
    __LOGICAL_LINK_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LOGICAL-LINK-REF'), 'LOGICAL_LINK_REF', '__FUNCTION_DIAG_COMM_CONNECTOR_LOGICAL_LINK_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1575, 0), )

    
    LOGICAL_LINK_REF = property(__LOGICAL_LINK_REF.value, __LOGICAL_LINK_REF.set, None, None)

    
    # Element DIAG-COMM-REF uses Python identifier DIAG_COMM_REF
    __DIAG_COMM_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-REF'), 'DIAG_COMM_REF', '__FUNCTION_DIAG_COMM_CONNECTOR_DIAG_COMM_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1576, 0), )

    
    DIAG_COMM_REF = property(__DIAG_COMM_REF.value, __DIAG_COMM_REF.set, None, None)

    _ElementMap.update({
        __LOGICAL_LINK_REF.name() : __LOGICAL_LINK_REF,
        __DIAG_COMM_REF.name() : __DIAG_COMM_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'FUNCTION-DIAG-COMM-CONNECTOR', FUNCTION_DIAG_COMM_CONNECTOR)


# Complex type FUNCTION-DIAG-COMM-CONNECTORS with content type ELEMENT_ONLY
class FUNCTION_DIAG_COMM_CONNECTORS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type FUNCTION-DIAG-COMM-CONNECTORS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FUNCTION-DIAG-COMM-CONNECTORS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1579, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element FUNCTIONDIAG-COMM-CONNECTOR uses Python identifier FUNCTIONDIAG_COMM_CONNECTOR
    __FUNCTIONDIAG_COMM_CONNECTOR = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FUNCTIONDIAG-COMM-CONNECTOR'), 'FUNCTIONDIAG_COMM_CONNECTOR', '__FUNCTION_DIAG_COMM_CONNECTORS_FUNCTIONDIAG_COMM_CONNECTOR', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1582, 0), )

    
    FUNCTIONDIAG_COMM_CONNECTOR = property(__FUNCTIONDIAG_COMM_CONNECTOR.value, __FUNCTIONDIAG_COMM_CONNECTOR.set, None, None)

    _ElementMap.update({
        __FUNCTIONDIAG_COMM_CONNECTOR.name() : __FUNCTIONDIAG_COMM_CONNECTOR
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'FUNCTION-DIAG-COMM-CONNECTORS', FUNCTION_DIAG_COMM_CONNECTORS)


# Complex type FUNCTION-IN-PARAM with content type ELEMENT_ONLY
class FUNCTION_IN_PARAM (pyxb.binding.basis.complexTypeDefinition):
    """Complex type FUNCTION-IN-PARAM with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FUNCTION-IN-PARAM')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1599, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element UNIT-REF uses Python identifier UNIT_REF
    __UNIT_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UNIT-REF'), 'UNIT_REF', '__FUNCTION_IN_PARAM_UNIT_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1603, 0), )

    
    UNIT_REF = property(__UNIT_REF.value, __UNIT_REF.set, None, None)

    
    # Element PHYSICAL-TYPE uses Python identifier PHYSICAL_TYPE
    __PHYSICAL_TYPE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PHYSICAL-TYPE'), 'PHYSICAL_TYPE', '__FUNCTION_IN_PARAM_PHYSICAL_TYPE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1604, 0), )

    
    PHYSICAL_TYPE = property(__PHYSICAL_TYPE.value, __PHYSICAL_TYPE.set, None, None)

    
    # Element IN-PARAM-IF-SNREF uses Python identifier IN_PARAM_IF_SNREF
    __IN_PARAM_IF_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNREF'), 'IN_PARAM_IF_SNREF', '__FUNCTION_IN_PARAM_IN_PARAM_IF_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1605, 0), )

    
    IN_PARAM_IF_SNREF = property(__IN_PARAM_IF_SNREF.value, __IN_PARAM_IF_SNREF.set, None, None)

    
    # Element FUNCTION-DIAG-COMMCONNECTOR uses Python identifier FUNCTION_DIAG_COMMCONNECTOR
    __FUNCTION_DIAG_COMMCONNECTOR = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FUNCTION-DIAG-COMMCONNECTOR'), 'FUNCTION_DIAG_COMMCONNECTOR', '__FUNCTION_IN_PARAM_FUNCTION_DIAG_COMMCONNECTOR', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1606, 0), )

    
    FUNCTION_DIAG_COMMCONNECTOR = property(__FUNCTION_DIAG_COMMCONNECTOR.value, __FUNCTION_DIAG_COMMCONNECTOR.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__FUNCTION_IN_PARAM_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__FUNCTION_IN_PARAM_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__FUNCTION_IN_PARAM_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    _ElementMap.update({
        __UNIT_REF.name() : __UNIT_REF,
        __PHYSICAL_TYPE.name() : __PHYSICAL_TYPE,
        __IN_PARAM_IF_SNREF.name() : __IN_PARAM_IF_SNREF,
        __FUNCTION_DIAG_COMMCONNECTOR.name() : __FUNCTION_DIAG_COMMCONNECTOR,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'FUNCTION-IN-PARAM', FUNCTION_IN_PARAM)


# Complex type FUNCTION-IN-PARAMS with content type ELEMENT_ONLY
class FUNCTION_IN_PARAMS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type FUNCTION-IN-PARAMS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FUNCTION-IN-PARAMS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1609, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element FUNCTION-IN-PARAM uses Python identifier FUNCTION_IN_PARAM
    __FUNCTION_IN_PARAM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FUNCTION-IN-PARAM'), 'FUNCTION_IN_PARAM', '__FUNCTION_IN_PARAMS_FUNCTION_IN_PARAM', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1612, 0), )

    
    FUNCTION_IN_PARAM = property(__FUNCTION_IN_PARAM.value, __FUNCTION_IN_PARAM.set, None, None)

    _ElementMap.update({
        __FUNCTION_IN_PARAM.name() : __FUNCTION_IN_PARAM
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'FUNCTION-IN-PARAMS', FUNCTION_IN_PARAMS)


# Complex type FUNCTION-NODE-GROUPS with content type ELEMENT_ONLY
class FUNCTION_NODE_GROUPS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type FUNCTION-NODE-GROUPS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FUNCTION-NODE-GROUPS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1637, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element FUNCTION-NODE-GROUP uses Python identifier FUNCTION_NODE_GROUP
    __FUNCTION_NODE_GROUP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FUNCTION-NODE-GROUP'), 'FUNCTION_NODE_GROUP', '__FUNCTION_NODE_GROUPS_FUNCTION_NODE_GROUP', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1640, 0), )

    
    FUNCTION_NODE_GROUP = property(__FUNCTION_NODE_GROUP.value, __FUNCTION_NODE_GROUP.set, None, None)

    _ElementMap.update({
        __FUNCTION_NODE_GROUP.name() : __FUNCTION_NODE_GROUP
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'FUNCTION-NODE-GROUPS', FUNCTION_NODE_GROUPS)


# Complex type FUNCTION-NODE-REFS with content type ELEMENT_ONLY
class FUNCTION_NODE_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type FUNCTION-NODE-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FUNCTION-NODE-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1643, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element FUNCTION-NODE-REF uses Python identifier FUNCTION_NODE_REF
    __FUNCTION_NODE_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FUNCTION-NODE-REF'), 'FUNCTION_NODE_REF', '__FUNCTION_NODE_REFS_FUNCTION_NODE_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1646, 0), )

    
    FUNCTION_NODE_REF = property(__FUNCTION_NODE_REF.value, __FUNCTION_NODE_REF.set, None, None)

    _ElementMap.update({
        __FUNCTION_NODE_REF.name() : __FUNCTION_NODE_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'FUNCTION-NODE-REFS', FUNCTION_NODE_REFS)


# Complex type FUNCTION-NODES with content type ELEMENT_ONLY
class FUNCTION_NODES (pyxb.binding.basis.complexTypeDefinition):
    """Complex type FUNCTION-NODES with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FUNCTION-NODES')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1649, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element FUNCTION-NODE uses Python identifier FUNCTION_NODE
    __FUNCTION_NODE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FUNCTION-NODE'), 'FUNCTION_NODE', '__FUNCTION_NODES_FUNCTION_NODE', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1652, 0), )

    
    FUNCTION_NODE = property(__FUNCTION_NODE.value, __FUNCTION_NODE.set, None, None)

    _ElementMap.update({
        __FUNCTION_NODE.name() : __FUNCTION_NODE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'FUNCTION-NODES', FUNCTION_NODES)


# Complex type FUNCTION-OUT-PARAM with content type ELEMENT_ONLY
class FUNCTION_OUT_PARAM (pyxb.binding.basis.complexTypeDefinition):
    """Complex type FUNCTION-OUT-PARAM with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FUNCTION-OUT-PARAM')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1655, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element UNIT-REF uses Python identifier UNIT_REF
    __UNIT_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UNIT-REF'), 'UNIT_REF', '__FUNCTION_OUT_PARAM_UNIT_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1659, 0), )

    
    UNIT_REF = property(__UNIT_REF.value, __UNIT_REF.set, None, None)

    
    # Element PHYSICAL-TYPE uses Python identifier PHYSICAL_TYPE
    __PHYSICAL_TYPE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PHYSICAL-TYPE'), 'PHYSICAL_TYPE', '__FUNCTION_OUT_PARAM_PHYSICAL_TYPE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1660, 0), )

    
    PHYSICAL_TYPE = property(__PHYSICAL_TYPE.value, __PHYSICAL_TYPE.set, None, None)

    
    # Element OUT-PARAM-IF-SNREF uses Python identifier OUT_PARAM_IF_SNREF
    __OUT_PARAM_IF_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNREF'), 'OUT_PARAM_IF_SNREF', '__FUNCTION_OUT_PARAM_OUT_PARAM_IF_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1661, 0), )

    
    OUT_PARAM_IF_SNREF = property(__OUT_PARAM_IF_SNREF.value, __OUT_PARAM_IF_SNREF.set, None, None)

    
    # Element FUNCTION-DIAG-COMMCONNECTOR uses Python identifier FUNCTION_DIAG_COMMCONNECTOR
    __FUNCTION_DIAG_COMMCONNECTOR = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FUNCTION-DIAG-COMMCONNECTOR'), 'FUNCTION_DIAG_COMMCONNECTOR', '__FUNCTION_OUT_PARAM_FUNCTION_DIAG_COMMCONNECTOR', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1662, 0), )

    
    FUNCTION_DIAG_COMMCONNECTOR = property(__FUNCTION_DIAG_COMMCONNECTOR.value, __FUNCTION_DIAG_COMMCONNECTOR.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__FUNCTION_OUT_PARAM_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__FUNCTION_OUT_PARAM_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__FUNCTION_OUT_PARAM_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    _ElementMap.update({
        __UNIT_REF.name() : __UNIT_REF,
        __PHYSICAL_TYPE.name() : __PHYSICAL_TYPE,
        __OUT_PARAM_IF_SNREF.name() : __OUT_PARAM_IF_SNREF,
        __FUNCTION_DIAG_COMMCONNECTOR.name() : __FUNCTION_DIAG_COMMCONNECTOR,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'FUNCTION-OUT-PARAM', FUNCTION_OUT_PARAM)


# Complex type FUNCTION-OUT-PARAMS with content type ELEMENT_ONLY
class FUNCTION_OUT_PARAMS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type FUNCTION-OUT-PARAMS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FUNCTION-OUT-PARAMS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1665, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element FUNCTION-OUT-PARAM uses Python identifier FUNCTION_OUT_PARAM
    __FUNCTION_OUT_PARAM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FUNCTION-OUT-PARAM'), 'FUNCTION_OUT_PARAM', '__FUNCTION_OUT_PARAMS_FUNCTION_OUT_PARAM', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1668, 0), )

    
    FUNCTION_OUT_PARAM = property(__FUNCTION_OUT_PARAM.value, __FUNCTION_OUT_PARAM.set, None, None)

    _ElementMap.update({
        __FUNCTION_OUT_PARAM.name() : __FUNCTION_OUT_PARAM
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'FUNCTION-OUT-PARAMS', FUNCTION_OUT_PARAMS)


# Complex type GATEWAY-LOGICAL-LINK-REFS with content type ELEMENT_ONLY
class GATEWAY_LOGICAL_LINK_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type GATEWAY-LOGICAL-LINK-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GATEWAY-LOGICAL-LINK-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1697, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element GATEWAY-LOGICAL-LINK-REF uses Python identifier GATEWAY_LOGICAL_LINK_REF
    __GATEWAY_LOGICAL_LINK_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'GATEWAY-LOGICAL-LINK-REF'), 'GATEWAY_LOGICAL_LINK_REF', '__GATEWAY_LOGICAL_LINK_REFS_GATEWAY_LOGICAL_LINK_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1700, 0), )

    
    GATEWAY_LOGICAL_LINK_REF = property(__GATEWAY_LOGICAL_LINK_REF.value, __GATEWAY_LOGICAL_LINK_REF.set, None, None)

    _ElementMap.update({
        __GATEWAY_LOGICAL_LINK_REF.name() : __GATEWAY_LOGICAL_LINK_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'GATEWAY-LOGICAL-LINK-REFS', GATEWAY_LOGICAL_LINK_REFS)


# Complex type GLOBAL-NEG-RESPONSES with content type ELEMENT_ONLY
class GLOBAL_NEG_RESPONSES (pyxb.binding.basis.complexTypeDefinition):
    """Complex type GLOBAL-NEG-RESPONSES with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GLOBAL-NEG-RESPONSES')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1709, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element GLOBAL-NEG-RESPONSE uses Python identifier GLOBAL_NEG_RESPONSE
    __GLOBAL_NEG_RESPONSE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'GLOBAL-NEG-RESPONSE'), 'GLOBAL_NEG_RESPONSE', '__GLOBAL_NEG_RESPONSES_GLOBAL_NEG_RESPONSE', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1712, 0), )

    
    GLOBAL_NEG_RESPONSE = property(__GLOBAL_NEG_RESPONSE.value, __GLOBAL_NEG_RESPONSE.set, None, None)

    _ElementMap.update({
        __GLOBAL_NEG_RESPONSE.name() : __GLOBAL_NEG_RESPONSE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'GLOBAL-NEG-RESPONSES', GLOBAL_NEG_RESPONSES)


# Complex type GROUP-MEMBER with content type ELEMENT_ONLY
class GROUP_MEMBER (pyxb.binding.basis.complexTypeDefinition):
    """Complex type GROUP-MEMBER with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GROUP-MEMBER')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1715, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element BASE-VARIANT-REF uses Python identifier BASE_VARIANT_REF
    __BASE_VARIANT_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BASE-VARIANT-REF'), 'BASE_VARIANT_REF', '__GROUP_MEMBER_BASE_VARIANT_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1718, 0), )

    
    BASE_VARIANT_REF = property(__BASE_VARIANT_REF.value, __BASE_VARIANT_REF.set, None, None)

    
    # Element FUNCT-RESOLUTION-LINK-REF uses Python identifier FUNCT_RESOLUTION_LINK_REF
    __FUNCT_RESOLUTION_LINK_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FUNCT-RESOLUTION-LINK-REF'), 'FUNCT_RESOLUTION_LINK_REF', '__GROUP_MEMBER_FUNCT_RESOLUTION_LINK_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1719, 0), )

    
    FUNCT_RESOLUTION_LINK_REF = property(__FUNCT_RESOLUTION_LINK_REF.value, __FUNCT_RESOLUTION_LINK_REF.set, None, None)

    
    # Element PHYS-RESOLUTION-LINK-REF uses Python identifier PHYS_RESOLUTION_LINK_REF
    __PHYS_RESOLUTION_LINK_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PHYS-RESOLUTION-LINK-REF'), 'PHYS_RESOLUTION_LINK_REF', '__GROUP_MEMBER_PHYS_RESOLUTION_LINK_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1720, 0), )

    
    PHYS_RESOLUTION_LINK_REF = property(__PHYS_RESOLUTION_LINK_REF.value, __PHYS_RESOLUTION_LINK_REF.set, None, None)

    _ElementMap.update({
        __BASE_VARIANT_REF.name() : __BASE_VARIANT_REF,
        __FUNCT_RESOLUTION_LINK_REF.name() : __FUNCT_RESOLUTION_LINK_REF,
        __PHYS_RESOLUTION_LINK_REF.name() : __PHYS_RESOLUTION_LINK_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'GROUP-MEMBER', GROUP_MEMBER)


# Complex type GROUP-MEMBERS with content type ELEMENT_ONLY
class GROUP_MEMBERS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type GROUP-MEMBERS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GROUP-MEMBERS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1723, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element GROUP-MEMBER uses Python identifier GROUP_MEMBER
    __GROUP_MEMBER = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'GROUP-MEMBER'), 'GROUP_MEMBER', '__GROUP_MEMBERS_GROUP_MEMBER', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1726, 0), )

    
    GROUP_MEMBER = property(__GROUP_MEMBER.value, __GROUP_MEMBER.set, None, None)

    _ElementMap.update({
        __GROUP_MEMBER.name() : __GROUP_MEMBER
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'GROUP-MEMBERS', GROUP_MEMBERS)


# Complex type IDENT-DESC with content type ELEMENT_ONLY
class IDENT_DESC (pyxb.binding.basis.complexTypeDefinition):
    """Complex type IDENT-DESC with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IDENT-DESC')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1739, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DIAG-COMM-SNREF uses Python identifier DIAG_COMM_SNREF
    __DIAG_COMM_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-SNREF'), 'DIAG_COMM_SNREF', '__IDENT_DESC_DIAG_COMM_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1742, 0), )

    
    DIAG_COMM_SNREF = property(__DIAG_COMM_SNREF.value, __DIAG_COMM_SNREF.set, None, None)

    
    # Element IDENT-IF-SNREF uses Python identifier IDENT_IF_SNREF
    __IDENT_IF_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IDENT-IF-SNREF'), 'IDENT_IF_SNREF', '__IDENT_DESC_IDENT_IF_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1743, 0), )

    
    IDENT_IF_SNREF = property(__IDENT_IF_SNREF.value, __IDENT_IF_SNREF.set, None, None)

    
    # Element OUT-PARAM-IF-SNREF uses Python identifier OUT_PARAM_IF_SNREF
    __OUT_PARAM_IF_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNREF'), 'OUT_PARAM_IF_SNREF', '__IDENT_DESC_OUT_PARAM_IF_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1745, 0), )

    
    OUT_PARAM_IF_SNREF = property(__OUT_PARAM_IF_SNREF.value, __OUT_PARAM_IF_SNREF.set, None, None)

    
    # Element OUT-PARAM-IF-SNPATHREF uses Python identifier OUT_PARAM_IF_SNPATHREF
    __OUT_PARAM_IF_SNPATHREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNPATHREF'), 'OUT_PARAM_IF_SNPATHREF', '__IDENT_DESC_OUT_PARAM_IF_SNPATHREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1746, 0), )

    
    OUT_PARAM_IF_SNPATHREF = property(__OUT_PARAM_IF_SNPATHREF.value, __OUT_PARAM_IF_SNPATHREF.set, None, None)

    _ElementMap.update({
        __DIAG_COMM_SNREF.name() : __DIAG_COMM_SNREF,
        __IDENT_IF_SNREF.name() : __IDENT_IF_SNREF,
        __OUT_PARAM_IF_SNREF.name() : __OUT_PARAM_IF_SNREF,
        __OUT_PARAM_IF_SNPATHREF.name() : __OUT_PARAM_IF_SNPATHREF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'IDENT-DESC', IDENT_DESC)


# Complex type IDENT-DESCS with content type ELEMENT_ONLY
class IDENT_DESCS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type IDENT-DESCS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IDENT-DESCS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1750, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element IDENT-DESC uses Python identifier IDENT_DESC
    __IDENT_DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IDENT-DESC'), 'IDENT_DESC', '__IDENT_DESCS_IDENT_DESC', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1753, 0), )

    
    IDENT_DESC = property(__IDENT_DESC.value, __IDENT_DESC.set, None, None)

    _ElementMap.update({
        __IDENT_DESC.name() : __IDENT_DESC
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'IDENT-DESCS', IDENT_DESCS)


# Complex type IDENT-VALUES with content type ELEMENT_ONLY
class IDENT_VALUES (pyxb.binding.basis.complexTypeDefinition):
    """Complex type IDENT-VALUES with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IDENT-VALUES')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1764, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element IDENT-VALUE uses Python identifier IDENT_VALUE
    __IDENT_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IDENT-VALUE'), 'IDENT_VALUE', '__IDENT_VALUES_IDENT_VALUE', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1767, 0), )

    
    IDENT_VALUE = property(__IDENT_VALUE.value, __IDENT_VALUE.set, None, None)

    _ElementMap.update({
        __IDENT_VALUE.name() : __IDENT_VALUE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'IDENT-VALUES', IDENT_VALUES)


# Complex type IMPORT-REFS with content type ELEMENT_ONLY
class IMPORT_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type IMPORT-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IMPORT-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1777, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element IMPORT-REF uses Python identifier IMPORT_REF
    __IMPORT_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IMPORT-REF'), 'IMPORT_REF', '__IMPORT_REFS_IMPORT_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1780, 0), )

    
    IMPORT_REF = property(__IMPORT_REF.value, __IMPORT_REF.set, None, None)

    _ElementMap.update({
        __IMPORT_REF.name() : __IMPORT_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'IMPORT-REFS', IMPORT_REFS)


# Complex type INFO-COMPONENT with content type ELEMENT_ONLY
class INFO_COMPONENT (pyxb.binding.basis.complexTypeDefinition):
    """Complex type INFO-COMPONENT with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'INFO-COMPONENT')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1783, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element MATCHING-COMPONENTS uses Python identifier MATCHING_COMPONENTS
    __MATCHING_COMPONENTS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MATCHING-COMPONENTS'), 'MATCHING_COMPONENTS', '__INFO_COMPONENT_MATCHING_COMPONENTS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1787, 0), )

    
    MATCHING_COMPONENTS = property(__MATCHING_COMPONENTS.value, __MATCHING_COMPONENTS.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__INFO_COMPONENT_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__INFO_COMPONENT_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__INFO_COMPONENT_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__INFO_COMPONENT_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1789, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1789, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__INFO_COMPONENT_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1790, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1790, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __MATCHING_COMPONENTS.name() : __MATCHING_COMPONENTS,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'INFO-COMPONENT', INFO_COMPONENT)


# Complex type INFO-COMPONENT-REFS with content type ELEMENT_ONLY
class INFO_COMPONENT_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type INFO-COMPONENT-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'INFO-COMPONENT-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1792, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element INFO-COMPONENT-REF uses Python identifier INFO_COMPONENT_REF
    __INFO_COMPONENT_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'INFO-COMPONENT-REF'), 'INFO_COMPONENT_REF', '__INFO_COMPONENT_REFS_INFO_COMPONENT_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1795, 0), )

    
    INFO_COMPONENT_REF = property(__INFO_COMPONENT_REF.value, __INFO_COMPONENT_REF.set, None, None)

    _ElementMap.update({
        __INFO_COMPONENT_REF.name() : __INFO_COMPONENT_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'INFO-COMPONENT-REFS', INFO_COMPONENT_REFS)


# Complex type INFO-COMPONENTS with content type ELEMENT_ONLY
class INFO_COMPONENTS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type INFO-COMPONENTS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'INFO-COMPONENTS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1798, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element INFO-COMPONENT uses Python identifier INFO_COMPONENT
    __INFO_COMPONENT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'INFO-COMPONENT'), 'INFO_COMPONENT', '__INFO_COMPONENTS_INFO_COMPONENT', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1801, 0), )

    
    INFO_COMPONENT = property(__INFO_COMPONENT.value, __INFO_COMPONENT.set, None, None)

    _ElementMap.update({
        __INFO_COMPONENT.name() : __INFO_COMPONENT
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'INFO-COMPONENTS', INFO_COMPONENTS)


# Complex type IN-PARAM-IF-REFS with content type ELEMENT_ONLY
class IN_PARAM_IF_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type IN-PARAM-IF-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IN-PARAM-IF-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1804, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element IN-PARAM-IF-SNREF uses Python identifier IN_PARAM_IF_SNREF
    __IN_PARAM_IF_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNREF'), 'IN_PARAM_IF_SNREF', '__IN_PARAM_IF_REFS_IN_PARAM_IF_SNREF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1807, 0), )

    
    IN_PARAM_IF_SNREF = property(__IN_PARAM_IF_SNREF.value, __IN_PARAM_IF_SNREF.set, None, None)

    
    # Element IN-PARAM-IF-SNPATHREF uses Python identifier IN_PARAM_IF_SNPATHREF
    __IN_PARAM_IF_SNPATHREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNPATHREF'), 'IN_PARAM_IF_SNPATHREF', '__IN_PARAM_IF_REFS_IN_PARAM_IF_SNPATHREF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1808, 0), )

    
    IN_PARAM_IF_SNPATHREF = property(__IN_PARAM_IF_SNPATHREF.value, __IN_PARAM_IF_SNPATHREF.set, None, None)

    _ElementMap.update({
        __IN_PARAM_IF_SNREF.name() : __IN_PARAM_IF_SNREF,
        __IN_PARAM_IF_SNPATHREF.name() : __IN_PARAM_IF_SNPATHREF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'IN-PARAM-IF-REFS', IN_PARAM_IF_REFS)


# Complex type INPUT-PARAM with content type ELEMENT_ONLY
class INPUT_PARAM (pyxb.binding.basis.complexTypeDefinition):
    """Complex type INPUT-PARAM with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'INPUT-PARAM')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1811, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PHYSICAL-DEFAULT-VALUE uses Python identifier PHYSICAL_DEFAULT_VALUE
    __PHYSICAL_DEFAULT_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PHYSICAL-DEFAULT-VALUE'), 'PHYSICAL_DEFAULT_VALUE', '__INPUT_PARAM_PHYSICAL_DEFAULT_VALUE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1815, 0), )

    
    PHYSICAL_DEFAULT_VALUE = property(__PHYSICAL_DEFAULT_VALUE.value, __PHYSICAL_DEFAULT_VALUE.set, None, None)

    
    # Element DOP-BASE-REF uses Python identifier DOP_BASE_REF
    __DOP_BASE_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DOP-BASE-REF'), 'DOP_BASE_REF', '__INPUT_PARAM_DOP_BASE_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1816, 0), )

    
    DOP_BASE_REF = property(__DOP_BASE_REF.value, __DOP_BASE_REF.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__INPUT_PARAM_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__INPUT_PARAM_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__INPUT_PARAM_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__INPUT_PARAM_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1818, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1818, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    
    # Attribute SEMANTIC uses Python identifier SEMANTIC
    __SEMANTIC = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SEMANTIC'), 'SEMANTIC', '__INPUT_PARAM_SEMANTIC', pyxb.binding.datatypes.string)
    __SEMANTIC._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1819, 0)
    __SEMANTIC._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1819, 0)
    
    SEMANTIC = property(__SEMANTIC.value, __SEMANTIC.set, None, None)

    _ElementMap.update({
        __PHYSICAL_DEFAULT_VALUE.name() : __PHYSICAL_DEFAULT_VALUE,
        __DOP_BASE_REF.name() : __DOP_BASE_REF,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __OID.name() : __OID,
        __SEMANTIC.name() : __SEMANTIC
    })
Namespace.addCategoryObject('typeBinding', 'INPUT-PARAM', INPUT_PARAM)


# Complex type INPUT-PARAMS with content type ELEMENT_ONLY
class INPUT_PARAMS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type INPUT-PARAMS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'INPUT-PARAMS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1821, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element INPUT-PARAM uses Python identifier INPUT_PARAM
    __INPUT_PARAM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'INPUT-PARAM'), 'INPUT_PARAM', '__INPUT_PARAMS_INPUT_PARAM', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1824, 0), )

    
    INPUT_PARAM = property(__INPUT_PARAM.value, __INPUT_PARAM.set, None, None)

    _ElementMap.update({
        __INPUT_PARAM.name() : __INPUT_PARAM
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'INPUT-PARAMS', INPUT_PARAMS)


# Complex type INTERNAL-CONSTR with content type ELEMENT_ONLY
class INTERNAL_CONSTR (pyxb.binding.basis.complexTypeDefinition):
    """Complex type INTERNAL-CONSTR with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'INTERNAL-CONSTR')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1827, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element LOWER-LIMIT uses Python identifier LOWER_LIMIT
    __LOWER_LIMIT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LOWER-LIMIT'), 'LOWER_LIMIT', '__INTERNAL_CONSTR_LOWER_LIMIT', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1830, 0), )

    
    LOWER_LIMIT = property(__LOWER_LIMIT.value, __LOWER_LIMIT.set, None, None)

    
    # Element UPPER-LIMIT uses Python identifier UPPER_LIMIT
    __UPPER_LIMIT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UPPER-LIMIT'), 'UPPER_LIMIT', '__INTERNAL_CONSTR_UPPER_LIMIT', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1831, 0), )

    
    UPPER_LIMIT = property(__UPPER_LIMIT.value, __UPPER_LIMIT.set, None, None)

    
    # Element SCALE-CONSTRS uses Python identifier SCALE_CONSTRS
    __SCALE_CONSTRS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SCALE-CONSTRS'), 'SCALE_CONSTRS', '__INTERNAL_CONSTR_SCALE_CONSTRS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1832, 0), )

    
    SCALE_CONSTRS = property(__SCALE_CONSTRS.value, __SCALE_CONSTRS.set, None, None)

    _ElementMap.update({
        __LOWER_LIMIT.name() : __LOWER_LIMIT,
        __UPPER_LIMIT.name() : __UPPER_LIMIT,
        __SCALE_CONSTRS.name() : __SCALE_CONSTRS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'INTERNAL-CONSTR', INTERNAL_CONSTR)


# Complex type ITEM-VALUE with content type ELEMENT_ONLY
class ITEM_VALUE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ITEM-VALUE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ITEM-VALUE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1852, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PHYS-CONSTANT-VALUE uses Python identifier PHYS_CONSTANT_VALUE
    __PHYS_CONSTANT_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PHYS-CONSTANT-VALUE'), 'PHYS_CONSTANT_VALUE', '__ITEM_VALUE_PHYS_CONSTANT_VALUE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1855, 0), )

    
    PHYS_CONSTANT_VALUE = property(__PHYS_CONSTANT_VALUE.value, __PHYS_CONSTANT_VALUE.set, None, None)

    
    # Element MEANING uses Python identifier MEANING
    __MEANING = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MEANING'), 'MEANING', '__ITEM_VALUE_MEANING', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1856, 0), )

    
    MEANING = property(__MEANING.value, __MEANING.set, None, None)

    
    # Element KEY uses Python identifier KEY
    __KEY = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'KEY'), 'KEY', '__ITEM_VALUE_KEY', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1857, 0), )

    
    KEY = property(__KEY.value, __KEY.set, None, None)

    
    # Element RULE uses Python identifier RULE
    __RULE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RULE'), 'RULE', '__ITEM_VALUE_RULE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1858, 0), )

    
    RULE = property(__RULE.value, __RULE.set, None, None)

    
    # Element DESCRIPTION uses Python identifier DESCRIPTION
    __DESCRIPTION = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESCRIPTION'), 'DESCRIPTION', '__ITEM_VALUE_DESCRIPTION', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1859, 0), )

    
    DESCRIPTION = property(__DESCRIPTION.value, __DESCRIPTION.set, None, None)

    
    # Element SDGS uses Python identifier SDGS
    __SDGS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDGS'), 'SDGS', '__ITEM_VALUE_SDGS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1860, 0), )

    
    SDGS = property(__SDGS.value, __SDGS.set, None, None)

    
    # Element AUDIENCE uses Python identifier AUDIENCE
    __AUDIENCE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AUDIENCE'), 'AUDIENCE', '__ITEM_VALUE_AUDIENCE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1861, 0), )

    
    AUDIENCE = property(__AUDIENCE.value, __AUDIENCE.set, None, None)

    _ElementMap.update({
        __PHYS_CONSTANT_VALUE.name() : __PHYS_CONSTANT_VALUE,
        __MEANING.name() : __MEANING,
        __KEY.name() : __KEY,
        __RULE.name() : __RULE,
        __DESCRIPTION.name() : __DESCRIPTION,
        __SDGS.name() : __SDGS,
        __AUDIENCE.name() : __AUDIENCE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ITEM-VALUE', ITEM_VALUE)


# Complex type ITEM-VALUES with content type ELEMENT_ONLY
class ITEM_VALUES (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ITEM-VALUES with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ITEM-VALUES')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1864, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ITEM-VALUE uses Python identifier ITEM_VALUE
    __ITEM_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ITEM-VALUE'), 'ITEM_VALUE', '__ITEM_VALUES_ITEM_VALUE', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1867, 0), )

    
    ITEM_VALUE = property(__ITEM_VALUE.value, __ITEM_VALUE.set, None, None)

    _ElementMap.update({
        __ITEM_VALUE.name() : __ITEM_VALUE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ITEM-VALUES', ITEM_VALUES)


# Complex type LAYER-REFS with content type ELEMENT_ONLY
class LAYER_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type LAYER-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LAYER-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1870, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element LAYER-REF uses Python identifier LAYER_REF
    __LAYER_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LAYER-REF'), 'LAYER_REF', '__LAYER_REFS_LAYER_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1873, 0), )

    
    LAYER_REF = property(__LAYER_REF.value, __LAYER_REF.set, None, None)

    _ElementMap.update({
        __LAYER_REF.name() : __LAYER_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'LAYER-REFS', LAYER_REFS)


# Complex type LIBRARY with content type ELEMENT_ONLY
class LIBRARY (pyxb.binding.basis.complexTypeDefinition):
    """Complex type LIBRARY with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LIBRARY')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1904, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CODE-FILE uses Python identifier CODE_FILE
    __CODE_FILE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CODE-FILE'), 'CODE_FILE', '__LIBRARY_CODE_FILE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1908, 0), )

    
    CODE_FILE = property(__CODE_FILE.value, __CODE_FILE.set, None, None)

    
    # Element ENCRYPTION uses Python identifier ENCRYPTION
    __ENCRYPTION = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ENCRYPTION'), 'ENCRYPTION', '__LIBRARY_ENCRYPTION', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1909, 0), )

    
    ENCRYPTION = property(__ENCRYPTION.value, __ENCRYPTION.set, None, None)

    
    # Element SYNTAX uses Python identifier SYNTAX
    __SYNTAX = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SYNTAX'), 'SYNTAX', '__LIBRARY_SYNTAX', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1910, 0), )

    
    SYNTAX = property(__SYNTAX.value, __SYNTAX.set, None, None)

    
    # Element REVISION uses Python identifier REVISION
    __REVISION = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'REVISION'), 'REVISION', '__LIBRARY_REVISION', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1911, 0), )

    
    REVISION = property(__REVISION.value, __REVISION.set, None, None)

    
    # Element ENTRYPOINT uses Python identifier ENTRYPOINT
    __ENTRYPOINT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ENTRYPOINT'), 'ENTRYPOINT', '__LIBRARY_ENTRYPOINT', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1912, 0), )

    
    ENTRYPOINT = property(__ENTRYPOINT.value, __ENTRYPOINT.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__LIBRARY_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__LIBRARY_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__LIBRARY_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__LIBRARY_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1914, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1914, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__LIBRARY_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1915, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1915, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __CODE_FILE.name() : __CODE_FILE,
        __ENCRYPTION.name() : __ENCRYPTION,
        __SYNTAX.name() : __SYNTAX,
        __REVISION.name() : __REVISION,
        __ENTRYPOINT.name() : __ENTRYPOINT,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'LIBRARY', LIBRARY)


# Complex type LIBRARY-REFS with content type ELEMENT_ONLY
class LIBRARY_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type LIBRARY-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LIBRARY-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1917, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element LIBRARY-REF uses Python identifier LIBRARY_REF
    __LIBRARY_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LIBRARY-REF'), 'LIBRARY_REF', '__LIBRARY_REFS_LIBRARY_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1920, 0), )

    
    LIBRARY_REF = property(__LIBRARY_REF.value, __LIBRARY_REF.set, None, None)

    _ElementMap.update({
        __LIBRARY_REF.name() : __LIBRARY_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'LIBRARY-REFS', LIBRARY_REFS)


# Complex type LIBRARYS with content type ELEMENT_ONLY
class LIBRARYS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type LIBRARYS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LIBRARYS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1923, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element LIBRARY uses Python identifier LIBRARY
    __LIBRARY = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LIBRARY'), 'LIBRARY', '__LIBRARYS_LIBRARY', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1926, 0), )

    
    LIBRARY = property(__LIBRARY.value, __LIBRARY.set, None, None)

    _ElementMap.update({
        __LIBRARY.name() : __LIBRARY
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'LIBRARYS', LIBRARYS)


# Complex type LINK-COMPARAM-REFS with content type ELEMENT_ONLY
class LINK_COMPARAM_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type LINK-COMPARAM-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LINK-COMPARAM-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1948, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element LINK-COMPARAM-REF uses Python identifier LINK_COMPARAM_REF
    __LINK_COMPARAM_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LINK-COMPARAM-REF'), 'LINK_COMPARAM_REF', '__LINK_COMPARAM_REFS_LINK_COMPARAM_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1951, 0), )

    
    LINK_COMPARAM_REF = property(__LINK_COMPARAM_REF.value, __LINK_COMPARAM_REF.set, None, None)

    _ElementMap.update({
        __LINK_COMPARAM_REF.name() : __LINK_COMPARAM_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'LINK-COMPARAM-REFS', LINK_COMPARAM_REFS)


# Complex type LINKED-DTC-DOP with content type ELEMENT_ONLY
class LINKED_DTC_DOP (pyxb.binding.basis.complexTypeDefinition):
    """Complex type LINKED-DTC-DOP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LINKED-DTC-DOP')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1954, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element NOT-INHERITED-DTC-SNREFS uses Python identifier NOT_INHERITED_DTC_SNREFS
    __NOT_INHERITED_DTC_SNREFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-DTC-SNREFS'), 'NOT_INHERITED_DTC_SNREFS', '__LINKED_DTC_DOP_NOT_INHERITED_DTC_SNREFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1957, 0), )

    
    NOT_INHERITED_DTC_SNREFS = property(__NOT_INHERITED_DTC_SNREFS.value, __NOT_INHERITED_DTC_SNREFS.set, None, None)

    
    # Element DTC-DOP-REF uses Python identifier DTC_DOP_REF
    __DTC_DOP_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DTC-DOP-REF'), 'DTC_DOP_REF', '__LINKED_DTC_DOP_DTC_DOP_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1959, 0), )

    
    DTC_DOP_REF = property(__DTC_DOP_REF.value, __DTC_DOP_REF.set, None, None)

    _ElementMap.update({
        __NOT_INHERITED_DTC_SNREFS.name() : __NOT_INHERITED_DTC_SNREFS,
        __DTC_DOP_REF.name() : __DTC_DOP_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'LINKED-DTC-DOP', LINKED_DTC_DOP)


# Complex type LINKED-DTC-DOPS with content type ELEMENT_ONLY
class LINKED_DTC_DOPS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type LINKED-DTC-DOPS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LINKED-DTC-DOPS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1962, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element LINKED-DTC-DOP uses Python identifier LINKED_DTC_DOP
    __LINKED_DTC_DOP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LINKED-DTC-DOP'), 'LINKED_DTC_DOP', '__LINKED_DTC_DOPS_LINKED_DTC_DOP', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1965, 0), )

    
    LINKED_DTC_DOP = property(__LINKED_DTC_DOP.value, __LINKED_DTC_DOP.set, None, None)

    _ElementMap.update({
        __LINKED_DTC_DOP.name() : __LINKED_DTC_DOP
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'LINKED-DTC-DOPS', LINKED_DTC_DOPS)


# Complex type LOGICAL-LINK with content type ELEMENT_ONLY
class LOGICAL_LINK (pyxb.binding.basis.complexTypeDefinition):
    """Complex type LOGICAL-LINK with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LOGICAL-LINK')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1968, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element GATEWAY-LOGICAL-LINK-REFS uses Python identifier GATEWAY_LOGICAL_LINK_REFS
    __GATEWAY_LOGICAL_LINK_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'GATEWAY-LOGICAL-LINK-REFS'), 'GATEWAY_LOGICAL_LINK_REFS', '__LOGICAL_LINK_GATEWAY_LOGICAL_LINK_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1972, 0), )

    
    GATEWAY_LOGICAL_LINK_REFS = property(__GATEWAY_LOGICAL_LINK_REFS.value, __GATEWAY_LOGICAL_LINK_REFS.set, None, None)

    
    # Element PHYSICAL-VEHICLE-LINK-REF uses Python identifier PHYSICAL_VEHICLE_LINK_REF
    __PHYSICAL_VEHICLE_LINK_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PHYSICAL-VEHICLE-LINK-REF'), 'PHYSICAL_VEHICLE_LINK_REF', '__LOGICAL_LINK_PHYSICAL_VEHICLE_LINK_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1974, 0), )

    
    PHYSICAL_VEHICLE_LINK_REF = property(__PHYSICAL_VEHICLE_LINK_REF.value, __PHYSICAL_VEHICLE_LINK_REF.set, None, None)

    
    # Element PROTOCOL-REF uses Python identifier PROTOCOL_REF
    __PROTOCOL_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PROTOCOL-REF'), 'PROTOCOL_REF', '__LOGICAL_LINK_PROTOCOL_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1975, 0), )

    
    PROTOCOL_REF = property(__PROTOCOL_REF.value, __PROTOCOL_REF.set, None, None)

    
    # Element FUNCTIONAL-GROUP-REF uses Python identifier FUNCTIONAL_GROUP_REF
    __FUNCTIONAL_GROUP_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FUNCTIONAL-GROUP-REF'), 'FUNCTIONAL_GROUP_REF', '__LOGICAL_LINK_FUNCTIONAL_GROUP_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1976, 0), )

    
    FUNCTIONAL_GROUP_REF = property(__FUNCTIONAL_GROUP_REF.value, __FUNCTIONAL_GROUP_REF.set, None, None)

    
    # Element BASE-VARIANT-REF uses Python identifier BASE_VARIANT_REF
    __BASE_VARIANT_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BASE-VARIANT-REF'), 'BASE_VARIANT_REF', '__LOGICAL_LINK_BASE_VARIANT_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1977, 0), )

    
    BASE_VARIANT_REF = property(__BASE_VARIANT_REF.value, __BASE_VARIANT_REF.set, None, None)

    
    # Element ECU-PROXY-REFS uses Python identifier ECU_PROXY_REFS
    __ECU_PROXY_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ECU-PROXY-REFS'), 'ECU_PROXY_REFS', '__LOGICAL_LINK_ECU_PROXY_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1978, 0), )

    
    ECU_PROXY_REFS = property(__ECU_PROXY_REFS.value, __ECU_PROXY_REFS.set, None, None)

    
    # Element LINK-COMPARAM-REFS uses Python identifier LINK_COMPARAM_REFS
    __LINK_COMPARAM_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LINK-COMPARAM-REFS'), 'LINK_COMPARAM_REFS', '__LOGICAL_LINK_LINK_COMPARAM_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1979, 0), )

    
    LINK_COMPARAM_REFS = property(__LINK_COMPARAM_REFS.value, __LINK_COMPARAM_REFS.set, None, None)

    
    # Element PROT-STACK-SNREF uses Python identifier PROT_STACK_SNREF
    __PROT_STACK_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PROT-STACK-SNREF'), 'PROT_STACK_SNREF', '__LOGICAL_LINK_PROT_STACK_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1980, 0), )

    
    PROT_STACK_SNREF = property(__PROT_STACK_SNREF.value, __PROT_STACK_SNREF.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__LOGICAL_LINK_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__LOGICAL_LINK_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__LOGICAL_LINK_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__LOGICAL_LINK_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1982, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1982, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__LOGICAL_LINK_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1983, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1983, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __GATEWAY_LOGICAL_LINK_REFS.name() : __GATEWAY_LOGICAL_LINK_REFS,
        __PHYSICAL_VEHICLE_LINK_REF.name() : __PHYSICAL_VEHICLE_LINK_REF,
        __PROTOCOL_REF.name() : __PROTOCOL_REF,
        __FUNCTIONAL_GROUP_REF.name() : __FUNCTIONAL_GROUP_REF,
        __BASE_VARIANT_REF.name() : __BASE_VARIANT_REF,
        __ECU_PROXY_REFS.name() : __ECU_PROXY_REFS,
        __LINK_COMPARAM_REFS.name() : __LINK_COMPARAM_REFS,
        __PROT_STACK_SNREF.name() : __PROT_STACK_SNREF,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'LOGICAL-LINK', LOGICAL_LINK)


# Complex type LOGICAL-LINKS with content type ELEMENT_ONLY
class LOGICAL_LINKS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type LOGICAL-LINKS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LOGICAL-LINKS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1985, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element LOGICAL-LINK uses Python identifier LOGICAL_LINK
    __LOGICAL_LINK = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LOGICAL-LINK'), 'LOGICAL_LINK', '__LOGICAL_LINKS_LOGICAL_LINK', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1988, 0), )

    
    LOGICAL_LINK = property(__LOGICAL_LINK.value, __LOGICAL_LINK.set, None, None)

    _ElementMap.update({
        __LOGICAL_LINK.name() : __LOGICAL_LINK
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'LOGICAL-LINKS', LOGICAL_LINKS)


# Complex type MATCHING-BASE-VARIANT-PARAMETER with content type ELEMENT_ONLY
class MATCHING_BASE_VARIANT_PARAMETER (pyxb.binding.basis.complexTypeDefinition):
    """Complex type MATCHING-BASE-VARIANT-PARAMETER with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MATCHING-BASE-VARIANT-PARAMETER')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1999, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element EXPECTED-VALUE uses Python identifier EXPECTED_VALUE
    __EXPECTED_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EXPECTED-VALUE'), 'EXPECTED_VALUE', '__MATCHING_BASE_VARIANT_PARAMETER_EXPECTED_VALUE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2002, 0), )

    
    EXPECTED_VALUE = property(__EXPECTED_VALUE.value, __EXPECTED_VALUE.set, None, None)

    
    # Element USE-PHYSICAL-ADDRESSING uses Python identifier USE_PHYSICAL_ADDRESSING
    __USE_PHYSICAL_ADDRESSING = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'USE-PHYSICAL-ADDRESSING'), 'USE_PHYSICAL_ADDRESSING', '__MATCHING_BASE_VARIANT_PARAMETER_USE_PHYSICAL_ADDRESSING', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2003, 0), )

    
    USE_PHYSICAL_ADDRESSING = property(__USE_PHYSICAL_ADDRESSING.value, __USE_PHYSICAL_ADDRESSING.set, None, None)

    
    # Element DIAG-COMM-SNREF uses Python identifier DIAG_COMM_SNREF
    __DIAG_COMM_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-SNREF'), 'DIAG_COMM_SNREF', '__MATCHING_BASE_VARIANT_PARAMETER_DIAG_COMM_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2004, 0), )

    
    DIAG_COMM_SNREF = property(__DIAG_COMM_SNREF.value, __DIAG_COMM_SNREF.set, None, None)

    
    # Element OUT-PARAM-IF-SNREF uses Python identifier OUT_PARAM_IF_SNREF
    __OUT_PARAM_IF_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNREF'), 'OUT_PARAM_IF_SNREF', '__MATCHING_BASE_VARIANT_PARAMETER_OUT_PARAM_IF_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2006, 0), )

    
    OUT_PARAM_IF_SNREF = property(__OUT_PARAM_IF_SNREF.value, __OUT_PARAM_IF_SNREF.set, None, None)

    
    # Element OUT-PARAM-IF-SNPATHREF uses Python identifier OUT_PARAM_IF_SNPATHREF
    __OUT_PARAM_IF_SNPATHREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNPATHREF'), 'OUT_PARAM_IF_SNPATHREF', '__MATCHING_BASE_VARIANT_PARAMETER_OUT_PARAM_IF_SNPATHREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2007, 0), )

    
    OUT_PARAM_IF_SNPATHREF = property(__OUT_PARAM_IF_SNPATHREF.value, __OUT_PARAM_IF_SNPATHREF.set, None, None)

    _ElementMap.update({
        __EXPECTED_VALUE.name() : __EXPECTED_VALUE,
        __USE_PHYSICAL_ADDRESSING.name() : __USE_PHYSICAL_ADDRESSING,
        __DIAG_COMM_SNREF.name() : __DIAG_COMM_SNREF,
        __OUT_PARAM_IF_SNREF.name() : __OUT_PARAM_IF_SNREF,
        __OUT_PARAM_IF_SNPATHREF.name() : __OUT_PARAM_IF_SNPATHREF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'MATCHING-BASE-VARIANT-PARAMETER', MATCHING_BASE_VARIANT_PARAMETER)


# Complex type MATCHING-BASE-VARIANT-PARAMETERS with content type ELEMENT_ONLY
class MATCHING_BASE_VARIANT_PARAMETERS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type MATCHING-BASE-VARIANT-PARAMETERS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MATCHING-BASE-VARIANT-PARAMETERS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2011, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element MATCHINGBASE-VARIANT-PARAMETER uses Python identifier MATCHINGBASE_VARIANT_PARAMETER
    __MATCHINGBASE_VARIANT_PARAMETER = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MATCHINGBASE-VARIANT-PARAMETER'), 'MATCHINGBASE_VARIANT_PARAMETER', '__MATCHING_BASE_VARIANT_PARAMETERS_MATCHINGBASE_VARIANT_PARAMETER', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2014, 0), )

    
    MATCHINGBASE_VARIANT_PARAMETER = property(__MATCHINGBASE_VARIANT_PARAMETER.value, __MATCHINGBASE_VARIANT_PARAMETER.set, None, None)

    _ElementMap.update({
        __MATCHINGBASE_VARIANT_PARAMETER.name() : __MATCHINGBASE_VARIANT_PARAMETER
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'MATCHING-BASE-VARIANT-PARAMETERS', MATCHING_BASE_VARIANT_PARAMETERS)


# Complex type MATCHING-COMPONENT with content type ELEMENT_ONLY
class MATCHING_COMPONENT (pyxb.binding.basis.complexTypeDefinition):
    """Complex type MATCHING-COMPONENT with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MATCHING-COMPONENT')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2017, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element EXPECTED-VALUE uses Python identifier EXPECTED_VALUE
    __EXPECTED_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EXPECTED-VALUE'), 'EXPECTED_VALUE', '__MATCHING_COMPONENT_EXPECTED_VALUE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2020, 0), )

    
    EXPECTED_VALUE = property(__EXPECTED_VALUE.value, __EXPECTED_VALUE.set, None, None)

    
    # Element OUT-PARAM-IF-SNREF uses Python identifier OUT_PARAM_IF_SNREF
    __OUT_PARAM_IF_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNREF'), 'OUT_PARAM_IF_SNREF', '__MATCHING_COMPONENT_OUT_PARAM_IF_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2022, 0), )

    
    OUT_PARAM_IF_SNREF = property(__OUT_PARAM_IF_SNREF.value, __OUT_PARAM_IF_SNREF.set, None, None)

    
    # Element OUT-PARAM-IF-SNPATHREF uses Python identifier OUT_PARAM_IF_SNPATHREF
    __OUT_PARAM_IF_SNPATHREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNPATHREF'), 'OUT_PARAM_IF_SNPATHREF', '__MATCHING_COMPONENT_OUT_PARAM_IF_SNPATHREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2023, 0), )

    
    OUT_PARAM_IF_SNPATHREF = property(__OUT_PARAM_IF_SNPATHREF.value, __OUT_PARAM_IF_SNPATHREF.set, None, None)

    
    # Element MULTIPLE-ECU-JOB-REF uses Python identifier MULTIPLE_ECU_JOB_REF
    __MULTIPLE_ECU_JOB_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MULTIPLE-ECU-JOB-REF'), 'MULTIPLE_ECU_JOB_REF', '__MATCHING_COMPONENT_MULTIPLE_ECU_JOB_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2026, 0), )

    
    MULTIPLE_ECU_JOB_REF = property(__MULTIPLE_ECU_JOB_REF.value, __MULTIPLE_ECU_JOB_REF.set, None, None)

    
    # Element DIAG-COMM-REF uses Python identifier DIAG_COMM_REF
    __DIAG_COMM_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-REF'), 'DIAG_COMM_REF', '__MATCHING_COMPONENT_DIAG_COMM_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2027, 0), )

    
    DIAG_COMM_REF = property(__DIAG_COMM_REF.value, __DIAG_COMM_REF.set, None, None)

    _ElementMap.update({
        __EXPECTED_VALUE.name() : __EXPECTED_VALUE,
        __OUT_PARAM_IF_SNREF.name() : __OUT_PARAM_IF_SNREF,
        __OUT_PARAM_IF_SNPATHREF.name() : __OUT_PARAM_IF_SNPATHREF,
        __MULTIPLE_ECU_JOB_REF.name() : __MULTIPLE_ECU_JOB_REF,
        __DIAG_COMM_REF.name() : __DIAG_COMM_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'MATCHING-COMPONENT', MATCHING_COMPONENT)


# Complex type MATCHING-COMPONENTS with content type ELEMENT_ONLY
class MATCHING_COMPONENTS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type MATCHING-COMPONENTS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MATCHING-COMPONENTS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2031, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element MATCHING-COMPONENT uses Python identifier MATCHING_COMPONENT
    __MATCHING_COMPONENT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MATCHING-COMPONENT'), 'MATCHING_COMPONENT', '__MATCHING_COMPONENTS_MATCHING_COMPONENT', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2034, 0), )

    
    MATCHING_COMPONENT = property(__MATCHING_COMPONENT.value, __MATCHING_COMPONENT.set, None, None)

    _ElementMap.update({
        __MATCHING_COMPONENT.name() : __MATCHING_COMPONENT
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'MATCHING-COMPONENTS', MATCHING_COMPONENTS)


# Complex type MATCHING-PARAMETER with content type ELEMENT_ONLY
class MATCHING_PARAMETER (pyxb.binding.basis.complexTypeDefinition):
    """Complex type MATCHING-PARAMETER with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MATCHING-PARAMETER')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2037, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element EXPECTED-VALUE uses Python identifier EXPECTED_VALUE
    __EXPECTED_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EXPECTED-VALUE'), 'EXPECTED_VALUE', '__MATCHING_PARAMETER_EXPECTED_VALUE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2040, 0), )

    
    EXPECTED_VALUE = property(__EXPECTED_VALUE.value, __EXPECTED_VALUE.set, None, None)

    
    # Element DIAG-COMM-SNREF uses Python identifier DIAG_COMM_SNREF
    __DIAG_COMM_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-SNREF'), 'DIAG_COMM_SNREF', '__MATCHING_PARAMETER_DIAG_COMM_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2041, 0), )

    
    DIAG_COMM_SNREF = property(__DIAG_COMM_SNREF.value, __DIAG_COMM_SNREF.set, None, None)

    
    # Element OUT-PARAM-IF-SNREF uses Python identifier OUT_PARAM_IF_SNREF
    __OUT_PARAM_IF_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNREF'), 'OUT_PARAM_IF_SNREF', '__MATCHING_PARAMETER_OUT_PARAM_IF_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2043, 0), )

    
    OUT_PARAM_IF_SNREF = property(__OUT_PARAM_IF_SNREF.value, __OUT_PARAM_IF_SNREF.set, None, None)

    
    # Element OUT-PARAM-IF-SNPATHREF uses Python identifier OUT_PARAM_IF_SNPATHREF
    __OUT_PARAM_IF_SNPATHREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNPATHREF'), 'OUT_PARAM_IF_SNPATHREF', '__MATCHING_PARAMETER_OUT_PARAM_IF_SNPATHREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2044, 0), )

    
    OUT_PARAM_IF_SNPATHREF = property(__OUT_PARAM_IF_SNPATHREF.value, __OUT_PARAM_IF_SNPATHREF.set, None, None)

    _ElementMap.update({
        __EXPECTED_VALUE.name() : __EXPECTED_VALUE,
        __DIAG_COMM_SNREF.name() : __DIAG_COMM_SNREF,
        __OUT_PARAM_IF_SNREF.name() : __OUT_PARAM_IF_SNREF,
        __OUT_PARAM_IF_SNPATHREF.name() : __OUT_PARAM_IF_SNPATHREF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'MATCHING-PARAMETER', MATCHING_PARAMETER)


# Complex type MATCHING-PARAMETERS with content type ELEMENT_ONLY
class MATCHING_PARAMETERS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type MATCHING-PARAMETERS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MATCHING-PARAMETERS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2048, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element MATCHING-PARAMETER uses Python identifier MATCHING_PARAMETER
    __MATCHING_PARAMETER = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MATCHING-PARAMETER'), 'MATCHING_PARAMETER', '__MATCHING_PARAMETERS_MATCHING_PARAMETER', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2051, 0), )

    
    MATCHING_PARAMETER = property(__MATCHING_PARAMETER.value, __MATCHING_PARAMETER.set, None, None)

    _ElementMap.update({
        __MATCHING_PARAMETER.name() : __MATCHING_PARAMETER
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'MATCHING-PARAMETERS', MATCHING_PARAMETERS)


# Complex type MEM with content type ELEMENT_ONLY
class MEM (pyxb.binding.basis.complexTypeDefinition):
    """Complex type MEM with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MEM')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2065, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SESSIONS uses Python identifier SESSIONS
    __SESSIONS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SESSIONS'), 'SESSIONS', '__MEM_SESSIONS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2068, 0), )

    
    SESSIONS = property(__SESSIONS.value, __SESSIONS.set, None, None)

    
    # Element DATABLOCKS uses Python identifier DATABLOCKS
    __DATABLOCKS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DATABLOCKS'), 'DATABLOCKS', '__MEM_DATABLOCKS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2069, 0), )

    
    DATABLOCKS = property(__DATABLOCKS.value, __DATABLOCKS.set, None, None)

    
    # Element FLASHDATAS uses Python identifier FLASHDATAS
    __FLASHDATAS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FLASHDATAS'), 'FLASHDATAS', '__MEM_FLASHDATAS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2070, 0), )

    
    FLASHDATAS = property(__FLASHDATAS.value, __FLASHDATAS.set, None, None)

    _ElementMap.update({
        __SESSIONS.name() : __SESSIONS,
        __DATABLOCKS.name() : __DATABLOCKS,
        __FLASHDATAS.name() : __FLASHDATAS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'MEM', MEM)


# Complex type MODIFICATION with content type ELEMENT_ONLY
class MODIFICATION (pyxb.binding.basis.complexTypeDefinition):
    """Complex type MODIFICATION with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MODIFICATION')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2097, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CHANGE uses Python identifier CHANGE
    __CHANGE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CHANGE'), 'CHANGE', '__MODIFICATION_CHANGE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2100, 0), )

    
    CHANGE = property(__CHANGE.value, __CHANGE.set, None, None)

    
    # Element REASON uses Python identifier REASON
    __REASON = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'REASON'), 'REASON', '__MODIFICATION_REASON', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2101, 0), )

    
    REASON = property(__REASON.value, __REASON.set, None, None)

    _ElementMap.update({
        __CHANGE.name() : __CHANGE,
        __REASON.name() : __REASON
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'MODIFICATION', MODIFICATION)


# Complex type MODIFICATIONS with content type ELEMENT_ONLY
class MODIFICATIONS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type MODIFICATIONS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MODIFICATIONS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2104, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element MODIFICATION uses Python identifier MODIFICATION
    __MODIFICATION = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MODIFICATION'), 'MODIFICATION', '__MODIFICATIONS_MODIFICATION', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2107, 0), )

    
    MODIFICATION = property(__MODIFICATION.value, __MODIFICATION.set, None, None)

    _ElementMap.update({
        __MODIFICATION.name() : __MODIFICATION
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'MODIFICATIONS', MODIFICATIONS)


# Complex type MULTIPLE-ECU-JOB with content type ELEMENT_ONLY
class MULTIPLE_ECU_JOB (pyxb.binding.basis.complexTypeDefinition):
    """Complex type MULTIPLE-ECU-JOB with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MULTIPLE-ECU-JOB')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2110, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ADMIN-DATA uses Python identifier ADMIN_DATA
    __ADMIN_DATA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), 'ADMIN_DATA', '__MULTIPLE_ECU_JOB_ADMIN_DATA', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2114, 0), )

    
    ADMIN_DATA = property(__ADMIN_DATA.value, __ADMIN_DATA.set, None, None)

    
    # Element SDGS uses Python identifier SDGS
    __SDGS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDGS'), 'SDGS', '__MULTIPLE_ECU_JOB_SDGS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2115, 0), )

    
    SDGS = property(__SDGS.value, __SDGS.set, None, None)

    
    # Element FUNCT-CLASS-REFS uses Python identifier FUNCT_CLASS_REFS
    __FUNCT_CLASS_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASS-REFS'), 'FUNCT_CLASS_REFS', '__MULTIPLE_ECU_JOB_FUNCT_CLASS_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2116, 0), )

    
    FUNCT_CLASS_REFS = property(__FUNCT_CLASS_REFS.value, __FUNCT_CLASS_REFS.set, None, None)

    
    # Element PROG-CODES uses Python identifier PROG_CODES
    __PROG_CODES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PROG-CODES'), 'PROG_CODES', '__MULTIPLE_ECU_JOB_PROG_CODES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2117, 0), )

    
    PROG_CODES = property(__PROG_CODES.value, __PROG_CODES.set, None, None)

    
    # Element INPUT-PARAMS uses Python identifier INPUT_PARAMS
    __INPUT_PARAMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'INPUT-PARAMS'), 'INPUT_PARAMS', '__MULTIPLE_ECU_JOB_INPUT_PARAMS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2118, 0), )

    
    INPUT_PARAMS = property(__INPUT_PARAMS.value, __INPUT_PARAMS.set, None, None)

    
    # Element OUTPUT-PARAMS uses Python identifier OUTPUT_PARAMS
    __OUTPUT_PARAMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OUTPUT-PARAMS'), 'OUTPUT_PARAMS', '__MULTIPLE_ECU_JOB_OUTPUT_PARAMS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2119, 0), )

    
    OUTPUT_PARAMS = property(__OUTPUT_PARAMS.value, __OUTPUT_PARAMS.set, None, None)

    
    # Element NEG-OUTPUT-PARAMS uses Python identifier NEG_OUTPUT_PARAMS
    __NEG_OUTPUT_PARAMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NEG-OUTPUT-PARAMS'), 'NEG_OUTPUT_PARAMS', '__MULTIPLE_ECU_JOB_NEG_OUTPUT_PARAMS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2120, 0), )

    
    NEG_OUTPUT_PARAMS = property(__NEG_OUTPUT_PARAMS.value, __NEG_OUTPUT_PARAMS.set, None, None)

    
    # Element DIAG-LAYER-REFS uses Python identifier DIAG_LAYER_REFS
    __DIAG_LAYER_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-LAYER-REFS'), 'DIAG_LAYER_REFS', '__MULTIPLE_ECU_JOB_DIAG_LAYER_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2121, 0), )

    
    DIAG_LAYER_REFS = property(__DIAG_LAYER_REFS.value, __DIAG_LAYER_REFS.set, None, None)

    
    # Element AUDIENCE uses Python identifier AUDIENCE
    __AUDIENCE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AUDIENCE'), 'AUDIENCE', '__MULTIPLE_ECU_JOB_AUDIENCE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2122, 0), )

    
    AUDIENCE = property(__AUDIENCE.value, __AUDIENCE.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__MULTIPLE_ECU_JOB_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__MULTIPLE_ECU_JOB_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__MULTIPLE_ECU_JOB_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__MULTIPLE_ECU_JOB_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2124, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2124, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__MULTIPLE_ECU_JOB_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2125, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2125, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    
    # Attribute SEMANTIC uses Python identifier SEMANTIC
    __SEMANTIC = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SEMANTIC'), 'SEMANTIC', '__MULTIPLE_ECU_JOB_SEMANTIC', pyxb.binding.datatypes.string)
    __SEMANTIC._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2126, 0)
    __SEMANTIC._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2126, 0)
    
    SEMANTIC = property(__SEMANTIC.value, __SEMANTIC.set, None, None)

    
    # Attribute IS-EXECUTABLE uses Python identifier IS_EXECUTABLE
    __IS_EXECUTABLE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IS-EXECUTABLE'), 'IS_EXECUTABLE', '__MULTIPLE_ECU_JOB_IS_EXECUTABLE', pyxb.binding.datatypes.boolean, unicode_default='true')
    __IS_EXECUTABLE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2127, 0)
    __IS_EXECUTABLE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2127, 0)
    
    IS_EXECUTABLE = property(__IS_EXECUTABLE.value, __IS_EXECUTABLE.set, None, None)

    _ElementMap.update({
        __ADMIN_DATA.name() : __ADMIN_DATA,
        __SDGS.name() : __SDGS,
        __FUNCT_CLASS_REFS.name() : __FUNCT_CLASS_REFS,
        __PROG_CODES.name() : __PROG_CODES,
        __INPUT_PARAMS.name() : __INPUT_PARAMS,
        __OUTPUT_PARAMS.name() : __OUTPUT_PARAMS,
        __NEG_OUTPUT_PARAMS.name() : __NEG_OUTPUT_PARAMS,
        __DIAG_LAYER_REFS.name() : __DIAG_LAYER_REFS,
        __AUDIENCE.name() : __AUDIENCE,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID,
        __SEMANTIC.name() : __SEMANTIC,
        __IS_EXECUTABLE.name() : __IS_EXECUTABLE
    })
Namespace.addCategoryObject('typeBinding', 'MULTIPLE-ECU-JOB', MULTIPLE_ECU_JOB)


# Complex type MULTIPLE-ECU-JOB-REFS with content type ELEMENT_ONLY
class MULTIPLE_ECU_JOB_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type MULTIPLE-ECU-JOB-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MULTIPLE-ECU-JOB-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2129, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element MULTIPLE-ECU-JOB-REF uses Python identifier MULTIPLE_ECU_JOB_REF
    __MULTIPLE_ECU_JOB_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MULTIPLE-ECU-JOB-REF'), 'MULTIPLE_ECU_JOB_REF', '__MULTIPLE_ECU_JOB_REFS_MULTIPLE_ECU_JOB_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2132, 0), )

    
    MULTIPLE_ECU_JOB_REF = property(__MULTIPLE_ECU_JOB_REF.value, __MULTIPLE_ECU_JOB_REF.set, None, None)

    _ElementMap.update({
        __MULTIPLE_ECU_JOB_REF.name() : __MULTIPLE_ECU_JOB_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'MULTIPLE-ECU-JOB-REFS', MULTIPLE_ECU_JOB_REFS)


# Complex type MULTIPLE-ECU-JOBS with content type ELEMENT_ONLY
class MULTIPLE_ECU_JOBS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type MULTIPLE-ECU-JOBS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MULTIPLE-ECU-JOBS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2135, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element MULTIPLE-ECU-JOB uses Python identifier MULTIPLE_ECU_JOB
    __MULTIPLE_ECU_JOB = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MULTIPLE-ECU-JOB'), 'MULTIPLE_ECU_JOB', '__MULTIPLE_ECU_JOBS_MULTIPLE_ECU_JOB', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2138, 0), )

    
    MULTIPLE_ECU_JOB = property(__MULTIPLE_ECU_JOB.value, __MULTIPLE_ECU_JOB.set, None, None)

    _ElementMap.update({
        __MULTIPLE_ECU_JOB.name() : __MULTIPLE_ECU_JOB
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'MULTIPLE-ECU-JOBS', MULTIPLE_ECU_JOBS)


# Complex type MUXS with content type ELEMENT_ONLY
class MUXS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type MUXS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MUXS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2169, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element MUX uses Python identifier MUX
    __MUX = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MUX'), 'MUX', '__MUXS_MUX', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2172, 0), )

    
    MUX = property(__MUX.value, __MUX.set, None, None)

    _ElementMap.update({
        __MUX.name() : __MUX
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'MUXS', MUXS)


# Complex type NEG-OUTPUT-PARAM with content type ELEMENT_ONLY
class NEG_OUTPUT_PARAM (pyxb.binding.basis.complexTypeDefinition):
    """Complex type NEG-OUTPUT-PARAM with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NEG-OUTPUT-PARAM')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2185, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DOP-BASE-REF uses Python identifier DOP_BASE_REF
    __DOP_BASE_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DOP-BASE-REF'), 'DOP_BASE_REF', '__NEG_OUTPUT_PARAM_DOP_BASE_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2189, 0), )

    
    DOP_BASE_REF = property(__DOP_BASE_REF.value, __DOP_BASE_REF.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__NEG_OUTPUT_PARAM_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__NEG_OUTPUT_PARAM_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__NEG_OUTPUT_PARAM_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    _ElementMap.update({
        __DOP_BASE_REF.name() : __DOP_BASE_REF,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'NEG-OUTPUT-PARAM', NEG_OUTPUT_PARAM)


# Complex type NEG-OUTPUT-PARAMS with content type ELEMENT_ONLY
class NEG_OUTPUT_PARAMS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type NEG-OUTPUT-PARAMS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NEG-OUTPUT-PARAMS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2192, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element NEG-OUTPUT-PARAM uses Python identifier NEG_OUTPUT_PARAM
    __NEG_OUTPUT_PARAM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NEG-OUTPUT-PARAM'), 'NEG_OUTPUT_PARAM', '__NEG_OUTPUT_PARAMS_NEG_OUTPUT_PARAM', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2195, 0), )

    
    NEG_OUTPUT_PARAM = property(__NEG_OUTPUT_PARAM.value, __NEG_OUTPUT_PARAM.set, None, None)

    _ElementMap.update({
        __NEG_OUTPUT_PARAM.name() : __NEG_OUTPUT_PARAM
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'NEG-OUTPUT-PARAMS', NEG_OUTPUT_PARAMS)


# Complex type NEG-RESPONSE-REFS with content type ELEMENT_ONLY
class NEG_RESPONSE_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type NEG-RESPONSE-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NEG-RESPONSE-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2204, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element NEG-RESPONSE-REF uses Python identifier NEG_RESPONSE_REF
    __NEG_RESPONSE_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NEG-RESPONSE-REF'), 'NEG_RESPONSE_REF', '__NEG_RESPONSE_REFS_NEG_RESPONSE_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2207, 0), )

    
    NEG_RESPONSE_REF = property(__NEG_RESPONSE_REF.value, __NEG_RESPONSE_REF.set, None, None)

    _ElementMap.update({
        __NEG_RESPONSE_REF.name() : __NEG_RESPONSE_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'NEG-RESPONSE-REFS', NEG_RESPONSE_REFS)


# Complex type NEG-RESPONSES with content type ELEMENT_ONLY
class NEG_RESPONSES (pyxb.binding.basis.complexTypeDefinition):
    """Complex type NEG-RESPONSES with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NEG-RESPONSES')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2210, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element NEG-RESPONSE uses Python identifier NEG_RESPONSE
    __NEG_RESPONSE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NEG-RESPONSE'), 'NEG_RESPONSE', '__NEG_RESPONSES_NEG_RESPONSE', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2213, 0), )

    
    NEG_RESPONSE = property(__NEG_RESPONSE.value, __NEG_RESPONSE.set, None, None)

    _ElementMap.update({
        __NEG_RESPONSE.name() : __NEG_RESPONSE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'NEG-RESPONSES', NEG_RESPONSES)


# Complex type NOT-INHERITED-DIAG-COMM with content type ELEMENT_ONLY
class NOT_INHERITED_DIAG_COMM (pyxb.binding.basis.complexTypeDefinition):
    """Complex type NOT-INHERITED-DIAG-COMM with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NOT-INHERITED-DIAG-COMM')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2216, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DIAG-COMM-SNREF uses Python identifier DIAG_COMM_SNREF
    __DIAG_COMM_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-SNREF'), 'DIAG_COMM_SNREF', '__NOT_INHERITED_DIAG_COMM_DIAG_COMM_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2219, 0), )

    
    DIAG_COMM_SNREF = property(__DIAG_COMM_SNREF.value, __DIAG_COMM_SNREF.set, None, None)

    _ElementMap.update({
        __DIAG_COMM_SNREF.name() : __DIAG_COMM_SNREF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'NOT-INHERITED-DIAG-COMM', NOT_INHERITED_DIAG_COMM)


# Complex type NOT-INHERITED-DIAG-COMMS with content type ELEMENT_ONLY
class NOT_INHERITED_DIAG_COMMS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type NOT-INHERITED-DIAG-COMMS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NOT-INHERITED-DIAG-COMMS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2222, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element NOT-INHERITEDDIAG-COMM uses Python identifier NOT_INHERITEDDIAG_COMM
    __NOT_INHERITEDDIAG_COMM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NOT-INHERITEDDIAG-COMM'), 'NOT_INHERITEDDIAG_COMM', '__NOT_INHERITED_DIAG_COMMS_NOT_INHERITEDDIAG_COMM', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2225, 0), )

    
    NOT_INHERITEDDIAG_COMM = property(__NOT_INHERITEDDIAG_COMM.value, __NOT_INHERITEDDIAG_COMM.set, None, None)

    _ElementMap.update({
        __NOT_INHERITEDDIAG_COMM.name() : __NOT_INHERITEDDIAG_COMM
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'NOT-INHERITED-DIAG-COMMS', NOT_INHERITED_DIAG_COMMS)


# Complex type NOT-INHERITED-DOP with content type ELEMENT_ONLY
class NOT_INHERITED_DOP (pyxb.binding.basis.complexTypeDefinition):
    """Complex type NOT-INHERITED-DOP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NOT-INHERITED-DOP')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2228, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DOP-BASE-SNREF uses Python identifier DOP_BASE_SNREF
    __DOP_BASE_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DOP-BASE-SNREF'), 'DOP_BASE_SNREF', '__NOT_INHERITED_DOP_DOP_BASE_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2231, 0), )

    
    DOP_BASE_SNREF = property(__DOP_BASE_SNREF.value, __DOP_BASE_SNREF.set, None, None)

    _ElementMap.update({
        __DOP_BASE_SNREF.name() : __DOP_BASE_SNREF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'NOT-INHERITED-DOP', NOT_INHERITED_DOP)


# Complex type NOT-INHERITED-DOPS with content type ELEMENT_ONLY
class NOT_INHERITED_DOPS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type NOT-INHERITED-DOPS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NOT-INHERITED-DOPS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2234, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element NOT-INHERITED-DOP uses Python identifier NOT_INHERITED_DOP
    __NOT_INHERITED_DOP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-DOP'), 'NOT_INHERITED_DOP', '__NOT_INHERITED_DOPS_NOT_INHERITED_DOP', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2237, 0), )

    
    NOT_INHERITED_DOP = property(__NOT_INHERITED_DOP.value, __NOT_INHERITED_DOP.set, None, None)

    _ElementMap.update({
        __NOT_INHERITED_DOP.name() : __NOT_INHERITED_DOP
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'NOT-INHERITED-DOPS', NOT_INHERITED_DOPS)


# Complex type NOT-INHERITED-DTC-SNREFS with content type ELEMENT_ONLY
class NOT_INHERITED_DTC_SNREFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type NOT-INHERITED-DTC-SNREFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NOT-INHERITED-DTC-SNREFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2240, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element NOT-INHERITED-DTC-SNREF uses Python identifier NOT_INHERITED_DTC_SNREF
    __NOT_INHERITED_DTC_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-DTC-SNREF'), 'NOT_INHERITED_DTC_SNREF', '__NOT_INHERITED_DTC_SNREFS_NOT_INHERITED_DTC_SNREF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2243, 0), )

    
    NOT_INHERITED_DTC_SNREF = property(__NOT_INHERITED_DTC_SNREF.value, __NOT_INHERITED_DTC_SNREF.set, None, None)

    _ElementMap.update({
        __NOT_INHERITED_DTC_SNREF.name() : __NOT_INHERITED_DTC_SNREF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'NOT-INHERITED-DTC-SNREFS', NOT_INHERITED_DTC_SNREFS)


# Complex type NOT-INHERITED-GLOBAL-NEG-RESPONSE with content type ELEMENT_ONLY
class NOT_INHERITED_GLOBAL_NEG_RESPONSE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type NOT-INHERITED-GLOBAL-NEG-RESPONSE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NOT-INHERITED-GLOBAL-NEG-RESPONSE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2246, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element GLOBAL-NEG-RESPONSE-SNREF uses Python identifier GLOBAL_NEG_RESPONSE_SNREF
    __GLOBAL_NEG_RESPONSE_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'GLOBAL-NEG-RESPONSE-SNREF'), 'GLOBAL_NEG_RESPONSE_SNREF', '__NOT_INHERITED_GLOBAL_NEG_RESPONSE_GLOBAL_NEG_RESPONSE_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2249, 0), )

    
    GLOBAL_NEG_RESPONSE_SNREF = property(__GLOBAL_NEG_RESPONSE_SNREF.value, __GLOBAL_NEG_RESPONSE_SNREF.set, None, None)

    _ElementMap.update({
        __GLOBAL_NEG_RESPONSE_SNREF.name() : __GLOBAL_NEG_RESPONSE_SNREF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'NOT-INHERITED-GLOBAL-NEG-RESPONSE', NOT_INHERITED_GLOBAL_NEG_RESPONSE)


# Complex type NOT-INHERITED-GLOBAL-NEG-RESPONSES with content type ELEMENT_ONLY
class NOT_INHERITED_GLOBAL_NEG_RESPONSES (pyxb.binding.basis.complexTypeDefinition):
    """Complex type NOT-INHERITED-GLOBAL-NEG-RESPONSES with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NOT-INHERITED-GLOBAL-NEG-RESPONSES')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2252, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element NOTINHERITED-GLOBAL-NEG-RESPONSE uses Python identifier NOTINHERITED_GLOBAL_NEG_RESPONSE
    __NOTINHERITED_GLOBAL_NEG_RESPONSE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NOTINHERITED-GLOBAL-NEG-RESPONSE'), 'NOTINHERITED_GLOBAL_NEG_RESPONSE', '__NOT_INHERITED_GLOBAL_NEG_RESPONSES_NOTINHERITED_GLOBAL_NEG_RESPONSE', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2255, 0), )

    
    NOTINHERITED_GLOBAL_NEG_RESPONSE = property(__NOTINHERITED_GLOBAL_NEG_RESPONSE.value, __NOTINHERITED_GLOBAL_NEG_RESPONSE.set, None, None)

    _ElementMap.update({
        __NOTINHERITED_GLOBAL_NEG_RESPONSE.name() : __NOTINHERITED_GLOBAL_NEG_RESPONSE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'NOT-INHERITED-GLOBAL-NEG-RESPONSES', NOT_INHERITED_GLOBAL_NEG_RESPONSES)


# Complex type NOT-INHERITED-TABLE with content type ELEMENT_ONLY
class NOT_INHERITED_TABLE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type NOT-INHERITED-TABLE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NOT-INHERITED-TABLE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2258, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TABLE-SNREF uses Python identifier TABLE_SNREF
    __TABLE_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TABLE-SNREF'), 'TABLE_SNREF', '__NOT_INHERITED_TABLE_TABLE_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2261, 0), )

    
    TABLE_SNREF = property(__TABLE_SNREF.value, __TABLE_SNREF.set, None, None)

    _ElementMap.update({
        __TABLE_SNREF.name() : __TABLE_SNREF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'NOT-INHERITED-TABLE', NOT_INHERITED_TABLE)


# Complex type NOT-INHERITED-TABLES with content type ELEMENT_ONLY
class NOT_INHERITED_TABLES (pyxb.binding.basis.complexTypeDefinition):
    """Complex type NOT-INHERITED-TABLES with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NOT-INHERITED-TABLES')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2264, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element NOT-INHERITED-TABLE uses Python identifier NOT_INHERITED_TABLE
    __NOT_INHERITED_TABLE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-TABLE'), 'NOT_INHERITED_TABLE', '__NOT_INHERITED_TABLES_NOT_INHERITED_TABLE', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2267, 0), )

    
    NOT_INHERITED_TABLE = property(__NOT_INHERITED_TABLE.value, __NOT_INHERITED_TABLE.set, None, None)

    _ElementMap.update({
        __NOT_INHERITED_TABLE.name() : __NOT_INHERITED_TABLE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'NOT-INHERITED-TABLES', NOT_INHERITED_TABLES)


# Complex type NOT-INHERITED-VARIABLE with content type ELEMENT_ONLY
class NOT_INHERITED_VARIABLE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type NOT-INHERITED-VARIABLE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NOT-INHERITED-VARIABLE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2270, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DIAG-VARIABLE-SNREF uses Python identifier DIAG_VARIABLE_SNREF
    __DIAG_VARIABLE_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-VARIABLE-SNREF'), 'DIAG_VARIABLE_SNREF', '__NOT_INHERITED_VARIABLE_DIAG_VARIABLE_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2273, 0), )

    
    DIAG_VARIABLE_SNREF = property(__DIAG_VARIABLE_SNREF.value, __DIAG_VARIABLE_SNREF.set, None, None)

    _ElementMap.update({
        __DIAG_VARIABLE_SNREF.name() : __DIAG_VARIABLE_SNREF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'NOT-INHERITED-VARIABLE', NOT_INHERITED_VARIABLE)


# Complex type NOT-INHERITED-VARIABLES with content type ELEMENT_ONLY
class NOT_INHERITED_VARIABLES (pyxb.binding.basis.complexTypeDefinition):
    """Complex type NOT-INHERITED-VARIABLES with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NOT-INHERITED-VARIABLES')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2276, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element NOT-INHERITEDVARIABLE uses Python identifier NOT_INHERITEDVARIABLE
    __NOT_INHERITEDVARIABLE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NOT-INHERITEDVARIABLE'), 'NOT_INHERITEDVARIABLE', '__NOT_INHERITED_VARIABLES_NOT_INHERITEDVARIABLE', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2279, 0), )

    
    NOT_INHERITEDVARIABLE = property(__NOT_INHERITEDVARIABLE.value, __NOT_INHERITEDVARIABLE.set, None, None)

    _ElementMap.update({
        __NOT_INHERITEDVARIABLE.name() : __NOT_INHERITEDVARIABLE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'NOT-INHERITED-VARIABLES', NOT_INHERITED_VARIABLES)


# Complex type ODX with content type ELEMENT_ONLY
class ODX_ (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ODX with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ODX')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2293, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DIAG-LAYER-CONTAINER uses Python identifier DIAG_LAYER_CONTAINER
    __DIAG_LAYER_CONTAINER = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-LAYER-CONTAINER'), 'DIAG_LAYER_CONTAINER', '__ODX__DIAG_LAYER_CONTAINER', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2296, 0), )

    
    DIAG_LAYER_CONTAINER = property(__DIAG_LAYER_CONTAINER.value, __DIAG_LAYER_CONTAINER.set, None, None)

    
    # Element COMPARAM-SPEC uses Python identifier COMPARAM_SPEC
    __COMPARAM_SPEC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPARAM-SPEC'), 'COMPARAM_SPEC', '__ODX__COMPARAM_SPEC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2297, 0), )

    
    COMPARAM_SPEC = property(__COMPARAM_SPEC.value, __COMPARAM_SPEC.set, None, None)

    
    # Element VEHICLE-INFO-SPEC uses Python identifier VEHICLE_INFO_SPEC
    __VEHICLE_INFO_SPEC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VEHICLE-INFO-SPEC'), 'VEHICLE_INFO_SPEC', '__ODX__VEHICLE_INFO_SPEC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2298, 0), )

    
    VEHICLE_INFO_SPEC = property(__VEHICLE_INFO_SPEC.value, __VEHICLE_INFO_SPEC.set, None, None)

    
    # Element FLASH uses Python identifier FLASH
    __FLASH = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FLASH'), 'FLASH', '__ODX__FLASH', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2299, 0), )

    
    FLASH = property(__FLASH.value, __FLASH.set, None, None)

    
    # Element ECU-CONFIG uses Python identifier ECU_CONFIG
    __ECU_CONFIG = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ECU-CONFIG'), 'ECU_CONFIG', '__ODX__ECU_CONFIG', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2300, 0), )

    
    ECU_CONFIG = property(__ECU_CONFIG.value, __ECU_CONFIG.set, None, None)

    
    # Element MULTIPLE-ECU-JOB-SPEC uses Python identifier MULTIPLE_ECU_JOB_SPEC
    __MULTIPLE_ECU_JOB_SPEC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MULTIPLE-ECU-JOB-SPEC'), 'MULTIPLE_ECU_JOB_SPEC', '__ODX__MULTIPLE_ECU_JOB_SPEC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2301, 0), )

    
    MULTIPLE_ECU_JOB_SPEC = property(__MULTIPLE_ECU_JOB_SPEC.value, __MULTIPLE_ECU_JOB_SPEC.set, None, None)

    
    # Element COMPARAM-SUBSET uses Python identifier COMPARAM_SUBSET
    __COMPARAM_SUBSET = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPARAM-SUBSET'), 'COMPARAM_SUBSET', '__ODX__COMPARAM_SUBSET', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2302, 0), )

    
    COMPARAM_SUBSET = property(__COMPARAM_SUBSET.value, __COMPARAM_SUBSET.set, None, None)

    
    # Element FUNCTION-DICTIONARY uses Python identifier FUNCTION_DICTIONARY
    __FUNCTION_DICTIONARY = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FUNCTION-DICTIONARY'), 'FUNCTION_DICTIONARY', '__ODX__FUNCTION_DICTIONARY', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2303, 0), )

    
    FUNCTION_DICTIONARY = property(__FUNCTION_DICTIONARY.value, __FUNCTION_DICTIONARY.set, None, None)

    
    # Attribute MODEL-VERSION uses Python identifier MODEL_VERSION
    __MODEL_VERSION = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MODEL-VERSION'), 'MODEL_VERSION', '__ODX__MODEL_VERSION', pyxb.binding.datatypes.string, fixed=False, unicode_default='2.2.0', required=True)
    __MODEL_VERSION._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2305, 0)
    __MODEL_VERSION._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2305, 0)
    
    MODEL_VERSION = property(__MODEL_VERSION.value, __MODEL_VERSION.set, None, None)

    _ElementMap.update({
        __DIAG_LAYER_CONTAINER.name() : __DIAG_LAYER_CONTAINER,
        __COMPARAM_SPEC.name() : __COMPARAM_SPEC,
        __VEHICLE_INFO_SPEC.name() : __VEHICLE_INFO_SPEC,
        __FLASH.name() : __FLASH,
        __ECU_CONFIG.name() : __ECU_CONFIG,
        __MULTIPLE_ECU_JOB_SPEC.name() : __MULTIPLE_ECU_JOB_SPEC,
        __COMPARAM_SUBSET.name() : __COMPARAM_SUBSET,
        __FUNCTION_DICTIONARY.name() : __FUNCTION_DICTIONARY
    })
    _AttributeMap.update({
        __MODEL_VERSION.name() : __MODEL_VERSION
    })
Namespace.addCategoryObject('typeBinding', 'ODX', ODX_)


# Complex type ODX-CATEGORY with content type ELEMENT_ONLY
class ODX_CATEGORY (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ODX-CATEGORY with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ODX-CATEGORY')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2307, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ADMIN-DATA uses Python identifier ADMIN_DATA
    __ADMIN_DATA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), 'ADMIN_DATA', '__ODX_CATEGORY_ADMIN_DATA', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2311, 0), )

    
    ADMIN_DATA = property(__ADMIN_DATA.value, __ADMIN_DATA.set, None, None)

    
    # Element COMPANY-DATAS uses Python identifier COMPANY_DATAS
    __COMPANY_DATAS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPANY-DATAS'), 'COMPANY_DATAS', '__ODX_CATEGORY_COMPANY_DATAS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2312, 0), )

    
    COMPANY_DATAS = property(__COMPANY_DATAS.value, __COMPANY_DATAS.set, None, None)

    
    # Element SDGS uses Python identifier SDGS
    __SDGS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDGS'), 'SDGS', '__ODX_CATEGORY_SDGS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2313, 0), )

    
    SDGS = property(__SDGS.value, __SDGS.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__ODX_CATEGORY_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__ODX_CATEGORY_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__ODX_CATEGORY_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__ODX_CATEGORY_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2315, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2315, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__ODX_CATEGORY_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2316, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2316, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __ADMIN_DATA.name() : __ADMIN_DATA,
        __COMPANY_DATAS.name() : __COMPANY_DATAS,
        __SDGS.name() : __SDGS,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'ODX-CATEGORY', ODX_CATEGORY)


# Complex type OPTION-ITEMS with content type ELEMENT_ONLY
class OPTION_ITEMS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type OPTION-ITEMS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OPTION-ITEMS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2340, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element OPTION-ITEM uses Python identifier OPTION_ITEM
    __OPTION_ITEM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OPTION-ITEM'), 'OPTION_ITEM', '__OPTION_ITEMS_OPTION_ITEM', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2343, 0), )

    
    OPTION_ITEM = property(__OPTION_ITEM.value, __OPTION_ITEM.set, None, None)

    _ElementMap.update({
        __OPTION_ITEM.name() : __OPTION_ITEM
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'OPTION-ITEMS', OPTION_ITEMS)


# Complex type OUT-PARAM-IF-REFS with content type ELEMENT_ONLY
class OUT_PARAM_IF_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type OUT-PARAM-IF-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OUT-PARAM-IF-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2346, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element OUT-PARAM-IF-SNREF uses Python identifier OUT_PARAM_IF_SNREF
    __OUT_PARAM_IF_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNREF'), 'OUT_PARAM_IF_SNREF', '__OUT_PARAM_IF_REFS_OUT_PARAM_IF_SNREF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2349, 0), )

    
    OUT_PARAM_IF_SNREF = property(__OUT_PARAM_IF_SNREF.value, __OUT_PARAM_IF_SNREF.set, None, None)

    
    # Element OUT-PARAM-IF-SNPATHREF uses Python identifier OUT_PARAM_IF_SNPATHREF
    __OUT_PARAM_IF_SNPATHREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNPATHREF'), 'OUT_PARAM_IF_SNPATHREF', '__OUT_PARAM_IF_REFS_OUT_PARAM_IF_SNPATHREF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2350, 0), )

    
    OUT_PARAM_IF_SNPATHREF = property(__OUT_PARAM_IF_SNPATHREF.value, __OUT_PARAM_IF_SNPATHREF.set, None, None)

    _ElementMap.update({
        __OUT_PARAM_IF_SNREF.name() : __OUT_PARAM_IF_SNREF,
        __OUT_PARAM_IF_SNPATHREF.name() : __OUT_PARAM_IF_SNPATHREF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'OUT-PARAM-IF-REFS', OUT_PARAM_IF_REFS)


# Complex type OUTPUT-PARAM with content type ELEMENT_ONLY
class OUTPUT_PARAM (pyxb.binding.basis.complexTypeDefinition):
    """Complex type OUTPUT-PARAM with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OUTPUT-PARAM')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2353, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DOP-BASE-REF uses Python identifier DOP_BASE_REF
    __DOP_BASE_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DOP-BASE-REF'), 'DOP_BASE_REF', '__OUTPUT_PARAM_DOP_BASE_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2357, 0), )

    
    DOP_BASE_REF = property(__DOP_BASE_REF.value, __DOP_BASE_REF.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__OUTPUT_PARAM_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__OUTPUT_PARAM_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__OUTPUT_PARAM_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__OUTPUT_PARAM_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2359, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2359, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__OUTPUT_PARAM_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2360, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2360, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    
    # Attribute SEMANTIC uses Python identifier SEMANTIC
    __SEMANTIC = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SEMANTIC'), 'SEMANTIC', '__OUTPUT_PARAM_SEMANTIC', pyxb.binding.datatypes.string)
    __SEMANTIC._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2361, 0)
    __SEMANTIC._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2361, 0)
    
    SEMANTIC = property(__SEMANTIC.value, __SEMANTIC.set, None, None)

    _ElementMap.update({
        __DOP_BASE_REF.name() : __DOP_BASE_REF,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID,
        __SEMANTIC.name() : __SEMANTIC
    })
Namespace.addCategoryObject('typeBinding', 'OUTPUT-PARAM', OUTPUT_PARAM)


# Complex type OUTPUT-PARAMS with content type ELEMENT_ONLY
class OUTPUT_PARAMS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type OUTPUT-PARAMS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OUTPUT-PARAMS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2363, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element OUTPUT-PARAM uses Python identifier OUTPUT_PARAM
    __OUTPUT_PARAM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OUTPUT-PARAM'), 'OUTPUT_PARAM', '__OUTPUT_PARAMS_OUTPUT_PARAM', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2366, 0), )

    
    OUTPUT_PARAM = property(__OUTPUT_PARAM.value, __OUTPUT_PARAM.set, None, None)

    _ElementMap.update({
        __OUTPUT_PARAM.name() : __OUTPUT_PARAM
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'OUTPUT-PARAMS', OUTPUT_PARAMS)


# Complex type OWN-IDENT with content type ELEMENT_ONLY
class OWN_IDENT (pyxb.binding.basis.complexTypeDefinition):
    """Complex type OWN-IDENT with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OWN-IDENT')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2369, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element IDENT-VALUE uses Python identifier IDENT_VALUE
    __IDENT_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IDENT-VALUE'), 'IDENT_VALUE', '__OWN_IDENT_IDENT_VALUE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2373, 0), )

    
    IDENT_VALUE = property(__IDENT_VALUE.value, __IDENT_VALUE.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__OWN_IDENT_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__OWN_IDENT_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__OWN_IDENT_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__OWN_IDENT_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2375, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2375, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__OWN_IDENT_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2376, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2376, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __IDENT_VALUE.name() : __IDENT_VALUE,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'OWN-IDENT', OWN_IDENT)


# Complex type OWN-IDENTS with content type ELEMENT_ONLY
class OWN_IDENTS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type OWN-IDENTS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OWN-IDENTS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2378, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element OWN-IDENT uses Python identifier OWN_IDENT
    __OWN_IDENT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OWN-IDENT'), 'OWN_IDENT', '__OWN_IDENTS_OWN_IDENT', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2381, 0), )

    
    OWN_IDENT = property(__OWN_IDENT.value, __OWN_IDENT.set, None, None)

    _ElementMap.update({
        __OWN_IDENT.name() : __OWN_IDENT
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'OWN-IDENTS', OWN_IDENTS)


# Complex type PARAM with content type ELEMENT_ONLY
class PARAM (pyxb.binding.basis.complexTypeDefinition):
    """Complex type PARAM with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PARAM')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2384, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SDGS uses Python identifier SDGS
    __SDGS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDGS'), 'SDGS', '__PARAM_SDGS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0), )

    
    SDGS = property(__SDGS.value, __SDGS.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__PARAM_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__PARAM_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__PARAM_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__PARAM_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2390, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2390, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    
    # Attribute SEMANTIC uses Python identifier SEMANTIC
    __SEMANTIC = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SEMANTIC'), 'SEMANTIC', '__PARAM_SEMANTIC', pyxb.binding.datatypes.string)
    __SEMANTIC._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2391, 0)
    __SEMANTIC._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2391, 0)
    
    SEMANTIC = property(__SEMANTIC.value, __SEMANTIC.set, None, None)

    _ElementMap.update({
        __SDGS.name() : __SDGS,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __OID.name() : __OID,
        __SEMANTIC.name() : __SEMANTIC
    })
Namespace.addCategoryObject('typeBinding', 'PARAM', PARAM)


# Complex type PARAMS with content type ELEMENT_ONLY
class PARAMS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type PARAMS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PARAMS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2403, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PARAM uses Python identifier PARAM
    __PARAM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PARAM'), 'PARAM', '__PARAMS_PARAM', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2406, 0), )

    
    PARAM = property(__PARAM.value, __PARAM.set, None, None)

    _ElementMap.update({
        __PARAM.name() : __PARAM
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'PARAMS', PARAMS)


# Complex type PARENT-REFS with content type ELEMENT_ONLY
class PARENT_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type PARENT-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PARENT-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2422, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PARENT-REF uses Python identifier PARENT_REF
    __PARENT_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PARENT-REF'), 'PARENT_REF', '__PARENT_REFS_PARENT_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2424, 0), )

    
    PARENT_REF = property(__PARENT_REF.value, __PARENT_REF.set, None, None)

    _ElementMap.update({
        __PARENT_REF.name() : __PARENT_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'PARENT-REFS', PARENT_REFS)


# Complex type PHYSICAL-DIMENSION with content type ELEMENT_ONLY
class PHYSICAL_DIMENSION (pyxb.binding.basis.complexTypeDefinition):
    """Complex type PHYSICAL-DIMENSION with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PHYSICAL-DIMENSION')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2451, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element LENGTH-EXP uses Python identifier LENGTH_EXP
    __LENGTH_EXP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LENGTH-EXP'), 'LENGTH_EXP', '__PHYSICAL_DIMENSION_LENGTH_EXP', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2455, 0), )

    
    LENGTH_EXP = property(__LENGTH_EXP.value, __LENGTH_EXP.set, None, None)

    
    # Element MASS-EXP uses Python identifier MASS_EXP
    __MASS_EXP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MASS-EXP'), 'MASS_EXP', '__PHYSICAL_DIMENSION_MASS_EXP', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2456, 0), )

    
    MASS_EXP = property(__MASS_EXP.value, __MASS_EXP.set, None, None)

    
    # Element TIME-EXP uses Python identifier TIME_EXP
    __TIME_EXP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TIME-EXP'), 'TIME_EXP', '__PHYSICAL_DIMENSION_TIME_EXP', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2457, 0), )

    
    TIME_EXP = property(__TIME_EXP.value, __TIME_EXP.set, None, None)

    
    # Element CURRENT-EXP uses Python identifier CURRENT_EXP
    __CURRENT_EXP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CURRENT-EXP'), 'CURRENT_EXP', '__PHYSICAL_DIMENSION_CURRENT_EXP', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2458, 0), )

    
    CURRENT_EXP = property(__CURRENT_EXP.value, __CURRENT_EXP.set, None, None)

    
    # Element TEMPERATURE-EXP uses Python identifier TEMPERATURE_EXP
    __TEMPERATURE_EXP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TEMPERATURE-EXP'), 'TEMPERATURE_EXP', '__PHYSICAL_DIMENSION_TEMPERATURE_EXP', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2459, 0), )

    
    TEMPERATURE_EXP = property(__TEMPERATURE_EXP.value, __TEMPERATURE_EXP.set, None, None)

    
    # Element MOLAR-AMOUNT-EXP uses Python identifier MOLAR_AMOUNT_EXP
    __MOLAR_AMOUNT_EXP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MOLAR-AMOUNT-EXP'), 'MOLAR_AMOUNT_EXP', '__PHYSICAL_DIMENSION_MOLAR_AMOUNT_EXP', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2460, 0), )

    
    MOLAR_AMOUNT_EXP = property(__MOLAR_AMOUNT_EXP.value, __MOLAR_AMOUNT_EXP.set, None, None)

    
    # Element LUMINOUS-INTENSITY-EXP uses Python identifier LUMINOUS_INTENSITY_EXP
    __LUMINOUS_INTENSITY_EXP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LUMINOUS-INTENSITY-EXP'), 'LUMINOUS_INTENSITY_EXP', '__PHYSICAL_DIMENSION_LUMINOUS_INTENSITY_EXP', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2461, 0), )

    
    LUMINOUS_INTENSITY_EXP = property(__LUMINOUS_INTENSITY_EXP.value, __LUMINOUS_INTENSITY_EXP.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__PHYSICAL_DIMENSION_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__PHYSICAL_DIMENSION_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__PHYSICAL_DIMENSION_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__PHYSICAL_DIMENSION_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2463, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2463, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__PHYSICAL_DIMENSION_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2464, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2464, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __LENGTH_EXP.name() : __LENGTH_EXP,
        __MASS_EXP.name() : __MASS_EXP,
        __TIME_EXP.name() : __TIME_EXP,
        __CURRENT_EXP.name() : __CURRENT_EXP,
        __TEMPERATURE_EXP.name() : __TEMPERATURE_EXP,
        __MOLAR_AMOUNT_EXP.name() : __MOLAR_AMOUNT_EXP,
        __LUMINOUS_INTENSITY_EXP.name() : __LUMINOUS_INTENSITY_EXP,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'PHYSICAL-DIMENSION', PHYSICAL_DIMENSION)


# Complex type PHYSICAL-DIMENSIONS with content type ELEMENT_ONLY
class PHYSICAL_DIMENSIONS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type PHYSICAL-DIMENSIONS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PHYSICAL-DIMENSIONS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2466, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PHYSICAL-DIMENSION uses Python identifier PHYSICAL_DIMENSION
    __PHYSICAL_DIMENSION = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PHYSICAL-DIMENSION'), 'PHYSICAL_DIMENSION', '__PHYSICAL_DIMENSIONS_PHYSICAL_DIMENSION', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2469, 0), )

    
    PHYSICAL_DIMENSION = property(__PHYSICAL_DIMENSION.value, __PHYSICAL_DIMENSION.set, None, None)

    _ElementMap.update({
        __PHYSICAL_DIMENSION.name() : __PHYSICAL_DIMENSION
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'PHYSICAL-DIMENSIONS', PHYSICAL_DIMENSIONS)


# Complex type PHYSICAL-VEHICLE-LINK with content type ELEMENT_ONLY
class PHYSICAL_VEHICLE_LINK (pyxb.binding.basis.complexTypeDefinition):
    """Complex type PHYSICAL-VEHICLE-LINK with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PHYSICAL-VEHICLE-LINK')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2480, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element VEHICLE-CONNECTOR-PIN-REFS uses Python identifier VEHICLE_CONNECTOR_PIN_REFS
    __VEHICLE_CONNECTOR_PIN_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VEHICLE-CONNECTOR-PIN-REFS'), 'VEHICLE_CONNECTOR_PIN_REFS', '__PHYSICAL_VEHICLE_LINK_VEHICLE_CONNECTOR_PIN_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2484, 0), )

    
    VEHICLE_CONNECTOR_PIN_REFS = property(__VEHICLE_CONNECTOR_PIN_REFS.value, __VEHICLE_CONNECTOR_PIN_REFS.set, None, None)

    
    # Element LINK-COMPARAM-REFS uses Python identifier LINK_COMPARAM_REFS
    __LINK_COMPARAM_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LINK-COMPARAM-REFS'), 'LINK_COMPARAM_REFS', '__PHYSICAL_VEHICLE_LINK_LINK_COMPARAM_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2486, 0), )

    
    LINK_COMPARAM_REFS = property(__LINK_COMPARAM_REFS.value, __LINK_COMPARAM_REFS.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__PHYSICAL_VEHICLE_LINK_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__PHYSICAL_VEHICLE_LINK_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__PHYSICAL_VEHICLE_LINK_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__PHYSICAL_VEHICLE_LINK_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2488, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2488, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__PHYSICAL_VEHICLE_LINK_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2489, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2489, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    
    # Attribute TYPE uses Python identifier TYPE
    __TYPE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TYPE'), 'TYPE', '__PHYSICAL_VEHICLE_LINK_TYPE', pyxb.binding.datatypes.string, required=True)
    __TYPE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2490, 0)
    __TYPE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2490, 0)
    
    TYPE = property(__TYPE.value, __TYPE.set, None, None)

    _ElementMap.update({
        __VEHICLE_CONNECTOR_PIN_REFS.name() : __VEHICLE_CONNECTOR_PIN_REFS,
        __LINK_COMPARAM_REFS.name() : __LINK_COMPARAM_REFS,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID,
        __TYPE.name() : __TYPE
    })
Namespace.addCategoryObject('typeBinding', 'PHYSICAL-VEHICLE-LINK', PHYSICAL_VEHICLE_LINK)


# Complex type PHYSICAL-VEHICLE-LINKS with content type ELEMENT_ONLY
class PHYSICAL_VEHICLE_LINKS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type PHYSICAL-VEHICLE-LINKS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PHYSICAL-VEHICLE-LINKS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2492, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PHYSICAL-VEHICLELINK uses Python identifier PHYSICAL_VEHICLELINK
    __PHYSICAL_VEHICLELINK = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PHYSICAL-VEHICLELINK'), 'PHYSICAL_VEHICLELINK', '__PHYSICAL_VEHICLE_LINKS_PHYSICAL_VEHICLELINK', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2495, 0), )

    
    PHYSICAL_VEHICLELINK = property(__PHYSICAL_VEHICLELINK.value, __PHYSICAL_VEHICLELINK.set, None, None)

    _ElementMap.update({
        __PHYSICAL_VEHICLELINK.name() : __PHYSICAL_VEHICLELINK
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'PHYSICAL-VEHICLE-LINKS', PHYSICAL_VEHICLE_LINKS)


# Complex type PHYS-MEM with content type ELEMENT_ONLY
class PHYS_MEM (pyxb.binding.basis.complexTypeDefinition):
    """Complex type PHYS-MEM with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PHYS-MEM')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2498, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PHYS-SEGMENTS uses Python identifier PHYS_SEGMENTS
    __PHYS_SEGMENTS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PHYS-SEGMENTS'), 'PHYS_SEGMENTS', '__PHYS_MEM_PHYS_SEGMENTS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2502, 0), )

    
    PHYS_SEGMENTS = property(__PHYS_SEGMENTS.value, __PHYS_SEGMENTS.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__PHYS_MEM_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__PHYS_MEM_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__PHYS_MEM_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__PHYS_MEM_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2504, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2504, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__PHYS_MEM_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2505, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2505, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __PHYS_SEGMENTS.name() : __PHYS_SEGMENTS,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'PHYS-MEM', PHYS_MEM)


# Complex type PHYS-SEGMENT with content type ELEMENT_ONLY
class PHYS_SEGMENT (pyxb.binding.basis.complexTypeDefinition):
    """Complex type PHYS-SEGMENT with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PHYS-SEGMENT')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2507, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element FILLBYTE uses Python identifier FILLBYTE
    __FILLBYTE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FILLBYTE'), 'FILLBYTE', '__PHYS_SEGMENT_FILLBYTE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2511, 0), )

    
    FILLBYTE = property(__FILLBYTE.value, __FILLBYTE.set, None, None)

    
    # Element BLOCK-SIZE uses Python identifier BLOCK_SIZE
    __BLOCK_SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BLOCK-SIZE'), 'BLOCK_SIZE', '__PHYS_SEGMENT_BLOCK_SIZE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2512, 0), )

    
    BLOCK_SIZE = property(__BLOCK_SIZE.value, __BLOCK_SIZE.set, None, None)

    
    # Element START-ADDRESS uses Python identifier START_ADDRESS
    __START_ADDRESS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'START-ADDRESS'), 'START_ADDRESS', '__PHYS_SEGMENT_START_ADDRESS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2513, 0), )

    
    START_ADDRESS = property(__START_ADDRESS.value, __START_ADDRESS.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__PHYS_SEGMENT_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__PHYS_SEGMENT_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__PHYS_SEGMENT_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__PHYS_SEGMENT_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2515, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2515, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__PHYS_SEGMENT_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2516, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2516, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __FILLBYTE.name() : __FILLBYTE,
        __BLOCK_SIZE.name() : __BLOCK_SIZE,
        __START_ADDRESS.name() : __START_ADDRESS,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'PHYS-SEGMENT', PHYS_SEGMENT)


# Complex type PHYS-SEGMENTS with content type ELEMENT_ONLY
class PHYS_SEGMENTS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type PHYS-SEGMENTS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PHYS-SEGMENTS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2518, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PHYS-SEGMENT uses Python identifier PHYS_SEGMENT
    __PHYS_SEGMENT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PHYS-SEGMENT'), 'PHYS_SEGMENT', '__PHYS_SEGMENTS_PHYS_SEGMENT', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2521, 0), )

    
    PHYS_SEGMENT = property(__PHYS_SEGMENT.value, __PHYS_SEGMENT.set, None, None)

    _ElementMap.update({
        __PHYS_SEGMENT.name() : __PHYS_SEGMENT
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'PHYS-SEGMENTS', PHYS_SEGMENTS)


# Complex type POS-RESPONSE-REFS with content type ELEMENT_ONLY
class POS_RESPONSE_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type POS-RESPONSE-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'POS-RESPONSE-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2570, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element POS-RESPONSE-REF uses Python identifier POS_RESPONSE_REF
    __POS_RESPONSE_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'POS-RESPONSE-REF'), 'POS_RESPONSE_REF', '__POS_RESPONSE_REFS_POS_RESPONSE_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2573, 0), )

    
    POS_RESPONSE_REF = property(__POS_RESPONSE_REF.value, __POS_RESPONSE_REF.set, None, None)

    _ElementMap.update({
        __POS_RESPONSE_REF.name() : __POS_RESPONSE_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'POS-RESPONSE-REFS', POS_RESPONSE_REFS)


# Complex type POS-RESPONSES with content type ELEMENT_ONLY
class POS_RESPONSES (pyxb.binding.basis.complexTypeDefinition):
    """Complex type POS-RESPONSES with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'POS-RESPONSES')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2576, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element POS-RESPONSE uses Python identifier POS_RESPONSE
    __POS_RESPONSE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'POS-RESPONSE'), 'POS_RESPONSE', '__POS_RESPONSES_POS_RESPONSE', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2579, 0), )

    
    POS_RESPONSE = property(__POS_RESPONSE.value, __POS_RESPONSE.set, None, None)

    _ElementMap.update({
        __POS_RESPONSE.name() : __POS_RESPONSE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'POS-RESPONSES', POS_RESPONSES)


# Complex type POS-RESPONSE-SUPPRESSABLE with content type ELEMENT_ONLY
class POS_RESPONSE_SUPPRESSABLE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type POS-RESPONSE-SUPPRESSABLE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'POS-RESPONSE-SUPPRESSABLE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2582, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element BIT-MASK uses Python identifier BIT_MASK
    __BIT_MASK = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BIT-MASK'), 'BIT_MASK', '__POS_RESPONSE_SUPPRESSABLE_BIT_MASK', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2585, 0), )

    
    BIT_MASK = property(__BIT_MASK.value, __BIT_MASK.set, None, None)

    
    # Element CODED-CONST-SNREF uses Python identifier CODED_CONST_SNREF
    __CODED_CONST_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CODED-CONST-SNREF'), 'CODED_CONST_SNREF', '__POS_RESPONSE_SUPPRESSABLE_CODED_CONST_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2588, 0), )

    
    CODED_CONST_SNREF = property(__CODED_CONST_SNREF.value, __CODED_CONST_SNREF.set, None, None)

    
    # Element CODED-CONST-SNPATHREF uses Python identifier CODED_CONST_SNPATHREF
    __CODED_CONST_SNPATHREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CODED-CONST-SNPATHREF'), 'CODED_CONST_SNPATHREF', '__POS_RESPONSE_SUPPRESSABLE_CODED_CONST_SNPATHREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2589, 0), )

    
    CODED_CONST_SNPATHREF = property(__CODED_CONST_SNPATHREF.value, __CODED_CONST_SNPATHREF.set, None, None)

    
    # Element VALUE-SNREF uses Python identifier VALUE_SNREF
    __VALUE_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VALUE-SNREF'), 'VALUE_SNREF', '__POS_RESPONSE_SUPPRESSABLE_VALUE_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2592, 0), )

    
    VALUE_SNREF = property(__VALUE_SNREF.value, __VALUE_SNREF.set, None, None)

    
    # Element VALUE-SNPATHREF uses Python identifier VALUE_SNPATHREF
    __VALUE_SNPATHREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VALUE-SNPATHREF'), 'VALUE_SNPATHREF', '__POS_RESPONSE_SUPPRESSABLE_VALUE_SNPATHREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2593, 0), )

    
    VALUE_SNPATHREF = property(__VALUE_SNPATHREF.value, __VALUE_SNPATHREF.set, None, None)

    
    # Element PHYS-CONST-SNREF uses Python identifier PHYS_CONST_SNREF
    __PHYS_CONST_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PHYS-CONST-SNREF'), 'PHYS_CONST_SNREF', '__POS_RESPONSE_SUPPRESSABLE_PHYS_CONST_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2596, 0), )

    
    PHYS_CONST_SNREF = property(__PHYS_CONST_SNREF.value, __PHYS_CONST_SNREF.set, None, None)

    
    # Element PHYS-CONST-SNPATHREF uses Python identifier PHYS_CONST_SNPATHREF
    __PHYS_CONST_SNPATHREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PHYS-CONST-SNPATHREF'), 'PHYS_CONST_SNPATHREF', '__POS_RESPONSE_SUPPRESSABLE_PHYS_CONST_SNPATHREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2597, 0), )

    
    PHYS_CONST_SNPATHREF = property(__PHYS_CONST_SNPATHREF.value, __PHYS_CONST_SNPATHREF.set, None, None)

    
    # Element TABLE-KEY-SNREF uses Python identifier TABLE_KEY_SNREF
    __TABLE_KEY_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TABLE-KEY-SNREF'), 'TABLE_KEY_SNREF', '__POS_RESPONSE_SUPPRESSABLE_TABLE_KEY_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2600, 0), )

    
    TABLE_KEY_SNREF = property(__TABLE_KEY_SNREF.value, __TABLE_KEY_SNREF.set, None, None)

    
    # Element TABLE-KEY-SNPATHREF uses Python identifier TABLE_KEY_SNPATHREF
    __TABLE_KEY_SNPATHREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TABLE-KEY-SNPATHREF'), 'TABLE_KEY_SNPATHREF', '__POS_RESPONSE_SUPPRESSABLE_TABLE_KEY_SNPATHREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2601, 0), )

    
    TABLE_KEY_SNPATHREF = property(__TABLE_KEY_SNPATHREF.value, __TABLE_KEY_SNPATHREF.set, None, None)

    _ElementMap.update({
        __BIT_MASK.name() : __BIT_MASK,
        __CODED_CONST_SNREF.name() : __CODED_CONST_SNREF,
        __CODED_CONST_SNPATHREF.name() : __CODED_CONST_SNPATHREF,
        __VALUE_SNREF.name() : __VALUE_SNREF,
        __VALUE_SNPATHREF.name() : __VALUE_SNPATHREF,
        __PHYS_CONST_SNREF.name() : __PHYS_CONST_SNREF,
        __PHYS_CONST_SNPATHREF.name() : __PHYS_CONST_SNPATHREF,
        __TABLE_KEY_SNREF.name() : __TABLE_KEY_SNREF,
        __TABLE_KEY_SNPATHREF.name() : __TABLE_KEY_SNPATHREF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'POS-RESPONSE-SUPPRESSABLE', POS_RESPONSE_SUPPRESSABLE)


# Complex type PRE-CONDITION-STATE-REFS with content type ELEMENT_ONLY
class PRE_CONDITION_STATE_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type PRE-CONDITION-STATE-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PRE-CONDITION-STATE-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2617, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PRE-CONDITION-STATE-REF uses Python identifier PRE_CONDITION_STATE_REF
    __PRE_CONDITION_STATE_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PRE-CONDITION-STATE-REF'), 'PRE_CONDITION_STATE_REF', '__PRE_CONDITION_STATE_REFS_PRE_CONDITION_STATE_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2620, 0), )

    
    PRE_CONDITION_STATE_REF = property(__PRE_CONDITION_STATE_REF.value, __PRE_CONDITION_STATE_REF.set, None, None)

    _ElementMap.update({
        __PRE_CONDITION_STATE_REF.name() : __PRE_CONDITION_STATE_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'PRE-CONDITION-STATE-REFS', PRE_CONDITION_STATE_REFS)


# Complex type PROG-CODE with content type ELEMENT_ONLY
class PROG_CODE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type PROG-CODE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PROG-CODE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2623, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CODE-FILE uses Python identifier CODE_FILE
    __CODE_FILE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CODE-FILE'), 'CODE_FILE', '__PROG_CODE_CODE_FILE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2626, 0), )

    
    CODE_FILE = property(__CODE_FILE.value, __CODE_FILE.set, None, None)

    
    # Element ENCRYPTION uses Python identifier ENCRYPTION
    __ENCRYPTION = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ENCRYPTION'), 'ENCRYPTION', '__PROG_CODE_ENCRYPTION', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2627, 0), )

    
    ENCRYPTION = property(__ENCRYPTION.value, __ENCRYPTION.set, None, None)

    
    # Element SYNTAX uses Python identifier SYNTAX
    __SYNTAX = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SYNTAX'), 'SYNTAX', '__PROG_CODE_SYNTAX', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2628, 0), )

    
    SYNTAX = property(__SYNTAX.value, __SYNTAX.set, None, None)

    
    # Element REVISION uses Python identifier REVISION
    __REVISION = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'REVISION'), 'REVISION', '__PROG_CODE_REVISION', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2629, 0), )

    
    REVISION = property(__REVISION.value, __REVISION.set, None, None)

    
    # Element ENTRYPOINT uses Python identifier ENTRYPOINT
    __ENTRYPOINT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ENTRYPOINT'), 'ENTRYPOINT', '__PROG_CODE_ENTRYPOINT', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2630, 0), )

    
    ENTRYPOINT = property(__ENTRYPOINT.value, __ENTRYPOINT.set, None, None)

    
    # Element LIBRARY-REFS uses Python identifier LIBRARY_REFS
    __LIBRARY_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LIBRARY-REFS'), 'LIBRARY_REFS', '__PROG_CODE_LIBRARY_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2631, 0), )

    
    LIBRARY_REFS = property(__LIBRARY_REFS.value, __LIBRARY_REFS.set, None, None)

    _ElementMap.update({
        __CODE_FILE.name() : __CODE_FILE,
        __ENCRYPTION.name() : __ENCRYPTION,
        __SYNTAX.name() : __SYNTAX,
        __REVISION.name() : __REVISION,
        __ENTRYPOINT.name() : __ENTRYPOINT,
        __LIBRARY_REFS.name() : __LIBRARY_REFS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'PROG-CODE', PROG_CODE)


# Complex type PROG-CODES with content type ELEMENT_ONLY
class PROG_CODES (pyxb.binding.basis.complexTypeDefinition):
    """Complex type PROG-CODES with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PROG-CODES')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2634, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PROG-CODE uses Python identifier PROG_CODE
    __PROG_CODE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PROG-CODE'), 'PROG_CODE', '__PROG_CODES_PROG_CODE', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2637, 0), )

    
    PROG_CODE = property(__PROG_CODE.value, __PROG_CODE.set, None, None)

    _ElementMap.update({
        __PROG_CODE.name() : __PROG_CODE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'PROG-CODES', PROG_CODES)


# Complex type PROTOCOLS with content type ELEMENT_ONLY
class PROTOCOLS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type PROTOCOLS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PROTOCOLS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2658, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PROTOCOL uses Python identifier PROTOCOL
    __PROTOCOL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PROTOCOL'), 'PROTOCOL', '__PROTOCOLS_PROTOCOL', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2661, 0), )

    
    PROTOCOL = property(__PROTOCOL.value, __PROTOCOL.set, None, None)

    _ElementMap.update({
        __PROTOCOL.name() : __PROTOCOL
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'PROTOCOLS', PROTOCOLS)


# Complex type PROTOCOL-SNREFS with content type ELEMENT_ONLY
class PROTOCOL_SNREFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type PROTOCOL-SNREFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PROTOCOL-SNREFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2664, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PROTOCOL-SNREF uses Python identifier PROTOCOL_SNREF
    __PROTOCOL_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PROTOCOL-SNREF'), 'PROTOCOL_SNREF', '__PROTOCOL_SNREFS_PROTOCOL_SNREF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2667, 0), )

    
    PROTOCOL_SNREF = property(__PROTOCOL_SNREF.value, __PROTOCOL_SNREF.set, None, None)

    _ElementMap.update({
        __PROTOCOL_SNREF.name() : __PROTOCOL_SNREF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'PROTOCOL-SNREFS', PROTOCOL_SNREFS)


# Complex type PROT-STACK with content type ELEMENT_ONLY
class PROT_STACK (pyxb.binding.basis.complexTypeDefinition):
    """Complex type PROT-STACK with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PROT-STACK')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2670, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PDU-PROTOCOL-TYPE uses Python identifier PDU_PROTOCOL_TYPE
    __PDU_PROTOCOL_TYPE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PDU-PROTOCOL-TYPE'), 'PDU_PROTOCOL_TYPE', '__PROT_STACK_PDU_PROTOCOL_TYPE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2674, 0), )

    
    PDU_PROTOCOL_TYPE = property(__PDU_PROTOCOL_TYPE.value, __PDU_PROTOCOL_TYPE.set, None, None)

    
    # Element PHYSICAL-LINK-TYPE uses Python identifier PHYSICAL_LINK_TYPE
    __PHYSICAL_LINK_TYPE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PHYSICAL-LINK-TYPE'), 'PHYSICAL_LINK_TYPE', '__PROT_STACK_PHYSICAL_LINK_TYPE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2675, 0), )

    
    PHYSICAL_LINK_TYPE = property(__PHYSICAL_LINK_TYPE.value, __PHYSICAL_LINK_TYPE.set, None, None)

    
    # Element COMPARAM-SUBSET-REFS uses Python identifier COMPARAM_SUBSET_REFS
    __COMPARAM_SUBSET_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPARAM-SUBSET-REFS'), 'COMPARAM_SUBSET_REFS', '__PROT_STACK_COMPARAM_SUBSET_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2676, 0), )

    
    COMPARAM_SUBSET_REFS = property(__COMPARAM_SUBSET_REFS.value, __COMPARAM_SUBSET_REFS.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__PROT_STACK_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__PROT_STACK_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__PROT_STACK_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__PROT_STACK_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2678, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2678, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__PROT_STACK_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2679, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2679, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __PDU_PROTOCOL_TYPE.name() : __PDU_PROTOCOL_TYPE,
        __PHYSICAL_LINK_TYPE.name() : __PHYSICAL_LINK_TYPE,
        __COMPARAM_SUBSET_REFS.name() : __COMPARAM_SUBSET_REFS,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'PROT-STACK', PROT_STACK)


# Complex type PROT-STACKS with content type ELEMENT_ONLY
class PROT_STACKS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type PROT-STACKS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PROT-STACKS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2681, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PROT-STACK uses Python identifier PROT_STACK
    __PROT_STACK = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PROT-STACK'), 'PROT_STACK', '__PROT_STACKS_PROT_STACK', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2684, 0), )

    
    PROT_STACK = property(__PROT_STACK.value, __PROT_STACK.set, None, None)

    _ElementMap.update({
        __PROT_STACK.name() : __PROT_STACK
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'PROT-STACKS', PROT_STACKS)


# Complex type READ-DIAG-COMM-CONNECTOR with content type ELEMENT_ONLY
class READ_DIAG_COMM_CONNECTOR (pyxb.binding.basis.complexTypeDefinition):
    """Complex type READ-DIAG-COMM-CONNECTOR with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'READ-DIAG-COMM-CONNECTOR')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2695, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element READ-PARAM-VALUES uses Python identifier READ_PARAM_VALUES
    __READ_PARAM_VALUES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'READ-PARAM-VALUES'), 'READ_PARAM_VALUES', '__READ_DIAG_COMM_CONNECTOR_READ_PARAM_VALUES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2698, 0), )

    
    READ_PARAM_VALUES = property(__READ_PARAM_VALUES.value, __READ_PARAM_VALUES.set, None, None)

    
    # Element READ-DIAG-COMM-REF uses Python identifier READ_DIAG_COMM_REF
    __READ_DIAG_COMM_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'READ-DIAG-COMM-REF'), 'READ_DIAG_COMM_REF', '__READ_DIAG_COMM_CONNECTOR_READ_DIAG_COMM_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2700, 0), )

    
    READ_DIAG_COMM_REF = property(__READ_DIAG_COMM_REF.value, __READ_DIAG_COMM_REF.set, None, None)

    
    # Element READ-DIAG-COMM-SNREF uses Python identifier READ_DIAG_COMM_SNREF
    __READ_DIAG_COMM_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'READ-DIAG-COMM-SNREF'), 'READ_DIAG_COMM_SNREF', '__READ_DIAG_COMM_CONNECTOR_READ_DIAG_COMM_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2701, 0), )

    
    READ_DIAG_COMM_SNREF = property(__READ_DIAG_COMM_SNREF.value, __READ_DIAG_COMM_SNREF.set, None, None)

    
    # Element READ-DATA-SNREF uses Python identifier READ_DATA_SNREF
    __READ_DATA_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'READ-DATA-SNREF'), 'READ_DATA_SNREF', '__READ_DIAG_COMM_CONNECTOR_READ_DATA_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2704, 0), )

    
    READ_DATA_SNREF = property(__READ_DATA_SNREF.value, __READ_DATA_SNREF.set, None, None)

    
    # Element READ-DATA-SNPATHREF uses Python identifier READ_DATA_SNPATHREF
    __READ_DATA_SNPATHREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'READ-DATA-SNPATHREF'), 'READ_DATA_SNPATHREF', '__READ_DIAG_COMM_CONNECTOR_READ_DATA_SNPATHREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2705, 0), )

    
    READ_DATA_SNPATHREF = property(__READ_DATA_SNPATHREF.value, __READ_DATA_SNPATHREF.set, None, None)

    _ElementMap.update({
        __READ_PARAM_VALUES.name() : __READ_PARAM_VALUES,
        __READ_DIAG_COMM_REF.name() : __READ_DIAG_COMM_REF,
        __READ_DIAG_COMM_SNREF.name() : __READ_DIAG_COMM_SNREF,
        __READ_DATA_SNREF.name() : __READ_DATA_SNREF,
        __READ_DATA_SNPATHREF.name() : __READ_DATA_SNPATHREF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'READ-DIAG-COMM-CONNECTOR', READ_DIAG_COMM_CONNECTOR)


# Complex type READ-PARAM-VALUE with content type ELEMENT_ONLY
class READ_PARAM_VALUE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type READ-PARAM-VALUE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'READ-PARAM-VALUE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2709, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PHYS-CONSTANT-VALUE uses Python identifier PHYS_CONSTANT_VALUE
    __PHYS_CONSTANT_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PHYS-CONSTANT-VALUE'), 'PHYS_CONSTANT_VALUE', '__READ_PARAM_VALUE_PHYS_CONSTANT_VALUE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2712, 0), )

    
    PHYS_CONSTANT_VALUE = property(__PHYS_CONSTANT_VALUE.value, __PHYS_CONSTANT_VALUE.set, None, None)

    
    # Element IN-PARAM-IF-SNREF uses Python identifier IN_PARAM_IF_SNREF
    __IN_PARAM_IF_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNREF'), 'IN_PARAM_IF_SNREF', '__READ_PARAM_VALUE_IN_PARAM_IF_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2714, 0), )

    
    IN_PARAM_IF_SNREF = property(__IN_PARAM_IF_SNREF.value, __IN_PARAM_IF_SNREF.set, None, None)

    
    # Element IN-PARAM-IF-SNPATHREF uses Python identifier IN_PARAM_IF_SNPATHREF
    __IN_PARAM_IF_SNPATHREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNPATHREF'), 'IN_PARAM_IF_SNPATHREF', '__READ_PARAM_VALUE_IN_PARAM_IF_SNPATHREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2715, 0), )

    
    IN_PARAM_IF_SNPATHREF = property(__IN_PARAM_IF_SNPATHREF.value, __IN_PARAM_IF_SNPATHREF.set, None, None)

    
    # Attribute SEMANTIC uses Python identifier SEMANTIC
    __SEMANTIC = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SEMANTIC'), 'SEMANTIC', '__READ_PARAM_VALUE_SEMANTIC', pyxb.binding.datatypes.string, required=True)
    __SEMANTIC._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2718, 0)
    __SEMANTIC._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2718, 0)
    
    SEMANTIC = property(__SEMANTIC.value, __SEMANTIC.set, None, None)

    _ElementMap.update({
        __PHYS_CONSTANT_VALUE.name() : __PHYS_CONSTANT_VALUE,
        __IN_PARAM_IF_SNREF.name() : __IN_PARAM_IF_SNREF,
        __IN_PARAM_IF_SNPATHREF.name() : __IN_PARAM_IF_SNPATHREF
    })
    _AttributeMap.update({
        __SEMANTIC.name() : __SEMANTIC
    })
Namespace.addCategoryObject('typeBinding', 'READ-PARAM-VALUE', READ_PARAM_VALUE)


# Complex type READ-PARAM-VALUES with content type ELEMENT_ONLY
class READ_PARAM_VALUES (pyxb.binding.basis.complexTypeDefinition):
    """Complex type READ-PARAM-VALUES with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'READ-PARAM-VALUES')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2720, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element READ-PARAM-VALUE uses Python identifier READ_PARAM_VALUE
    __READ_PARAM_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'READ-PARAM-VALUE'), 'READ_PARAM_VALUE', '__READ_PARAM_VALUES_READ_PARAM_VALUE', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2723, 0), )

    
    READ_PARAM_VALUE = property(__READ_PARAM_VALUE.value, __READ_PARAM_VALUE.set, None, None)

    _ElementMap.update({
        __READ_PARAM_VALUE.name() : __READ_PARAM_VALUE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'READ-PARAM-VALUES', READ_PARAM_VALUES)


# Complex type RELATED-DIAG-COMM-REFS with content type ELEMENT_ONLY
class RELATED_DIAG_COMM_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type RELATED-DIAG-COMM-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RELATED-DIAG-COMM-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2733, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element RELATED-DIAG-COMMREF uses Python identifier RELATED_DIAG_COMMREF
    __RELATED_DIAG_COMMREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RELATED-DIAG-COMMREF'), 'RELATED_DIAG_COMMREF', '__RELATED_DIAG_COMM_REFS_RELATED_DIAG_COMMREF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2736, 0), )

    
    RELATED_DIAG_COMMREF = property(__RELATED_DIAG_COMMREF.value, __RELATED_DIAG_COMMREF.set, None, None)

    _ElementMap.update({
        __RELATED_DIAG_COMMREF.name() : __RELATED_DIAG_COMMREF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'RELATED-DIAG-COMM-REFS', RELATED_DIAG_COMM_REFS)


# Complex type RELATED-DOC with content type ELEMENT_ONLY
class RELATED_DOC (pyxb.binding.basis.complexTypeDefinition):
    """Complex type RELATED-DOC with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RELATED-DOC')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2739, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element XDOC uses Python identifier XDOC
    __XDOC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'XDOC'), 'XDOC', '__RELATED_DOC_XDOC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2742, 0), )

    
    XDOC = property(__XDOC.value, __XDOC.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__RELATED_DOC_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2743, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    _ElementMap.update({
        __XDOC.name() : __XDOC,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'RELATED-DOC', RELATED_DOC)


# Complex type RELATED-DOCS with content type ELEMENT_ONLY
class RELATED_DOCS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type RELATED-DOCS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RELATED-DOCS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2746, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element RELATED-DOC uses Python identifier RELATED_DOC
    __RELATED_DOC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RELATED-DOC'), 'RELATED_DOC', '__RELATED_DOCS_RELATED_DOC', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2749, 0), )

    
    RELATED_DOC = property(__RELATED_DOC.value, __RELATED_DOC.set, None, None)

    _ElementMap.update({
        __RELATED_DOC.name() : __RELATED_DOC
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'RELATED-DOCS', RELATED_DOCS)


# Complex type REQUEST with content type ELEMENT_ONLY
class REQUEST (pyxb.binding.basis.complexTypeDefinition):
    """Complex type REQUEST with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'REQUEST')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2752, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ADMIN-DATA uses Python identifier ADMIN_DATA
    __ADMIN_DATA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), 'ADMIN_DATA', '__REQUEST_ADMIN_DATA', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2756, 0), )

    
    ADMIN_DATA = property(__ADMIN_DATA.value, __ADMIN_DATA.set, None, None)

    
    # Element PARAMS uses Python identifier PARAMS
    __PARAMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PARAMS'), 'PARAMS', '__REQUEST_PARAMS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2757, 0), )

    
    PARAMS = property(__PARAMS.value, __PARAMS.set, None, None)

    
    # Element SDGS uses Python identifier SDGS
    __SDGS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDGS'), 'SDGS', '__REQUEST_SDGS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2758, 0), )

    
    SDGS = property(__SDGS.value, __SDGS.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__REQUEST_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__REQUEST_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__REQUEST_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__REQUEST_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2760, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2760, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__REQUEST_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2761, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2761, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __ADMIN_DATA.name() : __ADMIN_DATA,
        __PARAMS.name() : __PARAMS,
        __SDGS.name() : __SDGS,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'REQUEST', REQUEST)


# Complex type REQUESTS with content type ELEMENT_ONLY
class REQUESTS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type REQUESTS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'REQUESTS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2763, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element REQUEST uses Python identifier REQUEST
    __REQUEST = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'REQUEST'), 'REQUEST', '__REQUESTS_REQUEST', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2766, 0), )

    
    REQUEST = property(__REQUEST.value, __REQUEST.set, None, None)

    _ElementMap.update({
        __REQUEST.name() : __REQUEST
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'REQUESTS', REQUESTS)


# Complex type RESPONSE with content type ELEMENT_ONLY
class RESPONSE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type RESPONSE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RESPONSE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2785, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ADMIN-DATA uses Python identifier ADMIN_DATA
    __ADMIN_DATA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), 'ADMIN_DATA', '__RESPONSE_ADMIN_DATA', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2789, 0), )

    
    ADMIN_DATA = property(__ADMIN_DATA.value, __ADMIN_DATA.set, None, None)

    
    # Element PARAMS uses Python identifier PARAMS
    __PARAMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PARAMS'), 'PARAMS', '__RESPONSE_PARAMS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2790, 0), )

    
    PARAMS = property(__PARAMS.value, __PARAMS.set, None, None)

    
    # Element SDGS uses Python identifier SDGS
    __SDGS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDGS'), 'SDGS', '__RESPONSE_SDGS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2791, 0), )

    
    SDGS = property(__SDGS.value, __SDGS.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__RESPONSE_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__RESPONSE_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__RESPONSE_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__RESPONSE_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2793, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2793, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__RESPONSE_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2794, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2794, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __ADMIN_DATA.name() : __ADMIN_DATA,
        __PARAMS.name() : __PARAMS,
        __SDGS.name() : __SDGS,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'RESPONSE', RESPONSE)


# Complex type ROLES with content type ELEMENT_ONLY
class ROLES (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ROLES with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ROLES')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2796, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ROLE uses Python identifier ROLE
    __ROLE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ROLE'), 'ROLE', '__ROLES_ROLE', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2799, 0), )

    
    ROLE = property(__ROLE.value, __ROLE.set, None, None)

    _ElementMap.update({
        __ROLE.name() : __ROLE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ROLES', ROLES)


# Complex type SCALE-CONSTRS with content type ELEMENT_ONLY
class SCALE_CONSTRS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SCALE-CONSTRS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SCALE-CONSTRS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2818, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SCALE-CONSTR uses Python identifier SCALE_CONSTR
    __SCALE_CONSTR = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SCALE-CONSTR'), 'SCALE_CONSTR', '__SCALE_CONSTRS_SCALE_CONSTR', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2821, 0), )

    
    SCALE_CONSTR = property(__SCALE_CONSTR.value, __SCALE_CONSTR.set, None, None)

    _ElementMap.update({
        __SCALE_CONSTR.name() : __SCALE_CONSTR
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SCALE-CONSTRS', SCALE_CONSTRS)


# Complex type SD with content type SIMPLE
class SD (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SD with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SD')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2824, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute TI uses Python identifier TI
    __TI = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TI'), 'TI', '__SD_TI', pyxb.binding.datatypes.string)
    __TI._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2828, 0)
    __TI._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2828, 0)
    
    TI = property(__TI.value, __TI.set, None, None)

    
    # Attribute SI uses Python identifier SI
    __SI = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SI'), 'SI', '__SD_SI', pyxb.binding.datatypes.string)
    __SI._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2829, 0)
    __SI._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2829, 0)
    
    SI = property(__SI.value, __SI.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __TI.name() : __TI,
        __SI.name() : __SI
    })
Namespace.addCategoryObject('typeBinding', 'SD', SD)


# Complex type SDG-CAPTION with content type ELEMENT_ONLY
class SDG_CAPTION (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SDG-CAPTION with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SDG-CAPTION')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2851, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__SDG_CAPTION_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__SDG_CAPTION_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__SDG_CAPTION_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__SDG_CAPTION_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2856, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2856, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__SDG_CAPTION_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2857, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2857, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'SDG-CAPTION', SDG_CAPTION)


# Complex type SDGS with content type ELEMENT_ONLY
class SDGS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SDGS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SDGS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2859, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SDG uses Python identifier SDG
    __SDG = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDG'), 'SDG', '__SDGS_SDG', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2862, 0), )

    
    SDG = property(__SDG.value, __SDG.set, None, None)

    _ElementMap.update({
        __SDG.name() : __SDG
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SDGS', SDGS)


# Complex type SECURITY with content type ELEMENT_ONLY
class SECURITY (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SECURITY with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SECURITY')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2865, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SECURITY-METHOD uses Python identifier SECURITY_METHOD
    __SECURITY_METHOD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SECURITY-METHOD'), 'SECURITY_METHOD', '__SECURITY_SECURITY_METHOD', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2868, 0), )

    
    SECURITY_METHOD = property(__SECURITY_METHOD.value, __SECURITY_METHOD.set, None, None)

    
    # Element FW-SIGNATURE uses Python identifier FW_SIGNATURE
    __FW_SIGNATURE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FW-SIGNATURE'), 'FW_SIGNATURE', '__SECURITY_FW_SIGNATURE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2869, 0), )

    
    FW_SIGNATURE = property(__FW_SIGNATURE.value, __FW_SIGNATURE.set, None, None)

    
    # Element FW-CHECKSUM uses Python identifier FW_CHECKSUM
    __FW_CHECKSUM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FW-CHECKSUM'), 'FW_CHECKSUM', '__SECURITY_FW_CHECKSUM', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2870, 0), )

    
    FW_CHECKSUM = property(__FW_CHECKSUM.value, __FW_CHECKSUM.set, None, None)

    
    # Element VALIDITY-FOR uses Python identifier VALIDITY_FOR
    __VALIDITY_FOR = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VALIDITY-FOR'), 'VALIDITY_FOR', '__SECURITY_VALIDITY_FOR', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2871, 0), )

    
    VALIDITY_FOR = property(__VALIDITY_FOR.value, __VALIDITY_FOR.set, None, None)

    _ElementMap.update({
        __SECURITY_METHOD.name() : __SECURITY_METHOD,
        __FW_SIGNATURE.name() : __FW_SIGNATURE,
        __FW_CHECKSUM.name() : __FW_CHECKSUM,
        __VALIDITY_FOR.name() : __VALIDITY_FOR
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SECURITY', SECURITY)


# Complex type SECURITYS with content type ELEMENT_ONLY
class SECURITYS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SECURITYS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SECURITYS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2882, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SECURITY uses Python identifier SECURITY
    __SECURITY = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SECURITY'), 'SECURITY', '__SECURITYS_SECURITY', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2885, 0), )

    
    SECURITY = property(__SECURITY.value, __SECURITY.set, None, None)

    _ElementMap.update({
        __SECURITY.name() : __SECURITY
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SECURITYS', SECURITYS)


# Complex type SEGMENT with content type ELEMENT_ONLY
class SEGMENT (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SEGMENT with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SEGMENT')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2888, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SOURCE-START-ADDRESS uses Python identifier SOURCE_START_ADDRESS
    __SOURCE_START_ADDRESS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SOURCE-START-ADDRESS'), 'SOURCE_START_ADDRESS', '__SEGMENT_SOURCE_START_ADDRESS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2892, 0), )

    
    SOURCE_START_ADDRESS = property(__SOURCE_START_ADDRESS.value, __SOURCE_START_ADDRESS.set, None, None)

    
    # Element COMPRESSED-SIZE uses Python identifier COMPRESSED_SIZE
    __COMPRESSED_SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPRESSED-SIZE'), 'COMPRESSED_SIZE', '__SEGMENT_COMPRESSED_SIZE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2893, 0), )

    
    COMPRESSED_SIZE = property(__COMPRESSED_SIZE.value, __COMPRESSED_SIZE.set, None, None)

    
    # Element UNCOMPRESSED-SIZE uses Python identifier UNCOMPRESSED_SIZE
    __UNCOMPRESSED_SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UNCOMPRESSED-SIZE'), 'UNCOMPRESSED_SIZE', '__SEGMENT_UNCOMPRESSED_SIZE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2895, 0), )

    
    UNCOMPRESSED_SIZE = property(__UNCOMPRESSED_SIZE.value, __UNCOMPRESSED_SIZE.set, None, None)

    
    # Element SOURCE-END-ADDRESS uses Python identifier SOURCE_END_ADDRESS
    __SOURCE_END_ADDRESS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SOURCE-END-ADDRESS'), 'SOURCE_END_ADDRESS', '__SEGMENT_SOURCE_END_ADDRESS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2896, 0), )

    
    SOURCE_END_ADDRESS = property(__SOURCE_END_ADDRESS.value, __SOURCE_END_ADDRESS.set, None, None)

    
    # Element ENCRYPT-COMPRESS-METHOD uses Python identifier ENCRYPT_COMPRESS_METHOD
    __ENCRYPT_COMPRESS_METHOD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ENCRYPT-COMPRESS-METHOD'), 'ENCRYPT_COMPRESS_METHOD', '__SEGMENT_ENCRYPT_COMPRESS_METHOD', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2898, 0), )

    
    ENCRYPT_COMPRESS_METHOD = property(__ENCRYPT_COMPRESS_METHOD.value, __ENCRYPT_COMPRESS_METHOD.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__SEGMENT_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__SEGMENT_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__SEGMENT_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__SEGMENT_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2900, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2900, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__SEGMENT_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2901, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2901, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __SOURCE_START_ADDRESS.name() : __SOURCE_START_ADDRESS,
        __COMPRESSED_SIZE.name() : __COMPRESSED_SIZE,
        __UNCOMPRESSED_SIZE.name() : __UNCOMPRESSED_SIZE,
        __SOURCE_END_ADDRESS.name() : __SOURCE_END_ADDRESS,
        __ENCRYPT_COMPRESS_METHOD.name() : __ENCRYPT_COMPRESS_METHOD,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'SEGMENT', SEGMENT)


# Complex type SEGMENTS with content type ELEMENT_ONLY
class SEGMENTS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SEGMENTS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SEGMENTS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2903, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SEGMENT uses Python identifier SEGMENT
    __SEGMENT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SEGMENT'), 'SEGMENT', '__SEGMENTS_SEGMENT', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2906, 0), )

    
    SEGMENT = property(__SEGMENT.value, __SEGMENT.set, None, None)

    _ElementMap.update({
        __SEGMENT.name() : __SEGMENT
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SEGMENTS', SEGMENTS)


# Complex type SELECTION-TABLE-REFS with content type ELEMENT_ONLY
class SELECTION_TABLE_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SELECTION-TABLE-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SELECTION-TABLE-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2909, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SELECTION-TABLE-REF uses Python identifier SELECTION_TABLE_REF
    __SELECTION_TABLE_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SELECTION-TABLE-REF'), 'SELECTION_TABLE_REF', '__SELECTION_TABLE_REFS_SELECTION_TABLE_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2912, 0), )

    
    SELECTION_TABLE_REF = property(__SELECTION_TABLE_REF.value, __SELECTION_TABLE_REF.set, None, None)

    
    # Element SELECTION-TABLE-SNREF uses Python identifier SELECTION_TABLE_SNREF
    __SELECTION_TABLE_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SELECTION-TABLE-SNREF'), 'SELECTION_TABLE_SNREF', '__SELECTION_TABLE_REFS_SELECTION_TABLE_SNREF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2913, 0), )

    
    SELECTION_TABLE_SNREF = property(__SELECTION_TABLE_SNREF.value, __SELECTION_TABLE_SNREF.set, None, None)

    _ElementMap.update({
        __SELECTION_TABLE_REF.name() : __SELECTION_TABLE_REF,
        __SELECTION_TABLE_SNREF.name() : __SELECTION_TABLE_SNREF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SELECTION-TABLE-REFS', SELECTION_TABLE_REFS)


# Complex type SESSION with content type ELEMENT_ONLY
class SESSION (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SESSION with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SESSION')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2916, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element EXPECTED-IDENTS uses Python identifier EXPECTED_IDENTS
    __EXPECTED_IDENTS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EXPECTED-IDENTS'), 'EXPECTED_IDENTS', '__SESSION_EXPECTED_IDENTS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2920, 0), )

    
    EXPECTED_IDENTS = property(__EXPECTED_IDENTS.value, __EXPECTED_IDENTS.set, None, None)

    
    # Element CHECKSUMS uses Python identifier CHECKSUMS
    __CHECKSUMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CHECKSUMS'), 'CHECKSUMS', '__SESSION_CHECKSUMS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2921, 0), )

    
    CHECKSUMS = property(__CHECKSUMS.value, __CHECKSUMS.set, None, None)

    
    # Element SECURITYS uses Python identifier SECURITYS
    __SECURITYS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SECURITYS'), 'SECURITYS', '__SESSION_SECURITYS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2922, 0), )

    
    SECURITYS = property(__SECURITYS.value, __SECURITYS.set, None, None)

    
    # Element DATABLOCK-REFS uses Python identifier DATABLOCK_REFS
    __DATABLOCK_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DATABLOCK-REFS'), 'DATABLOCK_REFS', '__SESSION_DATABLOCK_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2923, 0), )

    
    DATABLOCK_REFS = property(__DATABLOCK_REFS.value, __DATABLOCK_REFS.set, None, None)

    
    # Element SDGS uses Python identifier SDGS
    __SDGS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDGS'), 'SDGS', '__SESSION_SDGS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2924, 0), )

    
    SDGS = property(__SDGS.value, __SDGS.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__SESSION_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__SESSION_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__SESSION_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__SESSION_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2926, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2926, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__SESSION_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2927, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2927, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __EXPECTED_IDENTS.name() : __EXPECTED_IDENTS,
        __CHECKSUMS.name() : __CHECKSUMS,
        __SECURITYS.name() : __SECURITYS,
        __DATABLOCK_REFS.name() : __DATABLOCK_REFS,
        __SDGS.name() : __SDGS,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'SESSION', SESSION)


# Complex type SESSION-DESCS with content type ELEMENT_ONLY
class SESSION_DESCS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SESSION-DESCS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SESSION-DESCS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2945, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SESSION-DESC uses Python identifier SESSION_DESC
    __SESSION_DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SESSION-DESC'), 'SESSION_DESC', '__SESSION_DESCS_SESSION_DESC', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2948, 0), )

    
    SESSION_DESC = property(__SESSION_DESC.value, __SESSION_DESC.set, None, None)

    _ElementMap.update({
        __SESSION_DESC.name() : __SESSION_DESC
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SESSION-DESCS', SESSION_DESCS)


# Complex type SESSIONS with content type ELEMENT_ONLY
class SESSIONS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SESSIONS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SESSIONS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2951, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SESSION uses Python identifier SESSION
    __SESSION = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SESSION'), 'SESSION', '__SESSIONS_SESSION', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2954, 0), )

    
    SESSION = property(__SESSION.value, __SESSION.set, None, None)

    _ElementMap.update({
        __SESSION.name() : __SESSION
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SESSIONS', SESSIONS)


# Complex type SIMPLE-VALUE with content type SIMPLE
class SIMPLE_VALUE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SIMPLE-VALUE with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SIMPLE-VALUE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2964, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SIMPLE-VALUE', SIMPLE_VALUE)


# Complex type SNREF-TO-TABLEROW with content type ELEMENT_ONLY
class SNREF_TO_TABLEROW (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SNREF-TO-TABLEROW with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SNREF-TO-TABLEROW')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3033, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TABLE-SNREF uses Python identifier TABLE_SNREF
    __TABLE_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TABLE-SNREF'), 'TABLE_SNREF', '__SNREF_TO_TABLEROW_TABLE_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3036, 0), )

    
    TABLE_SNREF = property(__TABLE_SNREF.value, __TABLE_SNREF.set, None, None)

    
    # Element TABLE-ROW-SNREF uses Python identifier TABLE_ROW_SNREF
    __TABLE_ROW_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TABLE-ROW-SNREF'), 'TABLE_ROW_SNREF', '__SNREF_TO_TABLEROW_TABLE_ROW_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3037, 0), )

    
    TABLE_ROW_SNREF = property(__TABLE_ROW_SNREF.value, __TABLE_ROW_SNREF.set, None, None)

    _ElementMap.update({
        __TABLE_SNREF.name() : __TABLE_SNREF,
        __TABLE_ROW_SNREF.name() : __TABLE_ROW_SNREF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SNREF-TO-TABLEROW', SNREF_TO_TABLEROW)


# Complex type SOURCE-END-ADDRESS with content type SIMPLE
class SOURCE_END_ADDRESS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SOURCE-END-ADDRESS with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.hexBinary
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SOURCE-END-ADDRESS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3040, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.hexBinary
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SOURCE-END-ADDRESS', SOURCE_END_ADDRESS)


# Complex type SPECIAL-DATA with content type EMPTY
class SPECIAL_DATA (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SPECIAL-DATA with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SPECIAL-DATA')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3046, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SPECIAL-DATA', SPECIAL_DATA)


# Complex type STATE with content type ELEMENT_ONLY
class STATE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type STATE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'STATE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3075, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__STATE_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__STATE_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__STATE_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__STATE_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3080, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3080, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__STATE_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3081, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3081, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'STATE', STATE)


# Complex type STATE-CHART with content type ELEMENT_ONLY
class STATE_CHART (pyxb.binding.basis.complexTypeDefinition):
    """Complex type STATE-CHART with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'STATE-CHART')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3083, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SEMANTIC uses Python identifier SEMANTIC
    __SEMANTIC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SEMANTIC'), 'SEMANTIC', '__STATE_CHART_SEMANTIC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3087, 0), )

    
    SEMANTIC = property(__SEMANTIC.value, __SEMANTIC.set, None, None)

    
    # Element STATE-TRANSITIONS uses Python identifier STATE_TRANSITIONS
    __STATE_TRANSITIONS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'STATE-TRANSITIONS'), 'STATE_TRANSITIONS', '__STATE_CHART_STATE_TRANSITIONS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3088, 0), )

    
    STATE_TRANSITIONS = property(__STATE_TRANSITIONS.value, __STATE_TRANSITIONS.set, None, None)

    
    # Element START-STATE-SNREF uses Python identifier START_STATE_SNREF
    __START_STATE_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'START-STATE-SNREF'), 'START_STATE_SNREF', '__STATE_CHART_START_STATE_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3089, 0), )

    
    START_STATE_SNREF = property(__START_STATE_SNREF.value, __START_STATE_SNREF.set, None, None)

    
    # Element STATES uses Python identifier STATES
    __STATES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'STATES'), 'STATES', '__STATE_CHART_STATES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3090, 0), )

    
    STATES = property(__STATES.value, __STATES.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__STATE_CHART_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__STATE_CHART_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__STATE_CHART_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__STATE_CHART_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3092, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3092, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__STATE_CHART_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3093, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3093, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __SEMANTIC.name() : __SEMANTIC,
        __STATE_TRANSITIONS.name() : __STATE_TRANSITIONS,
        __START_STATE_SNREF.name() : __START_STATE_SNREF,
        __STATES.name() : __STATES,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'STATE-CHART', STATE_CHART)


# Complex type STATE-CHARTS with content type ELEMENT_ONLY
class STATE_CHARTS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type STATE-CHARTS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'STATE-CHARTS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3095, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element STATE-CHART uses Python identifier STATE_CHART
    __STATE_CHART = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'STATE-CHART'), 'STATE_CHART', '__STATE_CHARTS_STATE_CHART', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3098, 0), )

    
    STATE_CHART = property(__STATE_CHART.value, __STATE_CHART.set, None, None)

    _ElementMap.update({
        __STATE_CHART.name() : __STATE_CHART
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'STATE-CHARTS', STATE_CHARTS)


# Complex type STATES with content type ELEMENT_ONLY
class STATES (pyxb.binding.basis.complexTypeDefinition):
    """Complex type STATES with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'STATES')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3101, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element STATE uses Python identifier STATE
    __STATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'STATE'), 'STATE', '__STATES_STATE', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3104, 0), )

    
    STATE = property(__STATE.value, __STATE.set, None, None)

    _ElementMap.update({
        __STATE.name() : __STATE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'STATES', STATES)


# Complex type STATE-TRANSITION with content type ELEMENT_ONLY
class STATE_TRANSITION (pyxb.binding.basis.complexTypeDefinition):
    """Complex type STATE-TRANSITION with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'STATE-TRANSITION')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3107, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SOURCE-SNREF uses Python identifier SOURCE_SNREF
    __SOURCE_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SOURCE-SNREF'), 'SOURCE_SNREF', '__STATE_TRANSITION_SOURCE_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3111, 0), )

    
    SOURCE_SNREF = property(__SOURCE_SNREF.value, __SOURCE_SNREF.set, None, None)

    
    # Element TARGET-SNREF uses Python identifier TARGET_SNREF
    __TARGET_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TARGET-SNREF'), 'TARGET_SNREF', '__STATE_TRANSITION_TARGET_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3112, 0), )

    
    TARGET_SNREF = property(__TARGET_SNREF.value, __TARGET_SNREF.set, None, None)

    
    # Element EXTERNAL-ACCESS-METHOD uses Python identifier EXTERNAL_ACCESS_METHOD
    __EXTERNAL_ACCESS_METHOD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EXTERNAL-ACCESS-METHOD'), 'EXTERNAL_ACCESS_METHOD', '__STATE_TRANSITION_EXTERNAL_ACCESS_METHOD', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3113, 0), )

    
    EXTERNAL_ACCESS_METHOD = property(__EXTERNAL_ACCESS_METHOD.value, __EXTERNAL_ACCESS_METHOD.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__STATE_TRANSITION_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__STATE_TRANSITION_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__STATE_TRANSITION_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__STATE_TRANSITION_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3115, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3115, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__STATE_TRANSITION_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3116, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3116, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __SOURCE_SNREF.name() : __SOURCE_SNREF,
        __TARGET_SNREF.name() : __TARGET_SNREF,
        __EXTERNAL_ACCESS_METHOD.name() : __EXTERNAL_ACCESS_METHOD,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'STATE-TRANSITION', STATE_TRANSITION)


# Complex type STATE-TRANSITION-REFS with content type ELEMENT_ONLY
class STATE_TRANSITION_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type STATE-TRANSITION-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'STATE-TRANSITION-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3129, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element STATE-TRANSITION-REF uses Python identifier STATE_TRANSITIONREF
    __STATE_TRANSITIONREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'STATE-TRANSITION-REF'), 'STATE_TRANSITIONREF', '__STATE_TRANSITION_REFS_STATE_TRANSITIONREF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3132, 0), )

    
    STATE_TRANSITIONREF = property(__STATE_TRANSITIONREF.value, __STATE_TRANSITIONREF.set, None, None)

    _ElementMap.update({
        __STATE_TRANSITIONREF.name() : __STATE_TRANSITIONREF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'STATE-TRANSITION-REFS', STATE_TRANSITION_REFS)


# Complex type STATE-TRANSITIONS with content type ELEMENT_ONLY
class STATE_TRANSITIONS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type STATE-TRANSITIONS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'STATE-TRANSITIONS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3135, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element STATE-TRANSITION uses Python identifier STATE_TRANSITION
    __STATE_TRANSITION = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'STATE-TRANSITION'), 'STATE_TRANSITION', '__STATE_TRANSITIONS_STATE_TRANSITION', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3138, 0), )

    
    STATE_TRANSITION = property(__STATE_TRANSITION.value, __STATE_TRANSITION.set, None, None)

    _ElementMap.update({
        __STATE_TRANSITION.name() : __STATE_TRANSITION
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'STATE-TRANSITIONS', STATE_TRANSITIONS)


# Complex type STATIC-FIELDS with content type ELEMENT_ONLY
class STATIC_FIELDS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type STATIC-FIELDS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'STATIC-FIELDS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3152, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element STATIC-FIELD uses Python identifier STATIC_FIELD
    __STATIC_FIELD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'STATIC-FIELD'), 'STATIC_FIELD', '__STATIC_FIELDS_STATIC_FIELD', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3155, 0), )

    
    STATIC_FIELD = property(__STATIC_FIELD.value, __STATIC_FIELD.set, None, None)

    _ElementMap.update({
        __STATIC_FIELD.name() : __STATIC_FIELD
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'STATIC-FIELDS', STATIC_FIELDS)


# Complex type STRUCTURES with content type ELEMENT_ONLY
class STRUCTURES (pyxb.binding.basis.complexTypeDefinition):
    """Complex type STRUCTURES with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'STRUCTURES')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3166, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element STRUCTURE uses Python identifier STRUCTURE
    __STRUCTURE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'STRUCTURE'), 'STRUCTURE', '__STRUCTURES_STRUCTURE', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3169, 0), )

    
    STRUCTURE = property(__STRUCTURE.value, __STRUCTURE.set, None, None)

    _ElementMap.update({
        __STRUCTURE.name() : __STRUCTURE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'STRUCTURES', STRUCTURES)


# Complex type SUB-COMPONENT with content type ELEMENT_ONLY
class SUB_COMPONENT (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SUB-COMPONENT with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SUB-COMPONENT')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3172, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SUB-COMPONENT-PATTERNS uses Python identifier SUB_COMPONENT_PATTERNS
    __SUB_COMPONENT_PATTERNS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SUB-COMPONENT-PATTERNS'), 'SUB_COMPONENT_PATTERNS', '__SUB_COMPONENT_SUB_COMPONENT_PATTERNS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3176, 0), )

    
    SUB_COMPONENT_PATTERNS = property(__SUB_COMPONENT_PATTERNS.value, __SUB_COMPONENT_PATTERNS.set, None, None)

    
    # Element SUB-COMPONENT-PARAM-CONNECTORS uses Python identifier SUB_COMPONENT_PARAM_CONNECTORS
    __SUB_COMPONENT_PARAM_CONNECTORS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SUB-COMPONENT-PARAM-CONNECTORS'), 'SUB_COMPONENT_PARAM_CONNECTORS', '__SUB_COMPONENT_SUB_COMPONENT_PARAM_CONNECTORS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3177, 0), )

    
    SUB_COMPONENT_PARAM_CONNECTORS = property(__SUB_COMPONENT_PARAM_CONNECTORS.value, __SUB_COMPONENT_PARAM_CONNECTORS.set, None, None)

    
    # Element TABLE-ROW-CONNECTORS uses Python identifier TABLE_ROW_CONNECTORS
    __TABLE_ROW_CONNECTORS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TABLE-ROW-CONNECTORS'), 'TABLE_ROW_CONNECTORS', '__SUB_COMPONENT_TABLE_ROW_CONNECTORS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3179, 0), )

    
    TABLE_ROW_CONNECTORS = property(__TABLE_ROW_CONNECTORS.value, __TABLE_ROW_CONNECTORS.set, None, None)

    
    # Element ENV-DATA-CONNECTORS uses Python identifier ENV_DATA_CONNECTORS
    __ENV_DATA_CONNECTORS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ENV-DATA-CONNECTORS'), 'ENV_DATA_CONNECTORS', '__SUB_COMPONENT_ENV_DATA_CONNECTORS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3180, 0), )

    
    ENV_DATA_CONNECTORS = property(__ENV_DATA_CONNECTORS.value, __ENV_DATA_CONNECTORS.set, None, None)

    
    # Element DTC-CONNECTORS uses Python identifier DTC_CONNECTORS
    __DTC_CONNECTORS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DTC-CONNECTORS'), 'DTC_CONNECTORS', '__SUB_COMPONENT_DTC_CONNECTORS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3181, 0), )

    
    DTC_CONNECTORS = property(__DTC_CONNECTORS.value, __DTC_CONNECTORS.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__SUB_COMPONENT_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__SUB_COMPONENT_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__SUB_COMPONENT_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__SUB_COMPONENT_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3183, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3183, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__SUB_COMPONENT_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3184, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3184, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    
    # Attribute SEMANTIC uses Python identifier SEMANTIC
    __SEMANTIC = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SEMANTIC'), 'SEMANTIC', '__SUB_COMPONENT_SEMANTIC', pyxb.binding.datatypes.string)
    __SEMANTIC._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3185, 0)
    __SEMANTIC._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3185, 0)
    
    SEMANTIC = property(__SEMANTIC.value, __SEMANTIC.set, None, None)

    _ElementMap.update({
        __SUB_COMPONENT_PATTERNS.name() : __SUB_COMPONENT_PATTERNS,
        __SUB_COMPONENT_PARAM_CONNECTORS.name() : __SUB_COMPONENT_PARAM_CONNECTORS,
        __TABLE_ROW_CONNECTORS.name() : __TABLE_ROW_CONNECTORS,
        __ENV_DATA_CONNECTORS.name() : __ENV_DATA_CONNECTORS,
        __DTC_CONNECTORS.name() : __DTC_CONNECTORS,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID,
        __SEMANTIC.name() : __SEMANTIC
    })
Namespace.addCategoryObject('typeBinding', 'SUB-COMPONENT', SUB_COMPONENT)


# Complex type SUB-COMPONENT-PARAM-CONNECTOR with content type ELEMENT_ONLY
class SUB_COMPONENT_PARAM_CONNECTOR (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SUB-COMPONENT-PARAM-CONNECTOR with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SUB-COMPONENT-PARAM-CONNECTOR')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3187, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DIAG-COMM-SNREF uses Python identifier DIAG_COMM_SNREF
    __DIAG_COMM_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-SNREF'), 'DIAG_COMM_SNREF', '__SUB_COMPONENT_PARAM_CONNECTOR_DIAG_COMM_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3191, 0), )

    
    DIAG_COMM_SNREF = property(__DIAG_COMM_SNREF.value, __DIAG_COMM_SNREF.set, None, None)

    
    # Element OUT-PARAM-IF-REFS uses Python identifier OUT_PARAM_IF_REFS
    __OUT_PARAM_IF_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-REFS'), 'OUT_PARAM_IF_REFS', '__SUB_COMPONENT_PARAM_CONNECTOR_OUT_PARAM_IF_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3192, 0), )

    
    OUT_PARAM_IF_REFS = property(__OUT_PARAM_IF_REFS.value, __OUT_PARAM_IF_REFS.set, None, None)

    
    # Element IN-PARAM-IF-REFS uses Python identifier IN_PARAM_IF_REFS
    __IN_PARAM_IF_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-REFS'), 'IN_PARAM_IF_REFS', '__SUB_COMPONENT_PARAM_CONNECTOR_IN_PARAM_IF_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3193, 0), )

    
    IN_PARAM_IF_REFS = property(__IN_PARAM_IF_REFS.value, __IN_PARAM_IF_REFS.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__SUB_COMPONENT_PARAM_CONNECTOR_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__SUB_COMPONENT_PARAM_CONNECTOR_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__SUB_COMPONENT_PARAM_CONNECTOR_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__SUB_COMPONENT_PARAM_CONNECTOR_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3195, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3195, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__SUB_COMPONENT_PARAM_CONNECTOR_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3196, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3196, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __DIAG_COMM_SNREF.name() : __DIAG_COMM_SNREF,
        __OUT_PARAM_IF_REFS.name() : __OUT_PARAM_IF_REFS,
        __IN_PARAM_IF_REFS.name() : __IN_PARAM_IF_REFS,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'SUB-COMPONENT-PARAM-CONNECTOR', SUB_COMPONENT_PARAM_CONNECTOR)


# Complex type SUB-COMPONENT-PARAM-CONNECTORS with content type ELEMENT_ONLY
class SUB_COMPONENT_PARAM_CONNECTORS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SUB-COMPONENT-PARAM-CONNECTORS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SUB-COMPONENT-PARAM-CONNECTORS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3198, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SUBCOMPONENT-PARAM-CONNECTOR uses Python identifier SUBCOMPONENT_PARAM_CONNECTOR
    __SUBCOMPONENT_PARAM_CONNECTOR = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SUBCOMPONENT-PARAM-CONNECTOR'), 'SUBCOMPONENT_PARAM_CONNECTOR', '__SUB_COMPONENT_PARAM_CONNECTORS_SUBCOMPONENT_PARAM_CONNECTOR', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3201, 0), )

    
    SUBCOMPONENT_PARAM_CONNECTOR = property(__SUBCOMPONENT_PARAM_CONNECTOR.value, __SUBCOMPONENT_PARAM_CONNECTOR.set, None, None)

    _ElementMap.update({
        __SUBCOMPONENT_PARAM_CONNECTOR.name() : __SUBCOMPONENT_PARAM_CONNECTOR
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SUB-COMPONENT-PARAM-CONNECTORS', SUB_COMPONENT_PARAM_CONNECTORS)


# Complex type SUB-COMPONENT-PATTERN with content type ELEMENT_ONLY
class SUB_COMPONENT_PATTERN (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SUB-COMPONENT-PATTERN with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SUB-COMPONENT-PATTERN')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3204, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element MATCHING-PARAMETERS uses Python identifier MATCHING_PARAMETERS
    __MATCHING_PARAMETERS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MATCHING-PARAMETERS'), 'MATCHING_PARAMETERS', '__SUB_COMPONENT_PATTERN_MATCHING_PARAMETERS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3207, 0), )

    
    MATCHING_PARAMETERS = property(__MATCHING_PARAMETERS.value, __MATCHING_PARAMETERS.set, None, None)

    _ElementMap.update({
        __MATCHING_PARAMETERS.name() : __MATCHING_PARAMETERS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SUB-COMPONENT-PATTERN', SUB_COMPONENT_PATTERN)


# Complex type SUB-COMPONENT-PATTERNS with content type ELEMENT_ONLY
class SUB_COMPONENT_PATTERNS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SUB-COMPONENT-PATTERNS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SUB-COMPONENT-PATTERNS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3210, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SUB-COMPONENTPATTERN uses Python identifier SUB_COMPONENTPATTERN
    __SUB_COMPONENTPATTERN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SUB-COMPONENTPATTERN'), 'SUB_COMPONENTPATTERN', '__SUB_COMPONENT_PATTERNS_SUB_COMPONENTPATTERN', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3213, 0), )

    
    SUB_COMPONENTPATTERN = property(__SUB_COMPONENTPATTERN.value, __SUB_COMPONENTPATTERN.set, None, None)

    _ElementMap.update({
        __SUB_COMPONENTPATTERN.name() : __SUB_COMPONENTPATTERN
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SUB-COMPONENT-PATTERNS', SUB_COMPONENT_PATTERNS)


# Complex type SUB-COMPONENTS with content type ELEMENT_ONLY
class SUB_COMPONENTS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SUB-COMPONENTS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SUB-COMPONENTS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3216, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SUB-COMPONENT uses Python identifier SUB_COMPONENT
    __SUB_COMPONENT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SUB-COMPONENT'), 'SUB_COMPONENT', '__SUB_COMPONENTS_SUB_COMPONENT', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3219, 0), )

    
    SUB_COMPONENT = property(__SUB_COMPONENT.value, __SUB_COMPONENT.set, None, None)

    _ElementMap.update({
        __SUB_COMPONENT.name() : __SUB_COMPONENT
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SUB-COMPONENTS', SUB_COMPONENTS)


# Complex type SUPPORTED-DYN-ID with content type SIMPLE
class SUPPORTED_DYN_ID (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SUPPORTED-DYN-ID with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.hexBinary
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SUPPORTED-DYN-ID')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3222, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.hexBinary
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SUPPORTED-DYN-ID', SUPPORTED_DYN_ID)


# Complex type SUPPORTED-DYN-IDS with content type ELEMENT_ONLY
class SUPPORTED_DYN_IDS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SUPPORTED-DYN-IDS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SUPPORTED-DYN-IDS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3228, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SUPPORTED-DYN-ID uses Python identifier SUPPORTED_DYN_ID
    __SUPPORTED_DYN_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SUPPORTED-DYN-ID'), 'SUPPORTED_DYN_ID', '__SUPPORTED_DYN_IDS_SUPPORTED_DYN_ID', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3231, 0), )

    
    SUPPORTED_DYN_ID = property(__SUPPORTED_DYN_ID.value, __SUPPORTED_DYN_ID.set, None, None)

    _ElementMap.update({
        __SUPPORTED_DYN_ID.name() : __SUPPORTED_DYN_ID
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SUPPORTED-DYN-IDS', SUPPORTED_DYN_IDS)


# Complex type SWITCH-KEY with content type ELEMENT_ONLY
class SWITCH_KEY (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SWITCH-KEY with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SWITCH-KEY')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3234, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element BYTE-POSITION uses Python identifier BYTE_POSITION
    __BYTE_POSITION = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION'), 'BYTE_POSITION', '__SWITCH_KEY_BYTE_POSITION', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3237, 0), )

    
    BYTE_POSITION = property(__BYTE_POSITION.value, __BYTE_POSITION.set, None, None)

    
    # Element BIT-POSITION uses Python identifier BIT_POSITION
    __BIT_POSITION = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BIT-POSITION'), 'BIT_POSITION', '__SWITCH_KEY_BIT_POSITION', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3238, 0), )

    
    BIT_POSITION = property(__BIT_POSITION.value, __BIT_POSITION.set, None, None)

    
    # Element DATA-OBJECT-PROP-REF uses Python identifier DATA_OBJECT_PROP_REF
    __DATA_OBJECT_PROP_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-REF'), 'DATA_OBJECT_PROP_REF', '__SWITCH_KEY_DATA_OBJECT_PROP_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3245, 0), )

    
    DATA_OBJECT_PROP_REF = property(__DATA_OBJECT_PROP_REF.value, __DATA_OBJECT_PROP_REF.set, None, None)

    _ElementMap.update({
        __BYTE_POSITION.name() : __BYTE_POSITION,
        __BIT_POSITION.name() : __BIT_POSITION,
        __DATA_OBJECT_PROP_REF.name() : __DATA_OBJECT_PROP_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SWITCH-KEY', SWITCH_KEY)


# Complex type SW-VARIABLE with content type ELEMENT_ONLY
class SW_VARIABLE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SW-VARIABLE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SW-VARIABLE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3248, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ORIGIN uses Python identifier ORIGIN
    __ORIGIN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ORIGIN'), 'ORIGIN', '__SW_VARIABLE_ORIGIN', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3252, 0), )

    
    ORIGIN = property(__ORIGIN.value, __ORIGIN.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__SW_VARIABLE_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__SW_VARIABLE_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__SW_VARIABLE_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__SW_VARIABLE_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3254, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3254, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __ORIGIN.name() : __ORIGIN,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'SW-VARIABLE', SW_VARIABLE)


# Complex type SW-VARIABLES with content type ELEMENT_ONLY
class SW_VARIABLES (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SW-VARIABLES with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SW-VARIABLES')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3256, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SW-VARIABLE uses Python identifier SW_VARIABLE
    __SW_VARIABLE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SW-VARIABLE'), 'SW_VARIABLE', '__SW_VARIABLES_SW_VARIABLE', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3259, 0), )

    
    SW_VARIABLE = property(__SW_VARIABLE.value, __SW_VARIABLE.set, None, None)

    _ElementMap.update({
        __SW_VARIABLE.name() : __SW_VARIABLE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SW-VARIABLES', SW_VARIABLES)


# Complex type SYSTEM-ITEMS with content type ELEMENT_ONLY
class SYSTEM_ITEMS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SYSTEM-ITEMS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SYSTEM-ITEMS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3282, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SYSTEM-ITEM uses Python identifier SYSTEM_ITEM
    __SYSTEM_ITEM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SYSTEM-ITEM'), 'SYSTEM_ITEM', '__SYSTEM_ITEMS_SYSTEM_ITEM', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3285, 0), )

    
    SYSTEM_ITEM = property(__SYSTEM_ITEM.value, __SYSTEM_ITEM.set, None, None)

    _ElementMap.update({
        __SYSTEM_ITEM.name() : __SYSTEM_ITEM
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SYSTEM-ITEMS', SYSTEM_ITEMS)


# Complex type TABLE with content type ELEMENT_ONLY
class TABLE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type TABLE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TABLE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3288, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element KEY-LABEL uses Python identifier KEY_LABEL
    __KEY_LABEL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'KEY-LABEL'), 'KEY_LABEL', '__TABLE_KEY_LABEL', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3292, 0), )

    
    KEY_LABEL = property(__KEY_LABEL.value, __KEY_LABEL.set, None, None)

    
    # Element STRUCT-LABEL uses Python identifier STRUCT_LABEL
    __STRUCT_LABEL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'STRUCT-LABEL'), 'STRUCT_LABEL', '__TABLE_STRUCT_LABEL', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3293, 0), )

    
    STRUCT_LABEL = property(__STRUCT_LABEL.value, __STRUCT_LABEL.set, None, None)

    
    # Element ADMIN-DATA uses Python identifier ADMIN_DATA
    __ADMIN_DATA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), 'ADMIN_DATA', '__TABLE_ADMIN_DATA', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3294, 0), )

    
    ADMIN_DATA = property(__ADMIN_DATA.value, __ADMIN_DATA.set, None, None)

    
    # Element KEY-DOP-REF uses Python identifier KEY_DOP_REF
    __KEY_DOP_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'KEY-DOP-REF'), 'KEY_DOP_REF', '__TABLE_KEY_DOP_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3295, 0), )

    
    KEY_DOP_REF = property(__KEY_DOP_REF.value, __KEY_DOP_REF.set, None, None)

    
    # Element TABLE-DIAG-COMM-CONNECTORS uses Python identifier TABLE_DIAG_COMM_CONNECTORS
    __TABLE_DIAG_COMM_CONNECTORS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TABLE-DIAG-COMM-CONNECTORS'), 'TABLE_DIAG_COMM_CONNECTORS', '__TABLE_TABLE_DIAG_COMM_CONNECTORS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3297, 0), )

    
    TABLE_DIAG_COMM_CONNECTORS = property(__TABLE_DIAG_COMM_CONNECTORS.value, __TABLE_DIAG_COMM_CONNECTORS.set, None, None)

    
    # Element SDGS uses Python identifier SDGS
    __SDGS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDGS'), 'SDGS', '__TABLE_SDGS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3299, 0), )

    
    SDGS = property(__SDGS.value, __SDGS.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__TABLE_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__TABLE_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__TABLE_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Element TABLE-ROW-REF uses Python identifier TABLE_ROW_REF
    __TABLE_ROW_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TABLE-ROW-REF'), 'TABLE_ROW_REF', '__TABLE_TABLE_ROW_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3760, 0), )

    
    TABLE_ROW_REF = property(__TABLE_ROW_REF.value, __TABLE_ROW_REF.set, None, None)

    
    # Element TABLE-ROW uses Python identifier TABLE_ROW
    __TABLE_ROW = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TABLE-ROW'), 'TABLE_ROW', '__TABLE_TABLE_ROW', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3761, 0), )

    
    TABLE_ROW = property(__TABLE_ROW.value, __TABLE_ROW.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__TABLE_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3301, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3301, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__TABLE_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3302, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3302, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    
    # Attribute SEMANTIC uses Python identifier SEMANTIC
    __SEMANTIC = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SEMANTIC'), 'SEMANTIC', '__TABLE_SEMANTIC', pyxb.binding.datatypes.string)
    __SEMANTIC._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3303, 0)
    __SEMANTIC._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3303, 0)
    
    SEMANTIC = property(__SEMANTIC.value, __SEMANTIC.set, None, None)

    _ElementMap.update({
        __KEY_LABEL.name() : __KEY_LABEL,
        __STRUCT_LABEL.name() : __STRUCT_LABEL,
        __ADMIN_DATA.name() : __ADMIN_DATA,
        __KEY_DOP_REF.name() : __KEY_DOP_REF,
        __TABLE_DIAG_COMM_CONNECTORS.name() : __TABLE_DIAG_COMM_CONNECTORS,
        __SDGS.name() : __SDGS,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC,
        __TABLE_ROW_REF.name() : __TABLE_ROW_REF,
        __TABLE_ROW.name() : __TABLE_ROW
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID,
        __SEMANTIC.name() : __SEMANTIC
    })
Namespace.addCategoryObject('typeBinding', 'TABLE', TABLE)


# Complex type TABLE-DIAG-COMM-CONNECTOR with content type ELEMENT_ONLY
class TABLE_DIAG_COMM_CONNECTOR (pyxb.binding.basis.complexTypeDefinition):
    """Complex type TABLE-DIAG-COMM-CONNECTOR with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TABLE-DIAG-COMM-CONNECTOR')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3305, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SEMANTIC uses Python identifier SEMANTIC
    __SEMANTIC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SEMANTIC'), 'SEMANTIC', '__TABLE_DIAG_COMM_CONNECTOR_SEMANTIC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3308, 0), )

    
    SEMANTIC = property(__SEMANTIC.value, __SEMANTIC.set, None, None)

    
    # Element DIAG-COMM-REF uses Python identifier DIAG_COMM_REF
    __DIAG_COMM_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-REF'), 'DIAG_COMM_REF', '__TABLE_DIAG_COMM_CONNECTOR_DIAG_COMM_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3310, 0), )

    
    DIAG_COMM_REF = property(__DIAG_COMM_REF.value, __DIAG_COMM_REF.set, None, None)

    
    # Element DIAG-COMM-SNREF uses Python identifier DIAG_COMM_SNREF
    __DIAG_COMM_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-SNREF'), 'DIAG_COMM_SNREF', '__TABLE_DIAG_COMM_CONNECTOR_DIAG_COMM_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3311, 0), )

    
    DIAG_COMM_SNREF = property(__DIAG_COMM_SNREF.value, __DIAG_COMM_SNREF.set, None, None)

    _ElementMap.update({
        __SEMANTIC.name() : __SEMANTIC,
        __DIAG_COMM_REF.name() : __DIAG_COMM_REF,
        __DIAG_COMM_SNREF.name() : __DIAG_COMM_SNREF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'TABLE-DIAG-COMM-CONNECTOR', TABLE_DIAG_COMM_CONNECTOR)


# Complex type TABLE-DIAG-COMM-CONNECTORS with content type ELEMENT_ONLY
class TABLE_DIAG_COMM_CONNECTORS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type TABLE-DIAG-COMM-CONNECTORS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TABLE-DIAG-COMM-CONNECTORS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3315, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TABLE-DIAG-COMMCONNECTOR uses Python identifier TABLE_DIAG_COMMCONNECTOR
    __TABLE_DIAG_COMMCONNECTOR = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TABLE-DIAG-COMMCONNECTOR'), 'TABLE_DIAG_COMMCONNECTOR', '__TABLE_DIAG_COMM_CONNECTORS_TABLE_DIAG_COMMCONNECTOR', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3318, 0), )

    
    TABLE_DIAG_COMMCONNECTOR = property(__TABLE_DIAG_COMMCONNECTOR.value, __TABLE_DIAG_COMMCONNECTOR.set, None, None)

    _ElementMap.update({
        __TABLE_DIAG_COMMCONNECTOR.name() : __TABLE_DIAG_COMMCONNECTOR
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'TABLE-DIAG-COMM-CONNECTORS', TABLE_DIAG_COMM_CONNECTORS)


# Complex type TABLE-ROW with content type ELEMENT_ONLY
class TABLE_ROW (pyxb.binding.basis.complexTypeDefinition):
    """Complex type TABLE-ROW with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TABLE-ROW')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3345, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element KEY uses Python identifier KEY
    __KEY = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'KEY'), 'KEY', '__TABLE_ROW_KEY', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3349, 0), )

    
    KEY = property(__KEY.value, __KEY.set, None, None)

    
    # Element DATA-OBJECT-PROP-REF uses Python identifier DATA_OBJECT_PROP_REF
    __DATA_OBJECT_PROP_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-REF'), 'DATA_OBJECT_PROP_REF', '__TABLE_ROW_DATA_OBJECT_PROP_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3352, 0), )

    
    DATA_OBJECT_PROP_REF = property(__DATA_OBJECT_PROP_REF.value, __DATA_OBJECT_PROP_REF.set, None, None)

    
    # Element DATA-OBJECT-PROP-SNREF uses Python identifier DATA_OBJECT_PROP_SNREF
    __DATA_OBJECT_PROP_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-SNREF'), 'DATA_OBJECT_PROP_SNREF', '__TABLE_ROW_DATA_OBJECT_PROP_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3353, 0), )

    
    DATA_OBJECT_PROP_SNREF = property(__DATA_OBJECT_PROP_SNREF.value, __DATA_OBJECT_PROP_SNREF.set, None, None)

    
    # Element STRUCTURE-REF uses Python identifier STRUCTURE_REF
    __STRUCTURE_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'STRUCTURE-REF'), 'STRUCTURE_REF', '__TABLE_ROW_STRUCTURE_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3356, 0), )

    
    STRUCTURE_REF = property(__STRUCTURE_REF.value, __STRUCTURE_REF.set, None, None)

    
    # Element STRUCTURE-SNREF uses Python identifier STRUCTURE_SNREF
    __STRUCTURE_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'STRUCTURE-SNREF'), 'STRUCTURE_SNREF', '__TABLE_ROW_STRUCTURE_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3357, 0), )

    
    STRUCTURE_SNREF = property(__STRUCTURE_SNREF.value, __STRUCTURE_SNREF.set, None, None)

    
    # Element SDGS uses Python identifier SDGS
    __SDGS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDGS'), 'SDGS', '__TABLE_ROW_SDGS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3360, 0), )

    
    SDGS = property(__SDGS.value, __SDGS.set, None, None)

    
    # Element AUDIENCE uses Python identifier AUDIENCE
    __AUDIENCE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AUDIENCE'), 'AUDIENCE', '__TABLE_ROW_AUDIENCE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3361, 0), )

    
    AUDIENCE = property(__AUDIENCE.value, __AUDIENCE.set, None, None)

    
    # Element FUNCT-CLASS-REFS uses Python identifier FUNCT_CLASS_REFS
    __FUNCT_CLASS_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASS-REFS'), 'FUNCT_CLASS_REFS', '__TABLE_ROW_FUNCT_CLASS_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3362, 0), )

    
    FUNCT_CLASS_REFS = property(__FUNCT_CLASS_REFS.value, __FUNCT_CLASS_REFS.set, None, None)

    
    # Element STATE-TRANSITION-REFS uses Python identifier STATE_TRANSITION_REFS
    __STATE_TRANSITION_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'STATE-TRANSITION-REFS'), 'STATE_TRANSITION_REFS', '__TABLE_ROW_STATE_TRANSITION_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3363, 0), )

    
    STATE_TRANSITION_REFS = property(__STATE_TRANSITION_REFS.value, __STATE_TRANSITION_REFS.set, None, None)

    
    # Element PRE-CONDITION-STATE-REFS uses Python identifier PRE_CONDITION_STATE_REFS
    __PRE_CONDITION_STATE_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PRE-CONDITION-STATE-REFS'), 'PRE_CONDITION_STATE_REFS', '__TABLE_ROW_PRE_CONDITION_STATE_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3364, 0), )

    
    PRE_CONDITION_STATE_REFS = property(__PRE_CONDITION_STATE_REFS.value, __PRE_CONDITION_STATE_REFS.set, None, None)

    
    # Element ADMIN-DATA uses Python identifier ADMIN_DATA
    __ADMIN_DATA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), 'ADMIN_DATA', '__TABLE_ROW_ADMIN_DATA', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3366, 0), )

    
    ADMIN_DATA = property(__ADMIN_DATA.value, __ADMIN_DATA.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__TABLE_ROW_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__TABLE_ROW_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__TABLE_ROW_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__TABLE_ROW_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3368, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3368, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__TABLE_ROW_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3369, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3369, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    
    # Attribute IS-EXECUTABLE uses Python identifier IS_EXECUTABLE
    __IS_EXECUTABLE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IS-EXECUTABLE'), 'IS_EXECUTABLE', '__TABLE_ROW_IS_EXECUTABLE', pyxb.binding.datatypes.boolean, unicode_default='true')
    __IS_EXECUTABLE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3370, 0)
    __IS_EXECUTABLE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3370, 0)
    
    IS_EXECUTABLE = property(__IS_EXECUTABLE.value, __IS_EXECUTABLE.set, None, None)

    
    # Attribute SEMANTIC uses Python identifier SEMANTIC
    __SEMANTIC = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SEMANTIC'), 'SEMANTIC', '__TABLE_ROW_SEMANTIC', pyxb.binding.datatypes.string)
    __SEMANTIC._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3371, 0)
    __SEMANTIC._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3371, 0)
    
    SEMANTIC = property(__SEMANTIC.value, __SEMANTIC.set, None, None)

    
    # Attribute IS-MANDATORY uses Python identifier IS_MANDATORY
    __IS_MANDATORY = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IS-MANDATORY'), 'IS_MANDATORY', '__TABLE_ROW_IS_MANDATORY', pyxb.binding.datatypes.boolean, unicode_default='false')
    __IS_MANDATORY._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3372, 0)
    __IS_MANDATORY._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3372, 0)
    
    IS_MANDATORY = property(__IS_MANDATORY.value, __IS_MANDATORY.set, None, None)

    
    # Attribute IS-FINAL uses Python identifier IS_FINAL
    __IS_FINAL = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IS-FINAL'), 'IS_FINAL', '__TABLE_ROW_IS_FINAL', pyxb.binding.datatypes.boolean, unicode_default='false')
    __IS_FINAL._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3373, 0)
    __IS_FINAL._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3373, 0)
    
    IS_FINAL = property(__IS_FINAL.value, __IS_FINAL.set, None, None)

    _ElementMap.update({
        __KEY.name() : __KEY,
        __DATA_OBJECT_PROP_REF.name() : __DATA_OBJECT_PROP_REF,
        __DATA_OBJECT_PROP_SNREF.name() : __DATA_OBJECT_PROP_SNREF,
        __STRUCTURE_REF.name() : __STRUCTURE_REF,
        __STRUCTURE_SNREF.name() : __STRUCTURE_SNREF,
        __SDGS.name() : __SDGS,
        __AUDIENCE.name() : __AUDIENCE,
        __FUNCT_CLASS_REFS.name() : __FUNCT_CLASS_REFS,
        __STATE_TRANSITION_REFS.name() : __STATE_TRANSITION_REFS,
        __PRE_CONDITION_STATE_REFS.name() : __PRE_CONDITION_STATE_REFS,
        __ADMIN_DATA.name() : __ADMIN_DATA,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID,
        __IS_EXECUTABLE.name() : __IS_EXECUTABLE,
        __SEMANTIC.name() : __SEMANTIC,
        __IS_MANDATORY.name() : __IS_MANDATORY,
        __IS_FINAL.name() : __IS_FINAL
    })
Namespace.addCategoryObject('typeBinding', 'TABLE-ROW', TABLE_ROW)


# Complex type TABLE-ROW-CONNECTOR with content type ELEMENT_ONLY
class TABLE_ROW_CONNECTOR (pyxb.binding.basis.complexTypeDefinition):
    """Complex type TABLE-ROW-CONNECTOR with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TABLE-ROW-CONNECTOR')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3375, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TABLE-REF uses Python identifier TABLE_REF
    __TABLE_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TABLE-REF'), 'TABLE_REF', '__TABLE_ROW_CONNECTOR_TABLE_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3379, 0), )

    
    TABLE_REF = property(__TABLE_REF.value, __TABLE_REF.set, None, None)

    
    # Element TABLE-ROW-SNREF uses Python identifier TABLE_ROW_SNREF
    __TABLE_ROW_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TABLE-ROW-SNREF'), 'TABLE_ROW_SNREF', '__TABLE_ROW_CONNECTOR_TABLE_ROW_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3380, 0), )

    
    TABLE_ROW_SNREF = property(__TABLE_ROW_SNREF.value, __TABLE_ROW_SNREF.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__TABLE_ROW_CONNECTOR_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__TABLE_ROW_CONNECTOR_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__TABLE_ROW_CONNECTOR_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    _ElementMap.update({
        __TABLE_REF.name() : __TABLE_REF,
        __TABLE_ROW_SNREF.name() : __TABLE_ROW_SNREF,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'TABLE-ROW-CONNECTOR', TABLE_ROW_CONNECTOR)


# Complex type TABLE-ROW-CONNECTORS with content type ELEMENT_ONLY
class TABLE_ROW_CONNECTORS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type TABLE-ROW-CONNECTORS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TABLE-ROW-CONNECTORS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3383, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TABLE-ROW-CONNECTOR uses Python identifier TABLE_ROW_CONNECTOR
    __TABLE_ROW_CONNECTOR = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TABLE-ROW-CONNECTOR'), 'TABLE_ROW_CONNECTOR', '__TABLE_ROW_CONNECTORS_TABLE_ROW_CONNECTOR', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3386, 0), )

    
    TABLE_ROW_CONNECTOR = property(__TABLE_ROW_CONNECTOR.value, __TABLE_ROW_CONNECTOR.set, None, None)

    _ElementMap.update({
        __TABLE_ROW_CONNECTOR.name() : __TABLE_ROW_CONNECTOR
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'TABLE-ROW-CONNECTORS', TABLE_ROW_CONNECTORS)


# Complex type TABLES with content type ELEMENT_ONLY
class TABLES (pyxb.binding.basis.complexTypeDefinition):
    """Complex type TABLES with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TABLES')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3389, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TABLE uses Python identifier TABLE
    __TABLE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TABLE'), 'TABLE', '__TABLES_TABLE', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3392, 0), )

    
    TABLE = property(__TABLE.value, __TABLE.set, None, None)

    _ElementMap.update({
        __TABLE.name() : __TABLE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'TABLES', TABLES)


# Complex type TARGET-ADDR-OFFSET with content type EMPTY
class TARGET_ADDR_OFFSET (pyxb.binding.basis.complexTypeDefinition):
    """Complex type TARGET-ADDR-OFFSET with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TARGET-ADDR-OFFSET')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3406, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'TARGET-ADDR-OFFSET', TARGET_ADDR_OFFSET)


# Complex type TEAM-MEMBER with content type ELEMENT_ONLY
class TEAM_MEMBER (pyxb.binding.basis.complexTypeDefinition):
    """Complex type TEAM-MEMBER with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TEAM-MEMBER')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3409, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ROLES uses Python identifier ROLES
    __ROLES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ROLES'), 'ROLES', '__TEAM_MEMBER_ROLES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3413, 0), )

    
    ROLES = property(__ROLES.value, __ROLES.set, None, None)

    
    # Element DEPARTMENT uses Python identifier DEPARTMENT
    __DEPARTMENT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DEPARTMENT'), 'DEPARTMENT', '__TEAM_MEMBER_DEPARTMENT', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3414, 0), )

    
    DEPARTMENT = property(__DEPARTMENT.value, __DEPARTMENT.set, None, None)

    
    # Element ADDRESS uses Python identifier ADDRESS
    __ADDRESS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ADDRESS'), 'ADDRESS', '__TEAM_MEMBER_ADDRESS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3415, 0), )

    
    ADDRESS = property(__ADDRESS.value, __ADDRESS.set, None, None)

    
    # Element ZIP uses Python identifier ZIP
    __ZIP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ZIP'), 'ZIP', '__TEAM_MEMBER_ZIP', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3416, 0), )

    
    ZIP = property(__ZIP.value, __ZIP.set, None, None)

    
    # Element CITY uses Python identifier CITY
    __CITY = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CITY'), 'CITY', '__TEAM_MEMBER_CITY', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3417, 0), )

    
    CITY = property(__CITY.value, __CITY.set, None, None)

    
    # Element PHONE uses Python identifier PHONE
    __PHONE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PHONE'), 'PHONE', '__TEAM_MEMBER_PHONE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3418, 0), )

    
    PHONE = property(__PHONE.value, __PHONE.set, None, None)

    
    # Element FAX uses Python identifier FAX
    __FAX = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FAX'), 'FAX', '__TEAM_MEMBER_FAX', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3419, 0), )

    
    FAX = property(__FAX.value, __FAX.set, None, None)

    
    # Element EMAIL uses Python identifier EMAIL
    __EMAIL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EMAIL'), 'EMAIL', '__TEAM_MEMBER_EMAIL', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3420, 0), )

    
    EMAIL = property(__EMAIL.value, __EMAIL.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__TEAM_MEMBER_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__TEAM_MEMBER_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__TEAM_MEMBER_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__TEAM_MEMBER_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3422, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3422, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__TEAM_MEMBER_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3423, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3423, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __ROLES.name() : __ROLES,
        __DEPARTMENT.name() : __DEPARTMENT,
        __ADDRESS.name() : __ADDRESS,
        __ZIP.name() : __ZIP,
        __CITY.name() : __CITY,
        __PHONE.name() : __PHONE,
        __FAX.name() : __FAX,
        __EMAIL.name() : __EMAIL,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'TEAM-MEMBER', TEAM_MEMBER)


# Complex type TEAM-MEMBERS with content type ELEMENT_ONLY
class TEAM_MEMBERS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type TEAM-MEMBERS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TEAM-MEMBERS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3425, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TEAM-MEMBER uses Python identifier TEAM_MEMBER
    __TEAM_MEMBER = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TEAM-MEMBER'), 'TEAM_MEMBER', '__TEAM_MEMBERS_TEAM_MEMBER', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3428, 0), )

    
    TEAM_MEMBER = property(__TEAM_MEMBER.value, __TEAM_MEMBER.set, None, None)

    _ElementMap.update({
        __TEAM_MEMBER.name() : __TEAM_MEMBER
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'TEAM-MEMBERS', TEAM_MEMBERS)


# Complex type TEXT with content type SIMPLE
class TEXT (pyxb.binding.basis.complexTypeDefinition):
    """Complex type TEXT with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TEXT')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3438, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute TI uses Python identifier TI
    __TI = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TI'), 'TI', '__TEXT_TI', pyxb.binding.datatypes.string)
    __TI._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3442, 0)
    __TI._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3442, 0)
    
    TI = property(__TI.value, __TI.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __TI.name() : __TI
    })
Namespace.addCategoryObject('typeBinding', 'TEXT', TEXT)


# Complex type UNCOMPRESSED-SIZE with content type SIMPLE
class UNCOMPRESSED_SIZE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type UNCOMPRESSED-SIZE with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.unsignedInt
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UNCOMPRESSED-SIZE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3454, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.unsignedInt
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'UNCOMPRESSED-SIZE', UNCOMPRESSED_SIZE)


# Complex type UNION-VALUE with content type EMPTY
class UNION_VALUE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type UNION-VALUE with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UNION-VALUE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3460, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'UNION-VALUE', UNION_VALUE)


# Complex type UNIT with content type ELEMENT_ONLY
class UNIT (pyxb.binding.basis.complexTypeDefinition):
    """Complex type UNIT with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UNIT')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3463, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DISPLAY-NAME uses Python identifier DISPLAY_NAME
    __DISPLAY_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DISPLAY-NAME'), 'DISPLAY_NAME', '__UNIT_DISPLAY_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3467, 0), )

    
    DISPLAY_NAME = property(__DISPLAY_NAME.value, __DISPLAY_NAME.set, None, None)

    
    # Element FACTOR-SI-TO-UNIT uses Python identifier FACTOR_SI_TO_UNIT
    __FACTOR_SI_TO_UNIT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FACTOR-SI-TO-UNIT'), 'FACTOR_SI_TO_UNIT', '__UNIT_FACTOR_SI_TO_UNIT', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3468, 0), )

    
    FACTOR_SI_TO_UNIT = property(__FACTOR_SI_TO_UNIT.value, __FACTOR_SI_TO_UNIT.set, None, None)

    
    # Element OFFSET-SI-TO-UNIT uses Python identifier OFFSET_SI_TO_UNIT
    __OFFSET_SI_TO_UNIT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OFFSET-SI-TO-UNIT'), 'OFFSET_SI_TO_UNIT', '__UNIT_OFFSET_SI_TO_UNIT', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3469, 0), )

    
    OFFSET_SI_TO_UNIT = property(__OFFSET_SI_TO_UNIT.value, __OFFSET_SI_TO_UNIT.set, None, None)

    
    # Element PHYSICAL-DIMENSION-REF uses Python identifier PHYSICAL_DIMENSION_REF
    __PHYSICAL_DIMENSION_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PHYSICAL-DIMENSION-REF'), 'PHYSICAL_DIMENSION_REF', '__UNIT_PHYSICAL_DIMENSION_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3470, 0), )

    
    PHYSICAL_DIMENSION_REF = property(__PHYSICAL_DIMENSION_REF.value, __PHYSICAL_DIMENSION_REF.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__UNIT_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__UNIT_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__UNIT_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__UNIT_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3472, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3472, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__UNIT_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3473, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3473, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __DISPLAY_NAME.name() : __DISPLAY_NAME,
        __FACTOR_SI_TO_UNIT.name() : __FACTOR_SI_TO_UNIT,
        __OFFSET_SI_TO_UNIT.name() : __OFFSET_SI_TO_UNIT,
        __PHYSICAL_DIMENSION_REF.name() : __PHYSICAL_DIMENSION_REF,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'UNIT', UNIT)


# Complex type UNIT-GROUP with content type ELEMENT_ONLY
class UNIT_GROUP (pyxb.binding.basis.complexTypeDefinition):
    """Complex type UNIT-GROUP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UNIT-GROUP')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3475, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CATEGORY uses Python identifier CATEGORY
    __CATEGORY = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CATEGORY'), 'CATEGORY', '__UNIT_GROUP_CATEGORY', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3479, 0), )

    
    CATEGORY = property(__CATEGORY.value, __CATEGORY.set, None, None)

    
    # Element UNIT-REFS uses Python identifier UNIT_REFS
    __UNIT_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UNIT-REFS'), 'UNIT_REFS', '__UNIT_GROUP_UNIT_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3480, 0), )

    
    UNIT_REFS = property(__UNIT_REFS.value, __UNIT_REFS.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__UNIT_GROUP_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__UNIT_GROUP_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__UNIT_GROUP_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__UNIT_GROUP_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3482, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3482, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __CATEGORY.name() : __CATEGORY,
        __UNIT_REFS.name() : __UNIT_REFS,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'UNIT-GROUP', UNIT_GROUP)


# Complex type UNIT-GROUPS with content type ELEMENT_ONLY
class UNIT_GROUPS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type UNIT-GROUPS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UNIT-GROUPS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3490, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element UNIT-GROUP uses Python identifier UNIT_GROUP
    __UNIT_GROUP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UNIT-GROUP'), 'UNIT_GROUP', '__UNIT_GROUPS_UNIT_GROUP', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3493, 0), )

    
    UNIT_GROUP = property(__UNIT_GROUP.value, __UNIT_GROUP.set, None, None)

    _ElementMap.update({
        __UNIT_GROUP.name() : __UNIT_GROUP
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'UNIT-GROUPS', UNIT_GROUPS)


# Complex type UNIT-REFS with content type ELEMENT_ONLY
class UNIT_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type UNIT-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UNIT-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3496, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element UNIT-REF uses Python identifier UNIT_REF
    __UNIT_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UNIT-REF'), 'UNIT_REF', '__UNIT_REFS_UNIT_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3499, 0), )

    
    UNIT_REF = property(__UNIT_REF.value, __UNIT_REF.set, None, None)

    _ElementMap.update({
        __UNIT_REF.name() : __UNIT_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'UNIT-REFS', UNIT_REFS)


# Complex type UNITS with content type ELEMENT_ONLY
class UNITS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type UNITS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UNITS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3502, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element UNIT uses Python identifier UNIT
    __UNIT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UNIT'), 'UNIT', '__UNITS_UNIT', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3505, 0), )

    
    UNIT = property(__UNIT.value, __UNIT.set, None, None)

    _ElementMap.update({
        __UNIT.name() : __UNIT
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'UNITS', UNITS)


# Complex type UNIT-SPEC with content type ELEMENT_ONLY
class UNIT_SPEC (pyxb.binding.basis.complexTypeDefinition):
    """Complex type UNIT-SPEC with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UNIT-SPEC')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3508, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ADMIN-DATA uses Python identifier ADMIN_DATA
    __ADMIN_DATA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), 'ADMIN_DATA', '__UNIT_SPEC_ADMIN_DATA', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3511, 0), )

    
    ADMIN_DATA = property(__ADMIN_DATA.value, __ADMIN_DATA.set, None, None)

    
    # Element UNIT-GROUPS uses Python identifier UNIT_GROUPS
    __UNIT_GROUPS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UNIT-GROUPS'), 'UNIT_GROUPS', '__UNIT_SPEC_UNIT_GROUPS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3512, 0), )

    
    UNIT_GROUPS = property(__UNIT_GROUPS.value, __UNIT_GROUPS.set, None, None)

    
    # Element UNITS uses Python identifier UNITS
    __UNITS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UNITS'), 'UNITS', '__UNIT_SPEC_UNITS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3513, 0), )

    
    UNITS = property(__UNITS.value, __UNITS.set, None, None)

    
    # Element PHYSICAL-DIMENSIONS uses Python identifier PHYSICAL_DIMENSIONS
    __PHYSICAL_DIMENSIONS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PHYSICAL-DIMENSIONS'), 'PHYSICAL_DIMENSIONS', '__UNIT_SPEC_PHYSICAL_DIMENSIONS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3514, 0), )

    
    PHYSICAL_DIMENSIONS = property(__PHYSICAL_DIMENSIONS.value, __PHYSICAL_DIMENSIONS.set, None, None)

    
    # Element SDGS uses Python identifier SDGS
    __SDGS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDGS'), 'SDGS', '__UNIT_SPEC_SDGS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3515, 0), )

    
    SDGS = property(__SDGS.value, __SDGS.set, None, None)

    _ElementMap.update({
        __ADMIN_DATA.name() : __ADMIN_DATA,
        __UNIT_GROUPS.name() : __UNIT_GROUPS,
        __UNITS.name() : __UNITS,
        __PHYSICAL_DIMENSIONS.name() : __PHYSICAL_DIMENSIONS,
        __SDGS.name() : __SDGS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'UNIT-SPEC', UNIT_SPEC)


# Complex type V with content type SIMPLE
class V (pyxb.binding.basis.complexTypeDefinition):
    """Complex type V with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.double
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'V')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3526, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.double
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'V', V)


# Complex type VALID-BASE-VARIANT with content type ELEMENT_ONLY
class VALID_BASE_VARIANT (pyxb.binding.basis.complexTypeDefinition):
    """Complex type VALID-BASE-VARIANT with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VALID-BASE-VARIANT')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3532, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ECU-VARIANT-SNREFS uses Python identifier ECU_VARIANT_SNREFS
    __ECU_VARIANT_SNREFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ECU-VARIANT-SNREFS'), 'ECU_VARIANT_SNREFS', '__VALID_BASE_VARIANT_ECU_VARIANT_SNREFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3535, 0), )

    
    ECU_VARIANT_SNREFS = property(__ECU_VARIANT_SNREFS.value, __ECU_VARIANT_SNREFS.set, None, None)

    
    # Element BASE-VARIANT-SNREF uses Python identifier BASE_VARIANT_SNREF
    __BASE_VARIANT_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BASE-VARIANT-SNREF'), 'BASE_VARIANT_SNREF', '__VALID_BASE_VARIANT_BASE_VARIANT_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3536, 0), )

    
    BASE_VARIANT_SNREF = property(__BASE_VARIANT_SNREF.value, __BASE_VARIANT_SNREF.set, None, None)

    _ElementMap.update({
        __ECU_VARIANT_SNREFS.name() : __ECU_VARIANT_SNREFS,
        __BASE_VARIANT_SNREF.name() : __BASE_VARIANT_SNREF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'VALID-BASE-VARIANT', VALID_BASE_VARIANT)


# Complex type VALID-BASE-VARIANTS with content type ELEMENT_ONLY
class VALID_BASE_VARIANTS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type VALID-BASE-VARIANTS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VALID-BASE-VARIANTS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3539, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element VALID-BASE-VARIANT uses Python identifier VALID_BASE_VARIANT
    __VALID_BASE_VARIANT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VALID-BASE-VARIANT'), 'VALID_BASE_VARIANT', '__VALID_BASE_VARIANTS_VALID_BASE_VARIANT', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3542, 0), )

    
    VALID_BASE_VARIANT = property(__VALID_BASE_VARIANT.value, __VALID_BASE_VARIANT.set, None, None)

    _ElementMap.update({
        __VALID_BASE_VARIANT.name() : __VALID_BASE_VARIANT
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'VALID-BASE-VARIANTS', VALID_BASE_VARIANTS)


# Complex type VARIABLE-GROUP with content type ELEMENT_ONLY
class VARIABLE_GROUP (pyxb.binding.basis.complexTypeDefinition):
    """Complex type VARIABLE-GROUP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VARIABLE-GROUP')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3575, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__VARIABLE_GROUP_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__VARIABLE_GROUP_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__VARIABLE_GROUP_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__VARIABLE_GROUP_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3580, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3580, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__VARIABLE_GROUP_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3581, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3581, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'VARIABLE-GROUP', VARIABLE_GROUP)


# Complex type VARIABLE-GROUPS with content type ELEMENT_ONLY
class VARIABLE_GROUPS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type VARIABLE-GROUPS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VARIABLE-GROUPS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3583, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element VARIABLE-GROUP uses Python identifier VARIABLE_GROUP
    __VARIABLE_GROUP = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VARIABLE-GROUP'), 'VARIABLE_GROUP', '__VARIABLE_GROUPS_VARIABLE_GROUP', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3586, 0), )

    
    VARIABLE_GROUP = property(__VARIABLE_GROUP.value, __VARIABLE_GROUP.set, None, None)

    _ElementMap.update({
        __VARIABLE_GROUP.name() : __VARIABLE_GROUP
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'VARIABLE-GROUPS', VARIABLE_GROUPS)


# Complex type VEHICLE-CONNECTOR with content type ELEMENT_ONLY
class VEHICLE_CONNECTOR (pyxb.binding.basis.complexTypeDefinition):
    """Complex type VEHICLE-CONNECTOR with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VEHICLE-CONNECTOR')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3589, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element VEHICLE-CONNECTOR-PINS uses Python identifier VEHICLE_CONNECTOR_PINS
    __VEHICLE_CONNECTOR_PINS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VEHICLE-CONNECTOR-PINS'), 'VEHICLE_CONNECTOR_PINS', '__VEHICLE_CONNECTOR_VEHICLE_CONNECTOR_PINS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3593, 0), )

    
    VEHICLE_CONNECTOR_PINS = property(__VEHICLE_CONNECTOR_PINS.value, __VEHICLE_CONNECTOR_PINS.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__VEHICLE_CONNECTOR_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__VEHICLE_CONNECTOR_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__VEHICLE_CONNECTOR_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__VEHICLE_CONNECTOR_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3595, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3595, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __VEHICLE_CONNECTOR_PINS.name() : __VEHICLE_CONNECTOR_PINS,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'VEHICLE-CONNECTOR', VEHICLE_CONNECTOR)


# Complex type VEHICLE-CONNECTOR-PIN-REFS with content type ELEMENT_ONLY
class VEHICLE_CONNECTOR_PIN_REFS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type VEHICLE-CONNECTOR-PIN-REFS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VEHICLE-CONNECTOR-PIN-REFS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3607, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element VEHICLE-CONNECTOR-PIN-REF uses Python identifier VEHICLE_CONNECTOR_PIN_REF
    __VEHICLE_CONNECTOR_PIN_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VEHICLE-CONNECTOR-PIN-REF'), 'VEHICLE_CONNECTOR_PIN_REF', '__VEHICLE_CONNECTOR_PIN_REFS_VEHICLE_CONNECTOR_PIN_REF', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3610, 0), )

    
    VEHICLE_CONNECTOR_PIN_REF = property(__VEHICLE_CONNECTOR_PIN_REF.value, __VEHICLE_CONNECTOR_PIN_REF.set, None, None)

    _ElementMap.update({
        __VEHICLE_CONNECTOR_PIN_REF.name() : __VEHICLE_CONNECTOR_PIN_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'VEHICLE-CONNECTOR-PIN-REFS', VEHICLE_CONNECTOR_PIN_REFS)


# Complex type VEHICLE-CONNECTOR-PINS with content type ELEMENT_ONLY
class VEHICLE_CONNECTOR_PINS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type VEHICLE-CONNECTOR-PINS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VEHICLE-CONNECTOR-PINS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3613, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element VEHICLE-CONNECTORPIN uses Python identifier VEHICLE_CONNECTORPIN
    __VEHICLE_CONNECTORPIN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VEHICLE-CONNECTORPIN'), 'VEHICLE_CONNECTORPIN', '__VEHICLE_CONNECTOR_PINS_VEHICLE_CONNECTORPIN', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3616, 0), )

    
    VEHICLE_CONNECTORPIN = property(__VEHICLE_CONNECTORPIN.value, __VEHICLE_CONNECTORPIN.set, None, None)

    _ElementMap.update({
        __VEHICLE_CONNECTORPIN.name() : __VEHICLE_CONNECTORPIN
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'VEHICLE-CONNECTOR-PINS', VEHICLE_CONNECTOR_PINS)


# Complex type VEHICLE-CONNECTORS with content type ELEMENT_ONLY
class VEHICLE_CONNECTORS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type VEHICLE-CONNECTORS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VEHICLE-CONNECTORS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3619, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element VEHICLE-CONNECTOR uses Python identifier VEHICLE_CONNECTOR
    __VEHICLE_CONNECTOR = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VEHICLE-CONNECTOR'), 'VEHICLE_CONNECTOR', '__VEHICLE_CONNECTORS_VEHICLE_CONNECTOR', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3622, 0), )

    
    VEHICLE_CONNECTOR = property(__VEHICLE_CONNECTOR.value, __VEHICLE_CONNECTOR.set, None, None)

    _ElementMap.update({
        __VEHICLE_CONNECTOR.name() : __VEHICLE_CONNECTOR
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'VEHICLE-CONNECTORS', VEHICLE_CONNECTORS)


# Complex type VEHICLE-INFORMATION with content type ELEMENT_ONLY
class VEHICLE_INFORMATION (pyxb.binding.basis.complexTypeDefinition):
    """Complex type VEHICLE-INFORMATION with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VEHICLE-INFORMATION')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3625, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element INFO-COMPONENT-REFS uses Python identifier INFO_COMPONENT_REFS
    __INFO_COMPONENT_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'INFO-COMPONENT-REFS'), 'INFO_COMPONENT_REFS', '__VEHICLE_INFORMATION_INFO_COMPONENT_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3629, 0), )

    
    INFO_COMPONENT_REFS = property(__INFO_COMPONENT_REFS.value, __INFO_COMPONENT_REFS.set, None, None)

    
    # Element VEHICLE-CONNECTORS uses Python identifier VEHICLE_CONNECTORS
    __VEHICLE_CONNECTORS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VEHICLE-CONNECTORS'), 'VEHICLE_CONNECTORS', '__VEHICLE_INFORMATION_VEHICLE_CONNECTORS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3630, 0), )

    
    VEHICLE_CONNECTORS = property(__VEHICLE_CONNECTORS.value, __VEHICLE_CONNECTORS.set, None, None)

    
    # Element LOGICAL-LINKS uses Python identifier LOGICAL_LINKS
    __LOGICAL_LINKS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LOGICAL-LINKS'), 'LOGICAL_LINKS', '__VEHICLE_INFORMATION_LOGICAL_LINKS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3631, 0), )

    
    LOGICAL_LINKS = property(__LOGICAL_LINKS.value, __LOGICAL_LINKS.set, None, None)

    
    # Element ECU-GROUPS uses Python identifier ECU_GROUPS
    __ECU_GROUPS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ECU-GROUPS'), 'ECU_GROUPS', '__VEHICLE_INFORMATION_ECU_GROUPS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3632, 0), )

    
    ECU_GROUPS = property(__ECU_GROUPS.value, __ECU_GROUPS.set, None, None)

    
    # Element PHYSICAL-VEHICLE-LINKS uses Python identifier PHYSICAL_VEHICLE_LINKS
    __PHYSICAL_VEHICLE_LINKS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PHYSICAL-VEHICLE-LINKS'), 'PHYSICAL_VEHICLE_LINKS', '__VEHICLE_INFORMATION_PHYSICAL_VEHICLE_LINKS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3633, 0), )

    
    PHYSICAL_VEHICLE_LINKS = property(__PHYSICAL_VEHICLE_LINKS.value, __PHYSICAL_VEHICLE_LINKS.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__VEHICLE_INFORMATION_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__VEHICLE_INFORMATION_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__VEHICLE_INFORMATION_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__VEHICLE_INFORMATION_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3635, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3635, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    _ElementMap.update({
        __INFO_COMPONENT_REFS.name() : __INFO_COMPONENT_REFS,
        __VEHICLE_CONNECTORS.name() : __VEHICLE_CONNECTORS,
        __LOGICAL_LINKS.name() : __LOGICAL_LINKS,
        __ECU_GROUPS.name() : __ECU_GROUPS,
        __PHYSICAL_VEHICLE_LINKS.name() : __PHYSICAL_VEHICLE_LINKS,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __OID.name() : __OID
    })
Namespace.addCategoryObject('typeBinding', 'VEHICLE-INFORMATION', VEHICLE_INFORMATION)


# Complex type VEHICLE-INFORMATIONS with content type ELEMENT_ONLY
class VEHICLE_INFORMATIONS (pyxb.binding.basis.complexTypeDefinition):
    """Complex type VEHICLE-INFORMATIONS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VEHICLE-INFORMATIONS')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3637, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element VEHICLE-INFORMATION uses Python identifier VEHICLE_INFORMATION
    __VEHICLE_INFORMATION = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VEHICLE-INFORMATION'), 'VEHICLE_INFORMATION', '__VEHICLE_INFORMATIONS_VEHICLE_INFORMATION', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3640, 0), )

    
    VEHICLE_INFORMATION = property(__VEHICLE_INFORMATION.value, __VEHICLE_INFORMATION.set, None, None)

    _ElementMap.update({
        __VEHICLE_INFORMATION.name() : __VEHICLE_INFORMATION
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'VEHICLE-INFORMATIONS', VEHICLE_INFORMATIONS)


# Complex type VT with content type SIMPLE
class VT (pyxb.binding.basis.complexTypeDefinition):
    """Complex type VT with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VT')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3667, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute TI uses Python identifier TI
    __TI = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TI'), 'TI', '__VT_TI', pyxb.binding.datatypes.string)
    __TI._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3671, 0)
    __TI._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3671, 0)
    
    TI = property(__TI.value, __TI.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __TI.name() : __TI
    })
Namespace.addCategoryObject('typeBinding', 'VT', VT)


# Complex type WRITE-DIAG-COMM-CONNECTOR with content type ELEMENT_ONLY
class WRITE_DIAG_COMM_CONNECTOR (pyxb.binding.basis.complexTypeDefinition):
    """Complex type WRITE-DIAG-COMM-CONNECTOR with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'WRITE-DIAG-COMM-CONNECTOR')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3675, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element WRITE-DIAG-COMM-REF uses Python identifier WRITE_DIAG_COMM_REF
    __WRITE_DIAG_COMM_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'WRITE-DIAG-COMM-REF'), 'WRITE_DIAG_COMM_REF', '__WRITE_DIAG_COMM_CONNECTOR_WRITE_DIAG_COMM_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3679, 0), )

    
    WRITE_DIAG_COMM_REF = property(__WRITE_DIAG_COMM_REF.value, __WRITE_DIAG_COMM_REF.set, None, None)

    
    # Element WRITE-DIAG-COMM-SNREF uses Python identifier WRITE_DIAG_COMM_SNREF
    __WRITE_DIAG_COMM_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'WRITE-DIAG-COMM-SNREF'), 'WRITE_DIAG_COMM_SNREF', '__WRITE_DIAG_COMM_CONNECTOR_WRITE_DIAG_COMM_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3680, 0), )

    
    WRITE_DIAG_COMM_SNREF = property(__WRITE_DIAG_COMM_SNREF.value, __WRITE_DIAG_COMM_SNREF.set, None, None)

    
    # Element WRITE-PARAM-VALUES uses Python identifier WRITE_PARAM_VALUES
    __WRITE_PARAM_VALUES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'WRITE-PARAM-VALUES'), 'WRITE_PARAM_VALUES', '__WRITE_DIAG_COMM_CONNECTOR_WRITE_PARAM_VALUES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3682, 0), )

    
    WRITE_PARAM_VALUES = property(__WRITE_PARAM_VALUES.value, __WRITE_PARAM_VALUES.set, None, None)

    
    # Element WRITE-DATA-SNREF uses Python identifier WRITE_DATA_SNREF
    __WRITE_DATA_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'WRITE-DATA-SNREF'), 'WRITE_DATA_SNREF', '__WRITE_DIAG_COMM_CONNECTOR_WRITE_DATA_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3684, 0), )

    
    WRITE_DATA_SNREF = property(__WRITE_DATA_SNREF.value, __WRITE_DATA_SNREF.set, None, None)

    
    # Element WRITE-DATA-SNPATHREF uses Python identifier WRITE_DATA_SNPATHREF
    __WRITE_DATA_SNPATHREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'WRITE-DATA-SNPATHREF'), 'WRITE_DATA_SNPATHREF', '__WRITE_DIAG_COMM_CONNECTOR_WRITE_DATA_SNPATHREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3685, 0), )

    
    WRITE_DATA_SNPATHREF = property(__WRITE_DATA_SNPATHREF.value, __WRITE_DATA_SNPATHREF.set, None, None)

    _ElementMap.update({
        __WRITE_DIAG_COMM_REF.name() : __WRITE_DIAG_COMM_REF,
        __WRITE_DIAG_COMM_SNREF.name() : __WRITE_DIAG_COMM_SNREF,
        __WRITE_PARAM_VALUES.name() : __WRITE_PARAM_VALUES,
        __WRITE_DATA_SNREF.name() : __WRITE_DATA_SNREF,
        __WRITE_DATA_SNPATHREF.name() : __WRITE_DATA_SNPATHREF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'WRITE-DIAG-COMM-CONNECTOR', WRITE_DIAG_COMM_CONNECTOR)


# Complex type WRITE-PARAM-VALUE with content type ELEMENT_ONLY
class WRITE_PARAM_VALUE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type WRITE-PARAM-VALUE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'WRITE-PARAM-VALUE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3689, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PHYS-CONSTANT-VALUE uses Python identifier PHYS_CONSTANT_VALUE
    __PHYS_CONSTANT_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PHYS-CONSTANT-VALUE'), 'PHYS_CONSTANT_VALUE', '__WRITE_PARAM_VALUE_PHYS_CONSTANT_VALUE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3692, 0), )

    
    PHYS_CONSTANT_VALUE = property(__PHYS_CONSTANT_VALUE.value, __PHYS_CONSTANT_VALUE.set, None, None)

    
    # Element IN-PARAM-IF-SNREF uses Python identifier IN_PARAM_IF_SNREF
    __IN_PARAM_IF_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNREF'), 'IN_PARAM_IF_SNREF', '__WRITE_PARAM_VALUE_IN_PARAM_IF_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3694, 0), )

    
    IN_PARAM_IF_SNREF = property(__IN_PARAM_IF_SNREF.value, __IN_PARAM_IF_SNREF.set, None, None)

    
    # Element IN-PARAM-IF-SNPATHREF uses Python identifier IN_PARAM_IF_SNPATHREF
    __IN_PARAM_IF_SNPATHREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNPATHREF'), 'IN_PARAM_IF_SNPATHREF', '__WRITE_PARAM_VALUE_IN_PARAM_IF_SNPATHREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3695, 0), )

    
    IN_PARAM_IF_SNPATHREF = property(__IN_PARAM_IF_SNPATHREF.value, __IN_PARAM_IF_SNPATHREF.set, None, None)

    
    # Attribute SEMANTIC uses Python identifier SEMANTIC
    __SEMANTIC = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SEMANTIC'), 'SEMANTIC', '__WRITE_PARAM_VALUE_SEMANTIC', pyxb.binding.datatypes.string, required=True)
    __SEMANTIC._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3698, 0)
    __SEMANTIC._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3698, 0)
    
    SEMANTIC = property(__SEMANTIC.value, __SEMANTIC.set, None, None)

    _ElementMap.update({
        __PHYS_CONSTANT_VALUE.name() : __PHYS_CONSTANT_VALUE,
        __IN_PARAM_IF_SNREF.name() : __IN_PARAM_IF_SNREF,
        __IN_PARAM_IF_SNPATHREF.name() : __IN_PARAM_IF_SNPATHREF
    })
    _AttributeMap.update({
        __SEMANTIC.name() : __SEMANTIC
    })
Namespace.addCategoryObject('typeBinding', 'WRITE-PARAM-VALUE', WRITE_PARAM_VALUE)


# Complex type WRITE-PARAM-VALUES with content type ELEMENT_ONLY
class WRITE_PARAM_VALUES (pyxb.binding.basis.complexTypeDefinition):
    """Complex type WRITE-PARAM-VALUES with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'WRITE-PARAM-VALUES')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3700, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element WRITE-PARAM-VALUE uses Python identifier WRITE_PARAM_VALUE
    __WRITE_PARAM_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'WRITE-PARAM-VALUE'), 'WRITE_PARAM_VALUE', '__WRITE_PARAM_VALUES_WRITE_PARAM_VALUE', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3703, 0), )

    
    WRITE_PARAM_VALUE = property(__WRITE_PARAM_VALUE.value, __WRITE_PARAM_VALUE.set, None, None)

    _ElementMap.update({
        __WRITE_PARAM_VALUE.name() : __WRITE_PARAM_VALUE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'WRITE-PARAM-VALUES', WRITE_PARAM_VALUES)


# Complex type XDOC with content type ELEMENT_ONLY
class XDOC (pyxb.binding.basis.complexTypeDefinition):
    """Complex type XDOC with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'XDOC')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3706, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element NUMBER uses Python identifier NUMBER
    __NUMBER = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NUMBER'), 'NUMBER', '__XDOC_NUMBER', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3710, 0), )

    
    NUMBER = property(__NUMBER.value, __NUMBER.set, None, None)

    
    # Element STATE uses Python identifier STATE
    __STATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'STATE'), 'STATE', '__XDOC_STATE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3711, 0), )

    
    STATE = property(__STATE.value, __STATE.set, None, None)

    
    # Element DATE uses Python identifier DATE
    __DATE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DATE'), 'DATE', '__XDOC_DATE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3712, 0), )

    
    DATE = property(__DATE.value, __DATE.set, None, None)

    
    # Element PUBLISHER uses Python identifier PUBLISHER
    __PUBLISHER = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PUBLISHER'), 'PUBLISHER', '__XDOC_PUBLISHER', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3713, 0), )

    
    PUBLISHER = property(__PUBLISHER.value, __PUBLISHER.set, None, None)

    
    # Element URL uses Python identifier URL
    __URL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'URL'), 'URL', '__XDOC_URL', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3714, 0), )

    
    URL = property(__URL.value, __URL.set, None, None)

    
    # Element POSITION uses Python identifier POSITION
    __POSITION = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'POSITION'), 'POSITION', '__XDOC_POSITION', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3715, 0), )

    
    POSITION = property(__POSITION.value, __POSITION.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__XDOC_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__XDOC_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__XDOC_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    _ElementMap.update({
        __NUMBER.name() : __NUMBER,
        __STATE.name() : __STATE,
        __DATE.name() : __DATE,
        __PUBLISHER.name() : __PUBLISHER,
        __URL.name() : __URL,
        __POSITION.name() : __POSITION,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'XDOC', XDOC)


# Complex type ADDRDEF-FILTER with content type ELEMENT_ONLY
class ADDRDEF_FILTER (FILTER):
    """Complex type ADDRDEF-FILTER with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ADDRDEF-FILTER')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 20, 0)
    _ElementMap = FILTER._ElementMap.copy()
    _AttributeMap = FILTER._AttributeMap.copy()
    # Base type is FILTER
    
    # Element FILTER-END uses Python identifier FILTER_END
    __FILTER_END = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FILTER-END'), 'FILTER_END', '__ADDRDEF_FILTER_FILTER_END', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 25, 0), )

    
    FILTER_END = property(__FILTER_END.value, __FILTER_END.set, None, None)

    
    # Element FILTER_START (FILTER-START) inherited from FILTER
    _ElementMap.update({
        __FILTER_END.name() : __FILTER_END
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ADDRDEF-FILTER', ADDRDEF_FILTER)


# Complex type ADDRDEF-PHYS-SEGMENT with content type ELEMENT_ONLY
class ADDRDEF_PHYS_SEGMENT (PHYS_SEGMENT):
    """Complex type ADDRDEF-PHYS-SEGMENT with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ADDRDEF-PHYS-SEGMENT')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 30, 0)
    _ElementMap = PHYS_SEGMENT._ElementMap.copy()
    _AttributeMap = PHYS_SEGMENT._AttributeMap.copy()
    # Base type is PHYS_SEGMENT
    
    # Element END-ADDRESS uses Python identifier END_ADDRESS
    __END_ADDRESS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'END-ADDRESS'), 'END_ADDRESS', '__ADDRDEF_PHYS_SEGMENT_END_ADDRESS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 35, 0), )

    
    END_ADDRESS = property(__END_ADDRESS.value, __END_ADDRESS.set, None, None)

    
    # Element FILLBYTE (FILLBYTE) inherited from PHYS-SEGMENT
    
    # Element BLOCK_SIZE (BLOCK-SIZE) inherited from PHYS-SEGMENT
    
    # Element START_ADDRESS (START-ADDRESS) inherited from PHYS-SEGMENT
    
    # Element SHORT_NAME (SHORT-NAME) inherited from PHYS-SEGMENT
    
    # Element LONG_NAME (LONG-NAME) inherited from PHYS-SEGMENT
    
    # Element DESC (DESC) inherited from PHYS-SEGMENT
    
    # Attribute ID inherited from PHYS-SEGMENT
    
    # Attribute OID inherited from PHYS-SEGMENT
    _ElementMap.update({
        __END_ADDRESS.name() : __END_ADDRESS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ADDRDEF-PHYS-SEGMENT', ADDRDEF_PHYS_SEGMENT)


# Complex type BASE-COMPARAM with content type ELEMENT_ONLY
class BASE_COMPARAM (pyxb.binding.basis.complexTypeDefinition):
    """Complex type BASE-COMPARAM with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BASE-COMPARAM')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 82, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__BASE_COMPARAM_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__BASE_COMPARAM_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__BASE_COMPARAM_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__BASE_COMPARAM_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 87, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 87, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__BASE_COMPARAM_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 88, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 88, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    
    # Attribute PARAM-CLASS uses Python identifier PARAM_CLASS
    __PARAM_CLASS = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PARAM-CLASS'), 'PARAM_CLASS', '__BASE_COMPARAM_PARAM_CLASS', pyxb.binding.datatypes.string, required=True)
    __PARAM_CLASS._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 89, 0)
    __PARAM_CLASS._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 89, 0)
    
    PARAM_CLASS = property(__PARAM_CLASS.value, __PARAM_CLASS.set, None, None)

    
    # Attribute CPTYPE uses Python identifier CPTYPE
    __CPTYPE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CPTYPE'), 'CPTYPE', '__BASE_COMPARAM_CPTYPE', STANDARDISATION_LEVEL, required=True)
    __CPTYPE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 90, 0)
    __CPTYPE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 90, 0)
    
    CPTYPE = property(__CPTYPE.value, __CPTYPE.set, None, None)

    
    # Attribute DISPLAY-LEVEL uses Python identifier DISPLAY_LEVEL
    __DISPLAY_LEVEL = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DISPLAY-LEVEL'), 'DISPLAY_LEVEL', '__BASE_COMPARAM_DISPLAY_LEVEL', pyxb.binding.datatypes.unsignedInt)
    __DISPLAY_LEVEL._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 91, 0)
    __DISPLAY_LEVEL._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 91, 0)
    
    DISPLAY_LEVEL = property(__DISPLAY_LEVEL.value, __DISPLAY_LEVEL.set, None, None)

    
    # Attribute CPUSAGE uses Python identifier CPUSAGE
    __CPUSAGE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CPUSAGE'), 'CPUSAGE', '__BASE_COMPARAM_CPUSAGE', USAGE, required=True)
    __CPUSAGE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 92, 0)
    __CPUSAGE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 92, 0)
    
    CPUSAGE = property(__CPUSAGE.value, __CPUSAGE.set, None, None)

    _ElementMap.update({
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID,
        __PARAM_CLASS.name() : __PARAM_CLASS,
        __CPTYPE.name() : __CPTYPE,
        __DISPLAY_LEVEL.name() : __DISPLAY_LEVEL,
        __CPUSAGE.name() : __CPUSAGE
    })
Namespace.addCategoryObject('typeBinding', 'BASE-COMPARAM', BASE_COMPARAM)


# Complex type CHECKSUM-RESULT with content type SIMPLE
class CHECKSUM_RESULT (pyxb.binding.basis.complexTypeDefinition):
    """Complex type CHECKSUM-RESULT with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CHECKSUM-RESULT')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 191, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute TYPE uses Python identifier TYPE
    __TYPE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TYPE'), 'TYPE', '__CHECKSUM_RESULT_TYPE', SESSION_SUB_ELEM_TYPE, required=True)
    __TYPE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 195, 0)
    __TYPE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 195, 0)
    
    TYPE = property(__TYPE.value, __TYPE.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __TYPE.name() : __TYPE
    })
Namespace.addCategoryObject('typeBinding', 'CHECKSUM-RESULT', CHECKSUM_RESULT)


# Complex type COMM-RELATION with content type ELEMENT_ONLY
class COMM_RELATION (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMM-RELATION with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMM-RELATION')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 222, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__COMM_RELATION_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 225, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Element RELATION-TYPE uses Python identifier RELATION_TYPE
    __RELATION_TYPE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RELATION-TYPE'), 'RELATION_TYPE', '__COMM_RELATION_RELATION_TYPE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 226, 0), )

    
    RELATION_TYPE = property(__RELATION_TYPE.value, __RELATION_TYPE.set, None, None)

    
    # Element DIAG-COMM-REF uses Python identifier DIAG_COMM_REF
    __DIAG_COMM_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-REF'), 'DIAG_COMM_REF', '__COMM_RELATION_DIAG_COMM_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 228, 0), )

    
    DIAG_COMM_REF = property(__DIAG_COMM_REF.value, __DIAG_COMM_REF.set, None, None)

    
    # Element DIAG-COMM-SNREF uses Python identifier DIAG_COMM_SNREF
    __DIAG_COMM_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-SNREF'), 'DIAG_COMM_SNREF', '__COMM_RELATION_DIAG_COMM_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 229, 0), )

    
    DIAG_COMM_SNREF = property(__DIAG_COMM_SNREF.value, __DIAG_COMM_SNREF.set, None, None)

    
    # Element IN-PARAM-IF-SNREF uses Python identifier IN_PARAM_IF_SNREF
    __IN_PARAM_IF_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNREF'), 'IN_PARAM_IF_SNREF', '__COMM_RELATION_IN_PARAM_IF_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 233, 0), )

    
    IN_PARAM_IF_SNREF = property(__IN_PARAM_IF_SNREF.value, __IN_PARAM_IF_SNREF.set, None, None)

    
    # Element IN-PARAM-IF-SNPATHREF uses Python identifier IN_PARAM_IF_SNPATHREF
    __IN_PARAM_IF_SNPATHREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNPATHREF'), 'IN_PARAM_IF_SNPATHREF', '__COMM_RELATION_IN_PARAM_IF_SNPATHREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 234, 0), )

    
    IN_PARAM_IF_SNPATHREF = property(__IN_PARAM_IF_SNPATHREF.value, __IN_PARAM_IF_SNPATHREF.set, None, None)

    
    # Element OUT-PARAM-IF-SNREF uses Python identifier OUT_PARAM_IF_SNREF
    __OUT_PARAM_IF_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNREF'), 'OUT_PARAM_IF_SNREF', '__COMM_RELATION_OUT_PARAM_IF_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 237, 0), )

    
    OUT_PARAM_IF_SNREF = property(__OUT_PARAM_IF_SNREF.value, __OUT_PARAM_IF_SNREF.set, None, None)

    
    # Element OUT-PARAM-IF-SNPATHREF uses Python identifier OUT_PARAM_IF_SNPATHREF
    __OUT_PARAM_IF_SNPATHREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNPATHREF'), 'OUT_PARAM_IF_SNPATHREF', '__COMM_RELATION_OUT_PARAM_IF_SNPATHREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 238, 0), )

    
    OUT_PARAM_IF_SNPATHREF = property(__OUT_PARAM_IF_SNPATHREF.value, __OUT_PARAM_IF_SNPATHREF.set, None, None)

    
    # Attribute VALUE-TYPE uses Python identifier VALUE_TYPE
    __VALUE_TYPE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'VALUE-TYPE'), 'VALUE_TYPE', '__COMM_RELATION_VALUE_TYPE', COMM_RELATION_VALUE_TYPE)
    __VALUE_TYPE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 242, 0)
    __VALUE_TYPE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 242, 0)
    
    VALUE_TYPE = property(__VALUE_TYPE.value, __VALUE_TYPE.set, None, None)

    _ElementMap.update({
        __DESC.name() : __DESC,
        __RELATION_TYPE.name() : __RELATION_TYPE,
        __DIAG_COMM_REF.name() : __DIAG_COMM_REF,
        __DIAG_COMM_SNREF.name() : __DIAG_COMM_SNREF,
        __IN_PARAM_IF_SNREF.name() : __IN_PARAM_IF_SNREF,
        __IN_PARAM_IF_SNPATHREF.name() : __IN_PARAM_IF_SNPATHREF,
        __OUT_PARAM_IF_SNREF.name() : __OUT_PARAM_IF_SNREF,
        __OUT_PARAM_IF_SNPATHREF.name() : __OUT_PARAM_IF_SNPATHREF
    })
    _AttributeMap.update({
        __VALUE_TYPE.name() : __VALUE_TYPE
    })
Namespace.addCategoryObject('typeBinding', 'COMM-RELATION', COMM_RELATION)


# Complex type COMPARAM-REF with content type ELEMENT_ONLY
class COMPARAM_REF (pyxb.binding.basis.complexTypeDefinition):
    """Complex type COMPARAM-REF with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPARAM-REF')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 322, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SIMPLE-VALUE uses Python identifier SIMPLE_VALUE
    __SIMPLE_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SIMPLE-VALUE'), 'SIMPLE_VALUE', '__COMPARAM_REF_SIMPLE_VALUE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 326, 0), )

    
    SIMPLE_VALUE = property(__SIMPLE_VALUE.value, __SIMPLE_VALUE.set, None, None)

    
    # Element COMPLEX-VALUE uses Python identifier COMPLEX_VALUE
    __COMPLEX_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPLEX-VALUE'), 'COMPLEX_VALUE', '__COMPARAM_REF_COMPLEX_VALUE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 327, 0), )

    
    COMPLEX_VALUE = property(__COMPLEX_VALUE.value, __COMPLEX_VALUE.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__COMPARAM_REF_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 329, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Element PROTOCOL-SNREF uses Python identifier PROTOCOL_SNREF
    __PROTOCOL_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PROTOCOL-SNREF'), 'PROTOCOL_SNREF', '__COMPARAM_REF_PROTOCOL_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 330, 0), )

    
    PROTOCOL_SNREF = property(__PROTOCOL_SNREF.value, __PROTOCOL_SNREF.set, None, None)

    
    # Element PROT-STACK-SNREF uses Python identifier PROT_STACK_SNREF
    __PROT_STACK_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PROT-STACK-SNREF'), 'PROT_STACK_SNREF', '__COMPARAM_REF_PROT_STACK_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 331, 0), )

    
    PROT_STACK_SNREF = property(__PROT_STACK_SNREF.value, __PROT_STACK_SNREF.set, None, None)

    
    # Attribute ID-REF uses Python identifier ID_REF
    __ID_REF = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID-REF'), 'ID_REF', '__COMPARAM_REF_ID_REF', pyxb.binding.datatypes.string, required=True)
    __ID_REF._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3771, 0)
    __ID_REF._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3771, 0)
    
    ID_REF = property(__ID_REF.value, __ID_REF.set, None, None)

    
    # Attribute DOCREF uses Python identifier DOCREF
    __DOCREF = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DOCREF'), 'DOCREF', '__COMPARAM_REF_DOCREF', STD_ANON_14)
    __DOCREF._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3772, 0)
    __DOCREF._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3772, 0)
    
    DOCREF = property(__DOCREF.value, __DOCREF.set, None, None)

    
    # Attribute DOCTYPE uses Python identifier DOCTYPE
    __DOCTYPE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DOCTYPE'), 'DOCTYPE', '__COMPARAM_REF_DOCTYPE', DOCTYPE)
    __DOCTYPE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3779, 0)
    __DOCTYPE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3779, 0)
    
    DOCTYPE = property(__DOCTYPE.value, __DOCTYPE.set, None, None)

    
    # Attribute REVISION uses Python identifier REVISION
    __REVISION = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'REVISION'), 'REVISION', '__COMPARAM_REF_REVISION', pyxb.binding.datatypes.string)
    __REVISION._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3780, 0)
    __REVISION._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3780, 0)
    
    REVISION = property(__REVISION.value, __REVISION.set, None, None)

    _ElementMap.update({
        __SIMPLE_VALUE.name() : __SIMPLE_VALUE,
        __COMPLEX_VALUE.name() : __COMPLEX_VALUE,
        __DESC.name() : __DESC,
        __PROTOCOL_SNREF.name() : __PROTOCOL_SNREF,
        __PROT_STACK_SNREF.name() : __PROT_STACK_SNREF
    })
    _AttributeMap.update({
        __ID_REF.name() : __ID_REF,
        __DOCREF.name() : __DOCREF,
        __DOCTYPE.name() : __DOCTYPE,
        __REVISION.name() : __REVISION
    })
Namespace.addCategoryObject('typeBinding', 'COMPARAM-REF', COMPARAM_REF)


# Complex type COMPARAM-SPEC with content type ELEMENT_ONLY
class COMPARAM_SPEC (ODX_CATEGORY):
    """Complex type COMPARAM-SPEC with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPARAM-SPEC')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 347, 0)
    _ElementMap = ODX_CATEGORY._ElementMap.copy()
    _AttributeMap = ODX_CATEGORY._AttributeMap.copy()
    # Base type is ODX_CATEGORY
    
    # Element PROT-STACKS uses Python identifier PROT_STACKS
    __PROT_STACKS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PROT-STACKS'), 'PROT_STACKS', '__COMPARAM_SPEC_PROT_STACKS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 352, 0), )

    
    PROT_STACKS = property(__PROT_STACKS.value, __PROT_STACKS.set, None, None)

    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from ODX-CATEGORY
    
    # Element COMPANY_DATAS (COMPANY-DATAS) inherited from ODX-CATEGORY
    
    # Element SDGS (SDGS) inherited from ODX-CATEGORY
    
    # Element SHORT_NAME (SHORT-NAME) inherited from ODX-CATEGORY
    
    # Element LONG_NAME (LONG-NAME) inherited from ODX-CATEGORY
    
    # Element DESC (DESC) inherited from ODX-CATEGORY
    
    # Attribute ID inherited from ODX-CATEGORY
    
    # Attribute OID inherited from ODX-CATEGORY
    _ElementMap.update({
        __PROT_STACKS.name() : __PROT_STACKS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPARAM-SPEC', COMPARAM_SPEC)


# Complex type COMPARAM-SUBSET with content type ELEMENT_ONLY
class COMPARAM_SUBSET (ODX_CATEGORY):
    """Complex type COMPARAM-SUBSET with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPARAM-SUBSET')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 357, 0)
    _ElementMap = ODX_CATEGORY._ElementMap.copy()
    _AttributeMap = ODX_CATEGORY._AttributeMap.copy()
    # Base type is ODX_CATEGORY
    
    # Element COMPARAMS uses Python identifier COMPARAMS
    __COMPARAMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPARAMS'), 'COMPARAMS', '__COMPARAM_SUBSET_COMPARAMS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 362, 0), )

    
    COMPARAMS = property(__COMPARAMS.value, __COMPARAMS.set, None, None)

    
    # Element COMPLEX-COMPARAMS uses Python identifier COMPLEX_COMPARAMS
    __COMPLEX_COMPARAMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPLEX-COMPARAMS'), 'COMPLEX_COMPARAMS', '__COMPARAM_SUBSET_COMPLEX_COMPARAMS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 363, 0), )

    
    COMPLEX_COMPARAMS = property(__COMPLEX_COMPARAMS.value, __COMPLEX_COMPARAMS.set, None, None)

    
    # Element DATA-OBJECT-PROPS uses Python identifier DATA_OBJECT_PROPS
    __DATA_OBJECT_PROPS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROPS'), 'DATA_OBJECT_PROPS', '__COMPARAM_SUBSET_DATA_OBJECT_PROPS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 364, 0), )

    
    DATA_OBJECT_PROPS = property(__DATA_OBJECT_PROPS.value, __DATA_OBJECT_PROPS.set, None, None)

    
    # Element UNIT-SPEC uses Python identifier UNIT_SPEC
    __UNIT_SPEC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UNIT-SPEC'), 'UNIT_SPEC', '__COMPARAM_SUBSET_UNIT_SPEC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 365, 0), )

    
    UNIT_SPEC = property(__UNIT_SPEC.value, __UNIT_SPEC.set, None, None)

    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from ODX-CATEGORY
    
    # Element COMPANY_DATAS (COMPANY-DATAS) inherited from ODX-CATEGORY
    
    # Element SDGS (SDGS) inherited from ODX-CATEGORY
    
    # Element SHORT_NAME (SHORT-NAME) inherited from ODX-CATEGORY
    
    # Element LONG_NAME (LONG-NAME) inherited from ODX-CATEGORY
    
    # Element DESC (DESC) inherited from ODX-CATEGORY
    
    # Attribute CATEGORY uses Python identifier CATEGORY
    __CATEGORY = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CATEGORY'), 'CATEGORY', '__COMPARAM_SUBSET_CATEGORY', pyxb.binding.datatypes.string, required=True)
    __CATEGORY._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 367, 0)
    __CATEGORY._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 367, 0)
    
    CATEGORY = property(__CATEGORY.value, __CATEGORY.set, None, None)

    
    # Attribute ID inherited from ODX-CATEGORY
    
    # Attribute OID inherited from ODX-CATEGORY
    _ElementMap.update({
        __COMPARAMS.name() : __COMPARAMS,
        __COMPLEX_COMPARAMS.name() : __COMPLEX_COMPARAMS,
        __DATA_OBJECT_PROPS.name() : __DATA_OBJECT_PROPS,
        __UNIT_SPEC.name() : __UNIT_SPEC
    })
    _AttributeMap.update({
        __CATEGORY.name() : __CATEGORY
    })
Namespace.addCategoryObject('typeBinding', 'COMPARAM-SUBSET', COMPARAM_SUBSET)


# Complex type COMPLEX-DOP with content type ELEMENT_ONLY
class COMPLEX_DOP (DOP_BASE):
    """Complex type COMPLEX-DOP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPLEX-DOP')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 398, 0)
    _ElementMap = DOP_BASE._ElementMap.copy()
    _AttributeMap = DOP_BASE._AttributeMap.copy()
    # Base type is DOP_BASE
    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from DOP-BASE
    
    # Element SDGS (SDGS) inherited from DOP-BASE
    
    # Element SHORT_NAME (SHORT-NAME) inherited from DOP-BASE
    
    # Element LONG_NAME (LONG-NAME) inherited from DOP-BASE
    
    # Element DESC (DESC) inherited from DOP-BASE
    
    # Attribute ID inherited from DOP-BASE
    
    # Attribute OID inherited from DOP-BASE
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPLEX-DOP', COMPLEX_DOP)


# Complex type COMPLEX-VALUE with content type ELEMENT_ONLY
class COMPLEX_VALUE (BASE_VALUE):
    """Complex type COMPLEX-VALUE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPLEX-VALUE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 410, 0)
    _ElementMap = BASE_VALUE._ElementMap.copy()
    _AttributeMap = BASE_VALUE._AttributeMap.copy()
    # Base type is BASE_VALUE
    
    # Element SIMPLE-VALUE uses Python identifier SIMPLE_VALUE
    __SIMPLE_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SIMPLE-VALUE'), 'SIMPLE_VALUE', '__COMPLEX_VALUE_SIMPLE_VALUE', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 415, 0), )

    
    SIMPLE_VALUE = property(__SIMPLE_VALUE.value, __SIMPLE_VALUE.set, None, None)

    
    # Element COMPLEX-VALUE uses Python identifier COMPLEX_VALUE
    __COMPLEX_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPLEX-VALUE'), 'COMPLEX_VALUE', '__COMPLEX_VALUE_COMPLEX_VALUE', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 416, 0), )

    
    COMPLEX_VALUE = property(__COMPLEX_VALUE.value, __COMPLEX_VALUE.set, None, None)

    _ElementMap.update({
        __SIMPLE_VALUE.name() : __SIMPLE_VALUE,
        __COMPLEX_VALUE.name() : __COMPLEX_VALUE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPLEX-VALUE', COMPLEX_VALUE)


# Complex type CONFIG-ID-ITEM with content type ELEMENT_ONLY
class CONFIG_ID_ITEM (CONFIG_ITEM):
    """Complex type CONFIG-ID-ITEM with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CONFIG-ID-ITEM')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 569, 0)
    _ElementMap = CONFIG_ITEM._ElementMap.copy()
    _AttributeMap = CONFIG_ITEM._AttributeMap.copy()
    # Base type is CONFIG_ITEM
    
    # Element BYTE_POSITION (BYTE-POSITION) inherited from CONFIG-ITEM
    
    # Element BIT_POSITION (BIT-POSITION) inherited from CONFIG-ITEM
    
    # Element DATA_OBJECT_PROP_REF (DATA-OBJECT-PROP-REF) inherited from CONFIG-ITEM
    
    # Element DATA_OBJECT_PROP_SNREF (DATA-OBJECT-PROP-SNREF) inherited from CONFIG-ITEM
    
    # Element SDGS (SDGS) inherited from CONFIG-ITEM
    
    # Element SHORT_NAME (SHORT-NAME) inherited from CONFIG-ITEM
    
    # Element LONG_NAME (LONG-NAME) inherited from CONFIG-ITEM
    
    # Element DESC (DESC) inherited from CONFIG-ITEM
    
    # Attribute SEMANTIC inherited from CONFIG-ITEM
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CONFIG-ID-ITEM', CONFIG_ID_ITEM)


# Complex type DATAFORMAT with content type EMPTY
class DATAFORMAT (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DATAFORMAT with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DATAFORMAT')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 656, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute SELECTION uses Python identifier SELECTION
    __SELECTION = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SELECTION'), 'SELECTION', '__DATAFORMAT_SELECTION', DATAFORMAT_SELECTION, required=True)
    __SELECTION._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 658, 0)
    __SELECTION._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 658, 0)
    
    SELECTION = property(__SELECTION.value, __SELECTION.set, None, None)

    
    # Attribute USER-SELECTION uses Python identifier USER_SELECTION
    __USER_SELECTION = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'USER-SELECTION'), 'USER_SELECTION', '__DATAFORMAT_USER_SELECTION', pyxb.binding.datatypes.string)
    __USER_SELECTION._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 659, 0)
    __USER_SELECTION._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 659, 0)
    
    USER_SELECTION = property(__USER_SELECTION.value, __USER_SELECTION.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __SELECTION.name() : __SELECTION,
        __USER_SELECTION.name() : __USER_SELECTION
    })
Namespace.addCategoryObject('typeBinding', 'DATAFORMAT', DATAFORMAT)


# Complex type DATA-ID-ITEM with content type ELEMENT_ONLY
class DATA_ID_ITEM (CONFIG_ITEM):
    """Complex type DATA-ID-ITEM with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DATA-ID-ITEM')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 669, 0)
    _ElementMap = CONFIG_ITEM._ElementMap.copy()
    _AttributeMap = CONFIG_ITEM._AttributeMap.copy()
    # Base type is CONFIG_ITEM
    
    # Element BYTE_POSITION (BYTE-POSITION) inherited from CONFIG-ITEM
    
    # Element BIT_POSITION (BIT-POSITION) inherited from CONFIG-ITEM
    
    # Element DATA_OBJECT_PROP_REF (DATA-OBJECT-PROP-REF) inherited from CONFIG-ITEM
    
    # Element DATA_OBJECT_PROP_SNREF (DATA-OBJECT-PROP-SNREF) inherited from CONFIG-ITEM
    
    # Element SDGS (SDGS) inherited from CONFIG-ITEM
    
    # Element SHORT_NAME (SHORT-NAME) inherited from CONFIG-ITEM
    
    # Element LONG_NAME (LONG-NAME) inherited from CONFIG-ITEM
    
    # Element DESC (DESC) inherited from CONFIG-ITEM
    
    # Attribute SEMANTIC inherited from CONFIG-ITEM
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DATA-ID-ITEM', DATA_ID_ITEM)


# Complex type DATA-OBJECT-PROP with content type ELEMENT_ONLY
class DATA_OBJECT_PROP (DOP_BASE):
    """Complex type DATA-OBJECT-PROP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DATA-OBJECT-PROP')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 675, 0)
    _ElementMap = DOP_BASE._ElementMap.copy()
    _AttributeMap = DOP_BASE._AttributeMap.copy()
    # Base type is DOP_BASE
    
    # Element COMPU-METHOD uses Python identifier COMPU_METHOD
    __COMPU_METHOD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPU-METHOD'), 'COMPU_METHOD', '__DATA_OBJECT_PROP_COMPU_METHOD', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 680, 0), )

    
    COMPU_METHOD = property(__COMPU_METHOD.value, __COMPU_METHOD.set, None, None)

    
    # Element DIAG-CODED-TYPE uses Python identifier DIAG_CODED_TYPE
    __DIAG_CODED_TYPE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-CODED-TYPE'), 'DIAG_CODED_TYPE', '__DATA_OBJECT_PROP_DIAG_CODED_TYPE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 681, 0), )

    
    DIAG_CODED_TYPE = property(__DIAG_CODED_TYPE.value, __DIAG_CODED_TYPE.set, None, None)

    
    # Element PHYSICAL-TYPE uses Python identifier PHYSICAL_TYPE
    __PHYSICAL_TYPE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PHYSICAL-TYPE'), 'PHYSICAL_TYPE', '__DATA_OBJECT_PROP_PHYSICAL_TYPE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 682, 0), )

    
    PHYSICAL_TYPE = property(__PHYSICAL_TYPE.value, __PHYSICAL_TYPE.set, None, None)

    
    # Element INTERNAL-CONSTR uses Python identifier INTERNAL_CONSTR
    __INTERNAL_CONSTR = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'INTERNAL-CONSTR'), 'INTERNAL_CONSTR', '__DATA_OBJECT_PROP_INTERNAL_CONSTR', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 683, 0), )

    
    INTERNAL_CONSTR = property(__INTERNAL_CONSTR.value, __INTERNAL_CONSTR.set, None, None)

    
    # Element UNIT-REF uses Python identifier UNIT_REF
    __UNIT_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UNIT-REF'), 'UNIT_REF', '__DATA_OBJECT_PROP_UNIT_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 684, 0), )

    
    UNIT_REF = property(__UNIT_REF.value, __UNIT_REF.set, None, None)

    
    # Element PHYS-CONSTR uses Python identifier PHYS_CONSTR
    __PHYS_CONSTR = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PHYS-CONSTR'), 'PHYS_CONSTR', '__DATA_OBJECT_PROP_PHYS_CONSTR', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 685, 0), )

    
    PHYS_CONSTR = property(__PHYS_CONSTR.value, __PHYS_CONSTR.set, None, None)

    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from DOP-BASE
    
    # Element SDGS (SDGS) inherited from DOP-BASE
    
    # Element SHORT_NAME (SHORT-NAME) inherited from DOP-BASE
    
    # Element LONG_NAME (LONG-NAME) inherited from DOP-BASE
    
    # Element DESC (DESC) inherited from DOP-BASE
    
    # Attribute ID inherited from DOP-BASE
    
    # Attribute OID inherited from DOP-BASE
    _ElementMap.update({
        __COMPU_METHOD.name() : __COMPU_METHOD,
        __DIAG_CODED_TYPE.name() : __DIAG_CODED_TYPE,
        __PHYSICAL_TYPE.name() : __PHYSICAL_TYPE,
        __INTERNAL_CONSTR.name() : __INTERNAL_CONSTR,
        __UNIT_REF.name() : __UNIT_REF,
        __PHYS_CONSTR.name() : __PHYS_CONSTR
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DATA-OBJECT-PROP', DATA_OBJECT_PROP)


# Complex type DATA-RECORD with content type ELEMENT_ONLY
class DATA_RECORD (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DATA-RECORD with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DATA-RECORD')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 696, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element RULE uses Python identifier RULE
    __RULE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RULE'), 'RULE', '__DATA_RECORD_RULE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 700, 0), )

    
    RULE = property(__RULE.value, __RULE.set, None, None)

    
    # Element KEY uses Python identifier KEY
    __KEY = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'KEY'), 'KEY', '__DATA_RECORD_KEY', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 701, 0), )

    
    KEY = property(__KEY.value, __KEY.set, None, None)

    
    # Element DATA-ID uses Python identifier DATA_ID
    __DATA_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DATA-ID'), 'DATA_ID', '__DATA_RECORD_DATA_ID', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 702, 0), )

    
    DATA_ID = property(__DATA_ID.value, __DATA_ID.set, None, None)

    
    # Element SDGS uses Python identifier SDGS
    __SDGS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDGS'), 'SDGS', '__DATA_RECORD_SDGS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 703, 0), )

    
    SDGS = property(__SDGS.value, __SDGS.set, None, None)

    
    # Element DATAFILE uses Python identifier DATAFILE
    __DATAFILE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DATAFILE'), 'DATAFILE', '__DATA_RECORD_DATAFILE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 705, 0), )

    
    DATAFILE = property(__DATAFILE.value, __DATAFILE.set, None, None)

    
    # Element DATA uses Python identifier DATA
    __DATA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DATA'), 'DATA', '__DATA_RECORD_DATA', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 706, 0), )

    
    DATA = property(__DATA.value, __DATA.set, None, None)

    
    # Element AUDIENCE uses Python identifier AUDIENCE
    __AUDIENCE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AUDIENCE'), 'AUDIENCE', '__DATA_RECORD_AUDIENCE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 708, 0), )

    
    AUDIENCE = property(__AUDIENCE.value, __AUDIENCE.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__DATA_RECORD_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__DATA_RECORD_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__DATA_RECORD_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute DATAFORMAT uses Python identifier DATAFORMAT
    __DATAFORMAT = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DATAFORMAT'), 'DATAFORMAT', '__DATA_RECORD_DATAFORMAT', DATAFORMAT_SELECTION, required=True)
    __DATAFORMAT._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 710, 0)
    __DATAFORMAT._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 710, 0)
    
    DATAFORMAT = property(__DATAFORMAT.value, __DATAFORMAT.set, None, None)

    _ElementMap.update({
        __RULE.name() : __RULE,
        __KEY.name() : __KEY,
        __DATA_ID.name() : __DATA_ID,
        __SDGS.name() : __SDGS,
        __DATAFILE.name() : __DATAFILE,
        __DATA.name() : __DATA,
        __AUDIENCE.name() : __AUDIENCE,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __DATAFORMAT.name() : __DATAFORMAT
    })
Namespace.addCategoryObject('typeBinding', 'DATA-RECORD', DATA_RECORD)


# Complex type DIAG-CODED-TYPE with content type EMPTY
class DIAG_CODED_TYPE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DIAG-CODED-TYPE with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DIAG-CODED-TYPE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 772, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute BASE-TYPE-ENCODING uses Python identifier BASE_TYPE_ENCODING
    __BASE_TYPE_ENCODING = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'BASE-TYPE-ENCODING'), 'BASE_TYPE_ENCODING', '__DIAG_CODED_TYPE_BASE_TYPE_ENCODING', ENCODING)
    __BASE_TYPE_ENCODING._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 774, 0)
    __BASE_TYPE_ENCODING._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 774, 0)
    
    BASE_TYPE_ENCODING = property(__BASE_TYPE_ENCODING.value, __BASE_TYPE_ENCODING.set, None, None)

    
    # Attribute BASE-DATA-TYPE uses Python identifier BASE_DATA_TYPE
    __BASE_DATA_TYPE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'BASE-DATA-TYPE'), 'BASE_DATA_TYPE', '__DIAG_CODED_TYPE_BASE_DATA_TYPE', DATA_TYPE, required=True)
    __BASE_DATA_TYPE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 775, 0)
    __BASE_DATA_TYPE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 775, 0)
    
    BASE_DATA_TYPE = property(__BASE_DATA_TYPE.value, __BASE_DATA_TYPE.set, None, None)

    
    # Attribute IS-HIGHLOW-BYTE-ORDER uses Python identifier IS_HIGHLOW_BYTE_ORDER
    __IS_HIGHLOW_BYTE_ORDER = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IS-HIGHLOW-BYTE-ORDER'), 'IS_HIGHLOW_BYTE_ORDER', '__DIAG_CODED_TYPE_IS_HIGHLOW_BYTE_ORDER', pyxb.binding.datatypes.boolean, unicode_default='true')
    __IS_HIGHLOW_BYTE_ORDER._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 776, 0)
    __IS_HIGHLOW_BYTE_ORDER._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 776, 0)
    
    IS_HIGHLOW_BYTE_ORDER = property(__IS_HIGHLOW_BYTE_ORDER.value, __IS_HIGHLOW_BYTE_ORDER.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __BASE_TYPE_ENCODING.name() : __BASE_TYPE_ENCODING,
        __BASE_DATA_TYPE.name() : __BASE_DATA_TYPE,
        __IS_HIGHLOW_BYTE_ORDER.name() : __IS_HIGHLOW_BYTE_ORDER
    })
Namespace.addCategoryObject('typeBinding', 'DIAG-CODED-TYPE', DIAG_CODED_TYPE)


# Complex type DIAG-COMM with content type ELEMENT_ONLY
class DIAG_COMM (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DIAG-COMM with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DIAG-COMM')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 778, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ADMIN-DATA uses Python identifier ADMIN_DATA
    __ADMIN_DATA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), 'ADMIN_DATA', '__DIAG_COMM_ADMIN_DATA', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 782, 0), )

    
    ADMIN_DATA = property(__ADMIN_DATA.value, __ADMIN_DATA.set, None, None)

    
    # Element SDGS uses Python identifier SDGS
    __SDGS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDGS'), 'SDGS', '__DIAG_COMM_SDGS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 783, 0), )

    
    SDGS = property(__SDGS.value, __SDGS.set, None, None)

    
    # Element FUNCT-CLASS-REFS uses Python identifier FUNCT_CLASS_REFS
    __FUNCT_CLASS_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASS-REFS'), 'FUNCT_CLASS_REFS', '__DIAG_COMM_FUNCT_CLASS_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 784, 0), )

    
    FUNCT_CLASS_REFS = property(__FUNCT_CLASS_REFS.value, __FUNCT_CLASS_REFS.set, None, None)

    
    # Element AUDIENCE uses Python identifier AUDIENCE
    __AUDIENCE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AUDIENCE'), 'AUDIENCE', '__DIAG_COMM_AUDIENCE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 785, 0), )

    
    AUDIENCE = property(__AUDIENCE.value, __AUDIENCE.set, None, None)

    
    # Element PROTOCOL-SNREFS uses Python identifier PROTOCOL_SNREFS
    __PROTOCOL_SNREFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PROTOCOL-SNREFS'), 'PROTOCOL_SNREFS', '__DIAG_COMM_PROTOCOL_SNREFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 786, 0), )

    
    PROTOCOL_SNREFS = property(__PROTOCOL_SNREFS.value, __PROTOCOL_SNREFS.set, None, None)

    
    # Element RELATED-DIAG-COMM-REFS uses Python identifier RELATED_DIAG_COMM_REFS
    __RELATED_DIAG_COMM_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RELATED-DIAG-COMM-REFS'), 'RELATED_DIAG_COMM_REFS', '__DIAG_COMM_RELATED_DIAG_COMM_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 787, 0), )

    
    RELATED_DIAG_COMM_REFS = property(__RELATED_DIAG_COMM_REFS.value, __RELATED_DIAG_COMM_REFS.set, None, None)

    
    # Element PRE-CONDITION-STATE-REFS uses Python identifier PRE_CONDITION_STATE_REFS
    __PRE_CONDITION_STATE_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PRE-CONDITION-STATE-REFS'), 'PRE_CONDITION_STATE_REFS', '__DIAG_COMM_PRE_CONDITION_STATE_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 788, 0), )

    
    PRE_CONDITION_STATE_REFS = property(__PRE_CONDITION_STATE_REFS.value, __PRE_CONDITION_STATE_REFS.set, None, None)

    
    # Element STATE-TRANSITION-REFS uses Python identifier STATE_TRANSITION_REFS
    __STATE_TRANSITION_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'STATE-TRANSITION-REFS'), 'STATE_TRANSITION_REFS', '__DIAG_COMM_STATE_TRANSITION_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 790, 0), )

    
    STATE_TRANSITION_REFS = property(__STATE_TRANSITION_REFS.value, __STATE_TRANSITION_REFS.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__DIAG_COMM_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__DIAG_COMM_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__DIAG_COMM_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__DIAG_COMM_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 792, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 792, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__DIAG_COMM_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 793, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 793, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    
    # Attribute SEMANTIC uses Python identifier SEMANTIC
    __SEMANTIC = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SEMANTIC'), 'SEMANTIC', '__DIAG_COMM_SEMANTIC', pyxb.binding.datatypes.string)
    __SEMANTIC._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 794, 0)
    __SEMANTIC._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 794, 0)
    
    SEMANTIC = property(__SEMANTIC.value, __SEMANTIC.set, None, None)

    
    # Attribute DIAGNOSTIC-CLASS uses Python identifier DIAGNOSTIC_CLASS
    __DIAGNOSTIC_CLASS = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DIAGNOSTIC-CLASS'), 'DIAGNOSTIC_CLASS', '__DIAG_COMM_DIAGNOSTIC_CLASS', DIAG_CLASS_TYPE)
    __DIAGNOSTIC_CLASS._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 795, 0)
    __DIAGNOSTIC_CLASS._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 795, 0)
    
    DIAGNOSTIC_CLASS = property(__DIAGNOSTIC_CLASS.value, __DIAGNOSTIC_CLASS.set, None, None)

    
    # Attribute IS-MANDATORY uses Python identifier IS_MANDATORY
    __IS_MANDATORY = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IS-MANDATORY'), 'IS_MANDATORY', '__DIAG_COMM_IS_MANDATORY', pyxb.binding.datatypes.boolean, unicode_default='false')
    __IS_MANDATORY._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 796, 0)
    __IS_MANDATORY._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 796, 0)
    
    IS_MANDATORY = property(__IS_MANDATORY.value, __IS_MANDATORY.set, None, None)

    
    # Attribute IS-EXECUTABLE uses Python identifier IS_EXECUTABLE
    __IS_EXECUTABLE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IS-EXECUTABLE'), 'IS_EXECUTABLE', '__DIAG_COMM_IS_EXECUTABLE', pyxb.binding.datatypes.boolean, unicode_default='true')
    __IS_EXECUTABLE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 797, 0)
    __IS_EXECUTABLE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 797, 0)
    
    IS_EXECUTABLE = property(__IS_EXECUTABLE.value, __IS_EXECUTABLE.set, None, None)

    
    # Attribute IS-FINAL uses Python identifier IS_FINAL
    __IS_FINAL = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IS-FINAL'), 'IS_FINAL', '__DIAG_COMM_IS_FINAL', pyxb.binding.datatypes.boolean, unicode_default='false')
    __IS_FINAL._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 798, 0)
    __IS_FINAL._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 798, 0)
    
    IS_FINAL = property(__IS_FINAL.value, __IS_FINAL.set, None, None)

    _ElementMap.update({
        __ADMIN_DATA.name() : __ADMIN_DATA,
        __SDGS.name() : __SDGS,
        __FUNCT_CLASS_REFS.name() : __FUNCT_CLASS_REFS,
        __AUDIENCE.name() : __AUDIENCE,
        __PROTOCOL_SNREFS.name() : __PROTOCOL_SNREFS,
        __RELATED_DIAG_COMM_REFS.name() : __RELATED_DIAG_COMM_REFS,
        __PRE_CONDITION_STATE_REFS.name() : __PRE_CONDITION_STATE_REFS,
        __STATE_TRANSITION_REFS.name() : __STATE_TRANSITION_REFS,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID,
        __SEMANTIC.name() : __SEMANTIC,
        __DIAGNOSTIC_CLASS.name() : __DIAGNOSTIC_CLASS,
        __IS_MANDATORY.name() : __IS_MANDATORY,
        __IS_EXECUTABLE.name() : __IS_EXECUTABLE,
        __IS_FINAL.name() : __IS_FINAL
    })
Namespace.addCategoryObject('typeBinding', 'DIAG-COMM', DIAG_COMM)


# Complex type DIAG-LAYER-CONTAINER with content type ELEMENT_ONLY
class DIAG_LAYER_CONTAINER (ODX_CATEGORY):
    """Complex type DIAG-LAYER-CONTAINER with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DIAG-LAYER-CONTAINER')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 864, 0)
    _ElementMap = ODX_CATEGORY._ElementMap.copy()
    _AttributeMap = ODX_CATEGORY._AttributeMap.copy()
    # Base type is ODX_CATEGORY
    
    # Element PROTOCOLS uses Python identifier PROTOCOLS
    __PROTOCOLS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PROTOCOLS'), 'PROTOCOLS', '__DIAG_LAYER_CONTAINER_PROTOCOLS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 869, 0), )

    
    PROTOCOLS = property(__PROTOCOLS.value, __PROTOCOLS.set, None, None)

    
    # Element FUNCTIONAL-GROUPS uses Python identifier FUNCTIONAL_GROUPS
    __FUNCTIONAL_GROUPS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FUNCTIONAL-GROUPS'), 'FUNCTIONAL_GROUPS', '__DIAG_LAYER_CONTAINER_FUNCTIONAL_GROUPS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 870, 0), )

    
    FUNCTIONAL_GROUPS = property(__FUNCTIONAL_GROUPS.value, __FUNCTIONAL_GROUPS.set, None, None)

    
    # Element ECU-SHARED-DATAS uses Python identifier ECU_SHARED_DATAS
    __ECU_SHARED_DATAS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ECU-SHARED-DATAS'), 'ECU_SHARED_DATAS', '__DIAG_LAYER_CONTAINER_ECU_SHARED_DATAS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 871, 0), )

    
    ECU_SHARED_DATAS = property(__ECU_SHARED_DATAS.value, __ECU_SHARED_DATAS.set, None, None)

    
    # Element BASE-VARIANTS uses Python identifier BASE_VARIANTS
    __BASE_VARIANTS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BASE-VARIANTS'), 'BASE_VARIANTS', '__DIAG_LAYER_CONTAINER_BASE_VARIANTS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 872, 0), )

    
    BASE_VARIANTS = property(__BASE_VARIANTS.value, __BASE_VARIANTS.set, None, None)

    
    # Element ECU-VARIANTS uses Python identifier ECU_VARIANTS
    __ECU_VARIANTS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ECU-VARIANTS'), 'ECU_VARIANTS', '__DIAG_LAYER_CONTAINER_ECU_VARIANTS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 873, 0), )

    
    ECU_VARIANTS = property(__ECU_VARIANTS.value, __ECU_VARIANTS.set, None, None)

    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from ODX-CATEGORY
    
    # Element COMPANY_DATAS (COMPANY-DATAS) inherited from ODX-CATEGORY
    
    # Element SDGS (SDGS) inherited from ODX-CATEGORY
    
    # Element SHORT_NAME (SHORT-NAME) inherited from ODX-CATEGORY
    
    # Element LONG_NAME (LONG-NAME) inherited from ODX-CATEGORY
    
    # Element DESC (DESC) inherited from ODX-CATEGORY
    
    # Attribute ID inherited from ODX-CATEGORY
    
    # Attribute OID inherited from ODX-CATEGORY
    _ElementMap.update({
        __PROTOCOLS.name() : __PROTOCOLS,
        __FUNCTIONAL_GROUPS.name() : __FUNCTIONAL_GROUPS,
        __ECU_SHARED_DATAS.name() : __ECU_SHARED_DATAS,
        __BASE_VARIANTS.name() : __BASE_VARIANTS,
        __ECU_VARIANTS.name() : __ECU_VARIANTS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DIAG-LAYER-CONTAINER', DIAG_LAYER_CONTAINER)


# Complex type DTC-DOP with content type ELEMENT_ONLY
class DTC_DOP (DOP_BASE):
    """Complex type DTC-DOP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DTC-DOP')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1025, 0)
    _ElementMap = DOP_BASE._ElementMap.copy()
    _AttributeMap = DOP_BASE._AttributeMap.copy()
    # Base type is DOP_BASE
    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from DOP-BASE
    
    # Element SDGS (SDGS) inherited from DOP-BASE
    
    # Element DIAG-CODED-TYPE uses Python identifier DIAG_CODED_TYPE
    __DIAG_CODED_TYPE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-CODED-TYPE'), 'DIAG_CODED_TYPE', '__DTC_DOP_DIAG_CODED_TYPE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1030, 0), )

    
    DIAG_CODED_TYPE = property(__DIAG_CODED_TYPE.value, __DIAG_CODED_TYPE.set, None, None)

    
    # Element PHYSICAL-TYPE uses Python identifier PHYSICAL_TYPE
    __PHYSICAL_TYPE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PHYSICAL-TYPE'), 'PHYSICAL_TYPE', '__DTC_DOP_PHYSICAL_TYPE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1031, 0), )

    
    PHYSICAL_TYPE = property(__PHYSICAL_TYPE.value, __PHYSICAL_TYPE.set, None, None)

    
    # Element COMPU-METHOD uses Python identifier COMPU_METHOD
    __COMPU_METHOD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPU-METHOD'), 'COMPU_METHOD', '__DTC_DOP_COMPU_METHOD', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1032, 0), )

    
    COMPU_METHOD = property(__COMPU_METHOD.value, __COMPU_METHOD.set, None, None)

    
    # Element DTCS uses Python identifier DTCS
    __DTCS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DTCS'), 'DTCS', '__DTC_DOP_DTCS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1033, 0), )

    
    DTCS = property(__DTCS.value, __DTCS.set, None, None)

    
    # Element LINKED-DTC-DOPS uses Python identifier LINKED_DTC_DOPS
    __LINKED_DTC_DOPS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LINKED-DTC-DOPS'), 'LINKED_DTC_DOPS', '__DTC_DOP_LINKED_DTC_DOPS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1034, 0), )

    
    LINKED_DTC_DOPS = property(__LINKED_DTC_DOPS.value, __LINKED_DTC_DOPS.set, None, None)

    
    # Element SHORT_NAME (SHORT-NAME) inherited from DOP-BASE
    
    # Element LONG_NAME (LONG-NAME) inherited from DOP-BASE
    
    # Element DESC (DESC) inherited from DOP-BASE
    
    # Attribute ID inherited from DOP-BASE
    
    # Attribute OID inherited from DOP-BASE
    
    # Attribute IS-VISIBLE uses Python identifier IS_VISIBLE
    __IS_VISIBLE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IS-VISIBLE'), 'IS_VISIBLE', '__DTC_DOP_IS_VISIBLE', pyxb.binding.datatypes.boolean, unicode_default='false')
    __IS_VISIBLE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1036, 0)
    __IS_VISIBLE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1036, 0)
    
    IS_VISIBLE = property(__IS_VISIBLE.value, __IS_VISIBLE.set, None, None)

    _ElementMap.update({
        __DIAG_CODED_TYPE.name() : __DIAG_CODED_TYPE,
        __PHYSICAL_TYPE.name() : __PHYSICAL_TYPE,
        __COMPU_METHOD.name() : __COMPU_METHOD,
        __DTCS.name() : __DTCS,
        __LINKED_DTC_DOPS.name() : __LINKED_DTC_DOPS
    })
    _AttributeMap.update({
        __IS_VISIBLE.name() : __IS_VISIBLE
    })
Namespace.addCategoryObject('typeBinding', 'DTC-DOP', DTC_DOP)


# Complex type DYN-END-DOP-REF with content type ELEMENT_ONLY
class DYN_END_DOP_REF (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DYN-END-DOP-REF with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DYN-END-DOP-REF')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1109, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TERMINATION-VALUE uses Python identifier TERMINATION_VALUE
    __TERMINATION_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TERMINATION-VALUE'), 'TERMINATION_VALUE', '__DYN_END_DOP_REF_TERMINATION_VALUE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1112, 0), )

    
    TERMINATION_VALUE = property(__TERMINATION_VALUE.value, __TERMINATION_VALUE.set, None, None)

    
    # Attribute ID-REF uses Python identifier ID_REF
    __ID_REF = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID-REF'), 'ID_REF', '__DYN_END_DOP_REF_ID_REF', pyxb.binding.datatypes.string, required=True)
    __ID_REF._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3771, 0)
    __ID_REF._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3771, 0)
    
    ID_REF = property(__ID_REF.value, __ID_REF.set, None, None)

    
    # Attribute DOCREF uses Python identifier DOCREF
    __DOCREF = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DOCREF'), 'DOCREF', '__DYN_END_DOP_REF_DOCREF', STD_ANON_14)
    __DOCREF._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3772, 0)
    __DOCREF._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3772, 0)
    
    DOCREF = property(__DOCREF.value, __DOCREF.set, None, None)

    
    # Attribute DOCTYPE uses Python identifier DOCTYPE
    __DOCTYPE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DOCTYPE'), 'DOCTYPE', '__DYN_END_DOP_REF_DOCTYPE', DOCTYPE)
    __DOCTYPE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3779, 0)
    __DOCTYPE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3779, 0)
    
    DOCTYPE = property(__DOCTYPE.value, __DOCTYPE.set, None, None)

    
    # Attribute REVISION uses Python identifier REVISION
    __REVISION = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'REVISION'), 'REVISION', '__DYN_END_DOP_REF_REVISION', pyxb.binding.datatypes.string)
    __REVISION._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3780, 0)
    __REVISION._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3780, 0)
    
    REVISION = property(__REVISION.value, __REVISION.set, None, None)

    _ElementMap.update({
        __TERMINATION_VALUE.name() : __TERMINATION_VALUE
    })
    _AttributeMap.update({
        __ID_REF.name() : __ID_REF,
        __DOCREF.name() : __DOCREF,
        __DOCTYPE.name() : __DOCTYPE,
        __REVISION.name() : __REVISION
    })
Namespace.addCategoryObject('typeBinding', 'DYN-END-DOP-REF', DYN_END_DOP_REF)


# Complex type ECU-CONFIG with content type ELEMENT_ONLY
class ECU_CONFIG (ODX_CATEGORY):
    """Complex type ECU-CONFIG with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ECU-CONFIG')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1142, 0)
    _ElementMap = ODX_CATEGORY._ElementMap.copy()
    _AttributeMap = ODX_CATEGORY._AttributeMap.copy()
    # Base type is ODX_CATEGORY
    
    # Element CONFIG-DATAS uses Python identifier CONFIG_DATAS
    __CONFIG_DATAS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CONFIG-DATAS'), 'CONFIG_DATAS', '__ECU_CONFIG_CONFIG_DATAS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1147, 0), )

    
    CONFIG_DATAS = property(__CONFIG_DATAS.value, __CONFIG_DATAS.set, None, None)

    
    # Element ADDITIONAL-AUDIENCES uses Python identifier ADDITIONAL_AUDIENCES
    __ADDITIONAL_AUDIENCES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ADDITIONAL-AUDIENCES'), 'ADDITIONAL_AUDIENCES', '__ECU_CONFIG_ADDITIONAL_AUDIENCES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1148, 0), )

    
    ADDITIONAL_AUDIENCES = property(__ADDITIONAL_AUDIENCES.value, __ADDITIONAL_AUDIENCES.set, None, None)

    
    # Element CONFIG-DATADICTIONARY-SPEC uses Python identifier CONFIG_DATADICTIONARY_SPEC
    __CONFIG_DATADICTIONARY_SPEC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CONFIG-DATADICTIONARY-SPEC'), 'CONFIG_DATADICTIONARY_SPEC', '__ECU_CONFIG_CONFIG_DATADICTIONARY_SPEC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1150, 0), )

    
    CONFIG_DATADICTIONARY_SPEC = property(__CONFIG_DATADICTIONARY_SPEC.value, __CONFIG_DATADICTIONARY_SPEC.set, None, None)

    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from ODX-CATEGORY
    
    # Element COMPANY_DATAS (COMPANY-DATAS) inherited from ODX-CATEGORY
    
    # Element SDGS (SDGS) inherited from ODX-CATEGORY
    
    # Element SHORT_NAME (SHORT-NAME) inherited from ODX-CATEGORY
    
    # Element LONG_NAME (LONG-NAME) inherited from ODX-CATEGORY
    
    # Element DESC (DESC) inherited from ODX-CATEGORY
    
    # Attribute ID inherited from ODX-CATEGORY
    
    # Attribute OID inherited from ODX-CATEGORY
    _ElementMap.update({
        __CONFIG_DATAS.name() : __CONFIG_DATAS,
        __ADDITIONAL_AUDIENCES.name() : __ADDITIONAL_AUDIENCES,
        __CONFIG_DATADICTIONARY_SPEC.name() : __CONFIG_DATADICTIONARY_SPEC
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ECU-CONFIG', ECU_CONFIG)


# Complex type ECU-PROXY with content type ELEMENT_ONLY
class ECU_PROXY (INFO_COMPONENT):
    """Complex type ECU-PROXY with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ECU-PROXY')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1209, 0)
    _ElementMap = INFO_COMPONENT._ElementMap.copy()
    _AttributeMap = INFO_COMPONENT._AttributeMap.copy()
    # Base type is INFO_COMPONENT
    
    # Element MATCHING_COMPONENTS (MATCHING-COMPONENTS) inherited from INFO-COMPONENT
    
    # Element SHORT_NAME (SHORT-NAME) inherited from INFO-COMPONENT
    
    # Element LONG_NAME (LONG-NAME) inherited from INFO-COMPONENT
    
    # Element DESC (DESC) inherited from INFO-COMPONENT
    
    # Attribute ID inherited from INFO-COMPONENT
    
    # Attribute OID inherited from INFO-COMPONENT
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ECU-PROXY', ECU_PROXY)


# Complex type ECU-SHARED-DATA with content type ELEMENT_ONLY
class ECU_SHARED_DATA (DIAG_LAYER):
    """Complex type ECU-SHARED-DATA with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ECU-SHARED-DATA')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1221, 0)
    _ElementMap = DIAG_LAYER._ElementMap.copy()
    _AttributeMap = DIAG_LAYER._AttributeMap.copy()
    # Base type is DIAG_LAYER
    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from DIAG-LAYER
    
    # Element COMPANY_DATAS (COMPANY-DATAS) inherited from DIAG-LAYER
    
    # Element FUNCT_CLASSS (FUNCT-CLASSS) inherited from DIAG-LAYER
    
    # Element DIAG_DATA_DICTIONARY_SPEC (DIAG-DATA-DICTIONARY-SPEC) inherited from DIAG-LAYER
    
    # Element DIAG_COMMS (DIAG-COMMS) inherited from DIAG-LAYER
    
    # Element REQUESTS (REQUESTS) inherited from DIAG-LAYER
    
    # Element POS_RESPONSES (POS-RESPONSES) inherited from DIAG-LAYER
    
    # Element NEG_RESPONSES (NEG-RESPONSES) inherited from DIAG-LAYER
    
    # Element GLOBAL_NEG_RESPONSES (GLOBAL-NEG-RESPONSES) inherited from DIAG-LAYER
    
    # Element IMPORT_REFS (IMPORT-REFS) inherited from DIAG-LAYER
    
    # Element STATE_CHARTS (STATE-CHARTS) inherited from DIAG-LAYER
    
    # Element ADDITIONAL_AUDIENCES (ADDITIONAL-AUDIENCES) inherited from DIAG-LAYER
    
    # Element SUB_COMPONENTS (SUB-COMPONENTS) inherited from DIAG-LAYER
    
    # Element LIBRARYS (LIBRARYS) inherited from DIAG-LAYER
    
    # Element SDGS (SDGS) inherited from DIAG-LAYER
    
    # Element DIAG-VARIABLES uses Python identifier DIAG_VARIABLES
    __DIAG_VARIABLES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-VARIABLES'), 'DIAG_VARIABLES', '__ECU_SHARED_DATA_DIAG_VARIABLES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1226, 0), )

    
    DIAG_VARIABLES = property(__DIAG_VARIABLES.value, __DIAG_VARIABLES.set, None, None)

    
    # Element VARIABLE-GROUPS uses Python identifier VARIABLE_GROUPS
    __VARIABLE_GROUPS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VARIABLE-GROUPS'), 'VARIABLE_GROUPS', '__ECU_SHARED_DATA_VARIABLE_GROUPS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1227, 0), )

    
    VARIABLE_GROUPS = property(__VARIABLE_GROUPS.value, __VARIABLE_GROUPS.set, None, None)

    
    # Element SHORT_NAME (SHORT-NAME) inherited from DIAG-LAYER
    
    # Element LONG_NAME (LONG-NAME) inherited from DIAG-LAYER
    
    # Element DESC (DESC) inherited from DIAG-LAYER
    
    # Attribute ID inherited from DIAG-LAYER
    
    # Attribute OID inherited from DIAG-LAYER
    _ElementMap.update({
        __DIAG_VARIABLES.name() : __DIAG_VARIABLES,
        __VARIABLE_GROUPS.name() : __VARIABLE_GROUPS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ECU-SHARED-DATA', ECU_SHARED_DATA)


# Complex type ENCRYPT-COMPRESS-METHOD with content type SIMPLE
class ENCRYPT_COMPRESS_METHOD (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ENCRYPT-COMPRESS-METHOD with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ENCRYPT-COMPRESS-METHOD')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1310, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute TYPE uses Python identifier TYPE
    __TYPE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TYPE'), 'TYPE', '__ENCRYPT_COMPRESS_METHOD_TYPE', ENCRYPT_COMPRESS_METHOD_TYPE, required=True)
    __TYPE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1314, 0)
    __TYPE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1314, 0)
    
    TYPE = property(__TYPE.value, __TYPE.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __TYPE.name() : __TYPE
    })
Namespace.addCategoryObject('typeBinding', 'ENCRYPT-COMPRESS-METHOD', ENCRYPT_COMPRESS_METHOD)


# Complex type EXTERN-FLASHDATA with content type ELEMENT_ONLY
class EXTERN_FLASHDATA (FLASHDATA):
    """Complex type EXTERN-FLASHDATA with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EXTERN-FLASHDATA')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1436, 0)
    _ElementMap = FLASHDATA._ElementMap.copy()
    _AttributeMap = FLASHDATA._AttributeMap.copy()
    # Base type is FLASHDATA
    
    # Element DATAFILE uses Python identifier DATAFILE
    __DATAFILE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DATAFILE'), 'DATAFILE', '__EXTERN_FLASHDATA_DATAFILE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1441, 0), )

    
    DATAFILE = property(__DATAFILE.value, __DATAFILE.set, None, None)

    
    # Element SIZE_LENGTH (SIZE-LENGTH) inherited from FLASHDATA
    
    # Element ADDRESS_LENGTH (ADDRESS-LENGTH) inherited from FLASHDATA
    
    # Element DATAFORMAT (DATAFORMAT) inherited from FLASHDATA
    
    # Element ENCRYPT_COMPRESS_METHOD (ENCRYPT-COMPRESS-METHOD) inherited from FLASHDATA
    
    # Element SHORT_NAME (SHORT-NAME) inherited from FLASHDATA
    
    # Element LONG_NAME (LONG-NAME) inherited from FLASHDATA
    
    # Element DESC (DESC) inherited from FLASHDATA
    
    # Attribute ID inherited from FLASHDATA
    
    # Attribute OID inherited from FLASHDATA
    _ElementMap.update({
        __DATAFILE.name() : __DATAFILE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'EXTERN-FLASHDATA', EXTERN_FLASHDATA)


# Complex type FLASH with content type ELEMENT_ONLY
class FLASH (ODX_CATEGORY):
    """Complex type FLASH with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FLASH')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1476, 0)
    _ElementMap = ODX_CATEGORY._ElementMap.copy()
    _AttributeMap = ODX_CATEGORY._AttributeMap.copy()
    # Base type is ODX_CATEGORY
    
    # Element ECU-MEMS uses Python identifier ECU_MEMS
    __ECU_MEMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ECU-MEMS'), 'ECU_MEMS', '__FLASH_ECU_MEMS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1481, 0), )

    
    ECU_MEMS = property(__ECU_MEMS.value, __ECU_MEMS.set, None, None)

    
    # Element ECU-MEM-CONNECTORS uses Python identifier ECU_MEM_CONNECTORS
    __ECU_MEM_CONNECTORS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ECU-MEM-CONNECTORS'), 'ECU_MEM_CONNECTORS', '__FLASH_ECU_MEM_CONNECTORS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1482, 0), )

    
    ECU_MEM_CONNECTORS = property(__ECU_MEM_CONNECTORS.value, __ECU_MEM_CONNECTORS.set, None, None)

    
    # Element ADDITIONAL-AUDIENCES uses Python identifier ADDITIONAL_AUDIENCES
    __ADDITIONAL_AUDIENCES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ADDITIONAL-AUDIENCES'), 'ADDITIONAL_AUDIENCES', '__FLASH_ADDITIONAL_AUDIENCES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1483, 0), )

    
    ADDITIONAL_AUDIENCES = property(__ADDITIONAL_AUDIENCES.value, __ADDITIONAL_AUDIENCES.set, None, None)

    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from ODX-CATEGORY
    
    # Element COMPANY_DATAS (COMPANY-DATAS) inherited from ODX-CATEGORY
    
    # Element SDGS (SDGS) inherited from ODX-CATEGORY
    
    # Element SHORT_NAME (SHORT-NAME) inherited from ODX-CATEGORY
    
    # Element LONG_NAME (LONG-NAME) inherited from ODX-CATEGORY
    
    # Element DESC (DESC) inherited from ODX-CATEGORY
    
    # Attribute ID inherited from ODX-CATEGORY
    
    # Attribute OID inherited from ODX-CATEGORY
    _ElementMap.update({
        __ECU_MEMS.name() : __ECU_MEMS,
        __ECU_MEM_CONNECTORS.name() : __ECU_MEM_CONNECTORS,
        __ADDITIONAL_AUDIENCES.name() : __ADDITIONAL_AUDIENCES
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'FLASH', FLASH)


# Complex type FUNCTION-DICTIONARY with content type ELEMENT_ONLY
class FUNCTION_DICTIONARY (ODX_CATEGORY):
    """Complex type FUNCTION-DICTIONARY with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FUNCTION-DICTIONARY')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1585, 0)
    _ElementMap = ODX_CATEGORY._ElementMap.copy()
    _AttributeMap = ODX_CATEGORY._AttributeMap.copy()
    # Base type is ODX_CATEGORY
    
    # Element FUNCTION-NODES uses Python identifier FUNCTION_NODES
    __FUNCTION_NODES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FUNCTION-NODES'), 'FUNCTION_NODES', '__FUNCTION_DICTIONARY_FUNCTION_NODES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1590, 0), )

    
    FUNCTION_NODES = property(__FUNCTION_NODES.value, __FUNCTION_NODES.set, None, None)

    
    # Element FUNCTION-NODE-GROUPS uses Python identifier FUNCTION_NODE_GROUPS
    __FUNCTION_NODE_GROUPS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FUNCTION-NODE-GROUPS'), 'FUNCTION_NODE_GROUPS', '__FUNCTION_DICTIONARY_FUNCTION_NODE_GROUPS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1591, 0), )

    
    FUNCTION_NODE_GROUPS = property(__FUNCTION_NODE_GROUPS.value, __FUNCTION_NODE_GROUPS.set, None, None)

    
    # Element ADDITIONAL-AUDIENCES uses Python identifier ADDITIONAL_AUDIENCES
    __ADDITIONAL_AUDIENCES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ADDITIONAL-AUDIENCES'), 'ADDITIONAL_AUDIENCES', '__FUNCTION_DICTIONARY_ADDITIONAL_AUDIENCES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1593, 0), )

    
    ADDITIONAL_AUDIENCES = property(__ADDITIONAL_AUDIENCES.value, __ADDITIONAL_AUDIENCES.set, None, None)

    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from ODX-CATEGORY
    
    # Element COMPANY_DATAS (COMPANY-DATAS) inherited from ODX-CATEGORY
    
    # Element SDGS (SDGS) inherited from ODX-CATEGORY
    
    # Element SHORT_NAME (SHORT-NAME) inherited from ODX-CATEGORY
    
    # Element LONG_NAME (LONG-NAME) inherited from ODX-CATEGORY
    
    # Element DESC (DESC) inherited from ODX-CATEGORY
    
    # Attribute ID inherited from ODX-CATEGORY
    
    # Attribute OID inherited from ODX-CATEGORY
    _ElementMap.update({
        __FUNCTION_NODES.name() : __FUNCTION_NODES,
        __FUNCTION_NODE_GROUPS.name() : __FUNCTION_NODE_GROUPS,
        __ADDITIONAL_AUDIENCES.name() : __ADDITIONAL_AUDIENCES
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'FUNCTION-DICTIONARY', FUNCTION_DICTIONARY)


# Complex type FUNCTION-NODE with content type ELEMENT_ONLY
class FUNCTION_NODE (BASE_FUNCTION_NODE):
    """Complex type FUNCTION-NODE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FUNCTION-NODE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1615, 0)
    _ElementMap = BASE_FUNCTION_NODE._ElementMap.copy()
    _AttributeMap = BASE_FUNCTION_NODE._AttributeMap.copy()
    # Base type is BASE_FUNCTION_NODE
    
    # Element AUDIENCE (AUDIENCE) inherited from BASE-FUNCTION-NODE
    
    # Element FUNCTION_IN_PARAMS (FUNCTION-IN-PARAMS) inherited from BASE-FUNCTION-NODE
    
    # Element FUNCTION_OUT_PARAMS (FUNCTION-OUT-PARAMS) inherited from BASE-FUNCTION-NODE
    
    # Element COMPONENT_CONNECTORS (COMPONENT-CONNECTORS) inherited from BASE-FUNCTION-NODE
    
    # Element MULTIPLE_ECU_JOB_REFS (MULTIPLE-ECU-JOB-REFS) inherited from BASE-FUNCTION-NODE
    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from BASE-FUNCTION-NODE
    
    # Element SDG (SDG) inherited from BASE-FUNCTION-NODE
    
    # Element FUNCTION-NODES uses Python identifier FUNCTION_NODES
    __FUNCTION_NODES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FUNCTION-NODES'), 'FUNCTION_NODES', '__FUNCTION_NODE_FUNCTION_NODES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1620, 0), )

    
    FUNCTION_NODES = property(__FUNCTION_NODES.value, __FUNCTION_NODES.set, None, None)

    
    # Element SHORT_NAME (SHORT-NAME) inherited from BASE-FUNCTION-NODE
    
    # Element LONG_NAME (LONG-NAME) inherited from BASE-FUNCTION-NODE
    
    # Element DESC (DESC) inherited from BASE-FUNCTION-NODE
    
    # Attribute ID inherited from BASE-FUNCTION-NODE
    
    # Attribute OID inherited from BASE-FUNCTION-NODE
    _ElementMap.update({
        __FUNCTION_NODES.name() : __FUNCTION_NODES
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'FUNCTION-NODE', FUNCTION_NODE)


# Complex type FUNCTION-NODE-GROUP with content type ELEMENT_ONLY
class FUNCTION_NODE_GROUP (BASE_FUNCTION_NODE):
    """Complex type FUNCTION-NODE-GROUP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FUNCTION-NODE-GROUP')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1625, 0)
    _ElementMap = BASE_FUNCTION_NODE._ElementMap.copy()
    _AttributeMap = BASE_FUNCTION_NODE._AttributeMap.copy()
    # Base type is BASE_FUNCTION_NODE
    
    # Element AUDIENCE (AUDIENCE) inherited from BASE-FUNCTION-NODE
    
    # Element FUNCTION_IN_PARAMS (FUNCTION-IN-PARAMS) inherited from BASE-FUNCTION-NODE
    
    # Element FUNCTION_OUT_PARAMS (FUNCTION-OUT-PARAMS) inherited from BASE-FUNCTION-NODE
    
    # Element COMPONENT_CONNECTORS (COMPONENT-CONNECTORS) inherited from BASE-FUNCTION-NODE
    
    # Element MULTIPLE_ECU_JOB_REFS (MULTIPLE-ECU-JOB-REFS) inherited from BASE-FUNCTION-NODE
    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from BASE-FUNCTION-NODE
    
    # Element SDG (SDG) inherited from BASE-FUNCTION-NODE
    
    # Element FUNCTION-NODE-REFS uses Python identifier FUNCTION_NODE_REFS
    __FUNCTION_NODE_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FUNCTION-NODE-REFS'), 'FUNCTION_NODE_REFS', '__FUNCTION_NODE_GROUP_FUNCTION_NODE_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1630, 0), )

    
    FUNCTION_NODE_REFS = property(__FUNCTION_NODE_REFS.value, __FUNCTION_NODE_REFS.set, None, None)

    
    # Element FUNCTION-NODE-GROUPS uses Python identifier FUNCTION_NODE_GROUPS
    __FUNCTION_NODE_GROUPS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FUNCTION-NODE-GROUPS'), 'FUNCTION_NODE_GROUPS', '__FUNCTION_NODE_GROUP_FUNCTION_NODE_GROUPS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1631, 0), )

    
    FUNCTION_NODE_GROUPS = property(__FUNCTION_NODE_GROUPS.value, __FUNCTION_NODE_GROUPS.set, None, None)

    
    # Element SHORT_NAME (SHORT-NAME) inherited from BASE-FUNCTION-NODE
    
    # Element LONG_NAME (LONG-NAME) inherited from BASE-FUNCTION-NODE
    
    # Element DESC (DESC) inherited from BASE-FUNCTION-NODE
    
    # Attribute ID inherited from BASE-FUNCTION-NODE
    
    # Attribute OID inherited from BASE-FUNCTION-NODE
    _ElementMap.update({
        __FUNCTION_NODE_REFS.name() : __FUNCTION_NODE_REFS,
        __FUNCTION_NODE_GROUPS.name() : __FUNCTION_NODE_GROUPS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'FUNCTION-NODE-GROUP', FUNCTION_NODE_GROUP)


# Complex type FW-CHECKSUM with content type SIMPLE
class FW_CHECKSUM (pyxb.binding.basis.complexTypeDefinition):
    """Complex type FW-CHECKSUM with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FW-CHECKSUM')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1671, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute TYPE uses Python identifier TYPE
    __TYPE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TYPE'), 'TYPE', '__FW_CHECKSUM_TYPE', SESSION_SUB_ELEM_TYPE, required=True)
    __TYPE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1675, 0)
    __TYPE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1675, 0)
    
    TYPE = property(__TYPE.value, __TYPE.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __TYPE.name() : __TYPE
    })
Namespace.addCategoryObject('typeBinding', 'FW-CHECKSUM', FW_CHECKSUM)


# Complex type FW-SIGNATURE with content type SIMPLE
class FW_SIGNATURE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type FW-SIGNATURE with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FW-SIGNATURE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1679, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute TYPE uses Python identifier TYPE
    __TYPE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TYPE'), 'TYPE', '__FW_SIGNATURE_TYPE', SESSION_SUB_ELEM_TYPE, required=True)
    __TYPE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1683, 0)
    __TYPE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1683, 0)
    
    TYPE = property(__TYPE.value, __TYPE.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __TYPE.name() : __TYPE
    })
Namespace.addCategoryObject('typeBinding', 'FW-SIGNATURE', FW_SIGNATURE)


# Complex type GATEWAY-LOGICAL-LINK with content type ELEMENT_ONLY
class GATEWAY_LOGICAL_LINK (LOGICAL_LINK):
    """Complex type GATEWAY-LOGICAL-LINK with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GATEWAY-LOGICAL-LINK')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1687, 0)
    _ElementMap = LOGICAL_LINK._ElementMap.copy()
    _AttributeMap = LOGICAL_LINK._AttributeMap.copy()
    # Base type is LOGICAL_LINK
    
    # Element SEMANTIC uses Python identifier SEMANTIC
    __SEMANTIC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SEMANTIC'), 'SEMANTIC', '__GATEWAY_LOGICAL_LINK_SEMANTIC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1692, 0), )

    
    SEMANTIC = property(__SEMANTIC.value, __SEMANTIC.set, None, None)

    
    # Element GATEWAY_LOGICAL_LINK_REFS (GATEWAY-LOGICAL-LINK-REFS) inherited from LOGICAL-LINK
    
    # Element PHYSICAL_VEHICLE_LINK_REF (PHYSICAL-VEHICLE-LINK-REF) inherited from LOGICAL-LINK
    
    # Element PROTOCOL_REF (PROTOCOL-REF) inherited from LOGICAL-LINK
    
    # Element FUNCTIONAL_GROUP_REF (FUNCTIONAL-GROUP-REF) inherited from LOGICAL-LINK
    
    # Element BASE_VARIANT_REF (BASE-VARIANT-REF) inherited from LOGICAL-LINK
    
    # Element ECU_PROXY_REFS (ECU-PROXY-REFS) inherited from LOGICAL-LINK
    
    # Element LINK_COMPARAM_REFS (LINK-COMPARAM-REFS) inherited from LOGICAL-LINK
    
    # Element PROT_STACK_SNREF (PROT-STACK-SNREF) inherited from LOGICAL-LINK
    
    # Element SHORT_NAME (SHORT-NAME) inherited from LOGICAL-LINK
    
    # Element LONG_NAME (LONG-NAME) inherited from LOGICAL-LINK
    
    # Element DESC (DESC) inherited from LOGICAL-LINK
    
    # Attribute ID inherited from LOGICAL-LINK
    
    # Attribute OID inherited from LOGICAL-LINK
    _ElementMap.update({
        __SEMANTIC.name() : __SEMANTIC
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'GATEWAY-LOGICAL-LINK', GATEWAY_LOGICAL_LINK)


# Complex type GLOBAL-NEG-RESPONSE with content type ELEMENT_ONLY
class GLOBAL_NEG_RESPONSE (RESPONSE):
    """Complex type GLOBAL-NEG-RESPONSE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GLOBAL-NEG-RESPONSE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1703, 0)
    _ElementMap = RESPONSE._ElementMap.copy()
    _AttributeMap = RESPONSE._AttributeMap.copy()
    # Base type is RESPONSE
    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from RESPONSE
    
    # Element PARAMS (PARAMS) inherited from RESPONSE
    
    # Element SDGS (SDGS) inherited from RESPONSE
    
    # Element SHORT_NAME (SHORT-NAME) inherited from RESPONSE
    
    # Element LONG_NAME (LONG-NAME) inherited from RESPONSE
    
    # Element DESC (DESC) inherited from RESPONSE
    
    # Attribute ID inherited from RESPONSE
    
    # Attribute OID inherited from RESPONSE
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'GLOBAL-NEG-RESPONSE', GLOBAL_NEG_RESPONSE)


# Complex type HIERARCHY-ELEMENT with content type ELEMENT_ONLY
class HIERARCHY_ELEMENT (DIAG_LAYER):
    """Complex type HIERARCHY-ELEMENT with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HIERARCHY-ELEMENT')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1729, 0)
    _ElementMap = DIAG_LAYER._ElementMap.copy()
    _AttributeMap = DIAG_LAYER._AttributeMap.copy()
    # Base type is DIAG_LAYER
    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from DIAG-LAYER
    
    # Element COMPANY_DATAS (COMPANY-DATAS) inherited from DIAG-LAYER
    
    # Element FUNCT_CLASSS (FUNCT-CLASSS) inherited from DIAG-LAYER
    
    # Element DIAG_DATA_DICTIONARY_SPEC (DIAG-DATA-DICTIONARY-SPEC) inherited from DIAG-LAYER
    
    # Element DIAG_COMMS (DIAG-COMMS) inherited from DIAG-LAYER
    
    # Element REQUESTS (REQUESTS) inherited from DIAG-LAYER
    
    # Element POS_RESPONSES (POS-RESPONSES) inherited from DIAG-LAYER
    
    # Element NEG_RESPONSES (NEG-RESPONSES) inherited from DIAG-LAYER
    
    # Element GLOBAL_NEG_RESPONSES (GLOBAL-NEG-RESPONSES) inherited from DIAG-LAYER
    
    # Element IMPORT_REFS (IMPORT-REFS) inherited from DIAG-LAYER
    
    # Element STATE_CHARTS (STATE-CHARTS) inherited from DIAG-LAYER
    
    # Element ADDITIONAL_AUDIENCES (ADDITIONAL-AUDIENCES) inherited from DIAG-LAYER
    
    # Element SUB_COMPONENTS (SUB-COMPONENTS) inherited from DIAG-LAYER
    
    # Element LIBRARYS (LIBRARYS) inherited from DIAG-LAYER
    
    # Element SDGS (SDGS) inherited from DIAG-LAYER
    
    # Element COMPARAM-REFS uses Python identifier COMPARAM_REFS
    __COMPARAM_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPARAM-REFS'), 'COMPARAM_REFS', '__HIERARCHY_ELEMENT_COMPARAM_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1734, 0), )

    
    COMPARAM_REFS = property(__COMPARAM_REFS.value, __COMPARAM_REFS.set, None, None)

    
    # Element SHORT_NAME (SHORT-NAME) inherited from DIAG-LAYER
    
    # Element LONG_NAME (LONG-NAME) inherited from DIAG-LAYER
    
    # Element DESC (DESC) inherited from DIAG-LAYER
    
    # Attribute ID inherited from DIAG-LAYER
    
    # Attribute OID inherited from DIAG-LAYER
    _ElementMap.update({
        __COMPARAM_REFS.name() : __COMPARAM_REFS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'HIERARCHY-ELEMENT', HIERARCHY_ELEMENT)


# Complex type IDENT-VALUE with content type SIMPLE
class IDENT_VALUE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type IDENT-VALUE with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IDENT-VALUE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1756, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute TYPE uses Python identifier TYPE
    __TYPE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TYPE'), 'TYPE', '__IDENT_VALUE_TYPE', IDENT_VALUE_TYPE, required=True)
    __TYPE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1760, 0)
    __TYPE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1760, 0)
    
    TYPE = property(__TYPE.value, __TYPE.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __TYPE.name() : __TYPE
    })
Namespace.addCategoryObject('typeBinding', 'IDENT-VALUE', IDENT_VALUE)


# Complex type INTERN-FLASHDATA with content type ELEMENT_ONLY
class INTERN_FLASHDATA (FLASHDATA):
    """Complex type INTERN-FLASHDATA with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'INTERN-FLASHDATA')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1835, 0)
    _ElementMap = FLASHDATA._ElementMap.copy()
    _AttributeMap = FLASHDATA._AttributeMap.copy()
    # Base type is FLASHDATA
    
    # Element SIZE_LENGTH (SIZE-LENGTH) inherited from FLASHDATA
    
    # Element ADDRESS_LENGTH (ADDRESS-LENGTH) inherited from FLASHDATA
    
    # Element DATAFORMAT (DATAFORMAT) inherited from FLASHDATA
    
    # Element ENCRYPT_COMPRESS_METHOD (ENCRYPT-COMPRESS-METHOD) inherited from FLASHDATA
    
    # Element DATA uses Python identifier DATA
    __DATA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DATA'), 'DATA', '__INTERN_FLASHDATA_DATA', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1840, 0), )

    
    DATA = property(__DATA.value, __DATA.set, None, None)

    
    # Element SHORT_NAME (SHORT-NAME) inherited from FLASHDATA
    
    # Element LONG_NAME (LONG-NAME) inherited from FLASHDATA
    
    # Element DESC (DESC) inherited from FLASHDATA
    
    # Attribute ID inherited from FLASHDATA
    
    # Attribute OID inherited from FLASHDATA
    _ElementMap.update({
        __DATA.name() : __DATA
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'INTERN-FLASHDATA', INTERN_FLASHDATA)


# Complex type LIMIT with content type SIMPLE
class LIMIT (pyxb.binding.basis.complexTypeDefinition):
    """Complex type LIMIT with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LIMIT')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1929, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute INTERVAL-TYPE uses Python identifier INTERVAL_TYPE
    __INTERVAL_TYPE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'INTERVAL-TYPE'), 'INTERVAL_TYPE', '__LIMIT_INTERVAL_TYPE', INTERVAL_TYPE, unicode_default='CLOSED')
    __INTERVAL_TYPE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1933, 0)
    __INTERVAL_TYPE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1933, 0)
    
    INTERVAL_TYPE = property(__INTERVAL_TYPE.value, __INTERVAL_TYPE.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __INTERVAL_TYPE.name() : __INTERVAL_TYPE
    })
Namespace.addCategoryObject('typeBinding', 'LIMIT', LIMIT)


# Complex type LINK-COMPARAM-REF with content type ELEMENT_ONLY
class LINK_COMPARAM_REF (pyxb.binding.basis.complexTypeDefinition):
    """Complex type LINK-COMPARAM-REF with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LINK-COMPARAM-REF')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1937, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SIMPLE-VALUE uses Python identifier SIMPLE_VALUE
    __SIMPLE_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SIMPLE-VALUE'), 'SIMPLE_VALUE', '__LINK_COMPARAM_REF_SIMPLE_VALUE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1941, 0), )

    
    SIMPLE_VALUE = property(__SIMPLE_VALUE.value, __SIMPLE_VALUE.set, None, None)

    
    # Element COMPLEX-VALUE uses Python identifier COMPLEX_VALUE
    __COMPLEX_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPLEX-VALUE'), 'COMPLEX_VALUE', '__LINK_COMPARAM_REF_COMPLEX_VALUE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1942, 0), )

    
    COMPLEX_VALUE = property(__COMPLEX_VALUE.value, __COMPLEX_VALUE.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__LINK_COMPARAM_REF_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1944, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID-REF uses Python identifier ID_REF
    __ID_REF = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID-REF'), 'ID_REF', '__LINK_COMPARAM_REF_ID_REF', pyxb.binding.datatypes.string, required=True)
    __ID_REF._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3771, 0)
    __ID_REF._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3771, 0)
    
    ID_REF = property(__ID_REF.value, __ID_REF.set, None, None)

    
    # Attribute DOCREF uses Python identifier DOCREF
    __DOCREF = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DOCREF'), 'DOCREF', '__LINK_COMPARAM_REF_DOCREF', STD_ANON_14)
    __DOCREF._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3772, 0)
    __DOCREF._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3772, 0)
    
    DOCREF = property(__DOCREF.value, __DOCREF.set, None, None)

    
    # Attribute DOCTYPE uses Python identifier DOCTYPE
    __DOCTYPE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DOCTYPE'), 'DOCTYPE', '__LINK_COMPARAM_REF_DOCTYPE', DOCTYPE)
    __DOCTYPE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3779, 0)
    __DOCTYPE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3779, 0)
    
    DOCTYPE = property(__DOCTYPE.value, __DOCTYPE.set, None, None)

    
    # Attribute REVISION uses Python identifier REVISION
    __REVISION = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'REVISION'), 'REVISION', '__LINK_COMPARAM_REF_REVISION', pyxb.binding.datatypes.string)
    __REVISION._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3780, 0)
    __REVISION._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3780, 0)
    
    REVISION = property(__REVISION.value, __REVISION.set, None, None)

    _ElementMap.update({
        __SIMPLE_VALUE.name() : __SIMPLE_VALUE,
        __COMPLEX_VALUE.name() : __COMPLEX_VALUE,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID_REF.name() : __ID_REF,
        __DOCREF.name() : __DOCREF,
        __DOCTYPE.name() : __DOCTYPE,
        __REVISION.name() : __REVISION
    })
Namespace.addCategoryObject('typeBinding', 'LINK-COMPARAM-REF', LINK_COMPARAM_REF)


# Complex type LONG-NAME with content type SIMPLE
class LONG_NAME (TEXT):
    """Complex type LONG-NAME with content type SIMPLE"""
    _TypeDefinition = STD_ANON_4
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LONG-NAME')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1991, 0)
    _ElementMap = TEXT._ElementMap.copy()
    _AttributeMap = TEXT._AttributeMap.copy()
    # Base type is TEXT
    
    # Attribute TI inherited from TEXT
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'LONG-NAME', LONG_NAME)


# Complex type MEMBER-LOGICAL-LINK with content type ELEMENT_ONLY
class MEMBER_LOGICAL_LINK (LOGICAL_LINK):
    """Complex type MEMBER-LOGICAL-LINK with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MEMBER-LOGICAL-LINK')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2073, 0)
    _ElementMap = LOGICAL_LINK._ElementMap.copy()
    _AttributeMap = LOGICAL_LINK._AttributeMap.copy()
    # Base type is LOGICAL_LINK
    
    # Element GATEWAY_LOGICAL_LINK_REFS (GATEWAY-LOGICAL-LINK-REFS) inherited from LOGICAL-LINK
    
    # Element PHYSICAL_VEHICLE_LINK_REF (PHYSICAL-VEHICLE-LINK-REF) inherited from LOGICAL-LINK
    
    # Element PROTOCOL_REF (PROTOCOL-REF) inherited from LOGICAL-LINK
    
    # Element FUNCTIONAL_GROUP_REF (FUNCTIONAL-GROUP-REF) inherited from LOGICAL-LINK
    
    # Element BASE_VARIANT_REF (BASE-VARIANT-REF) inherited from LOGICAL-LINK
    
    # Element ECU_PROXY_REFS (ECU-PROXY-REFS) inherited from LOGICAL-LINK
    
    # Element LINK_COMPARAM_REFS (LINK-COMPARAM-REFS) inherited from LOGICAL-LINK
    
    # Element PROT_STACK_SNREF (PROT-STACK-SNREF) inherited from LOGICAL-LINK
    
    # Element SHORT_NAME (SHORT-NAME) inherited from LOGICAL-LINK
    
    # Element LONG_NAME (LONG-NAME) inherited from LOGICAL-LINK
    
    # Element DESC (DESC) inherited from LOGICAL-LINK
    
    # Attribute ID inherited from LOGICAL-LINK
    
    # Attribute OID inherited from LOGICAL-LINK
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'MEMBER-LOGICAL-LINK', MEMBER_LOGICAL_LINK)


# Complex type MODEL-YEAR with content type ELEMENT_ONLY
class MODEL_YEAR (INFO_COMPONENT):
    """Complex type MODEL-YEAR with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MODEL-YEAR')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2091, 0)
    _ElementMap = INFO_COMPONENT._ElementMap.copy()
    _AttributeMap = INFO_COMPONENT._AttributeMap.copy()
    # Base type is INFO_COMPONENT
    
    # Element MATCHING_COMPONENTS (MATCHING-COMPONENTS) inherited from INFO-COMPONENT
    
    # Element SHORT_NAME (SHORT-NAME) inherited from INFO-COMPONENT
    
    # Element LONG_NAME (LONG-NAME) inherited from INFO-COMPONENT
    
    # Element DESC (DESC) inherited from INFO-COMPONENT
    
    # Attribute ID inherited from INFO-COMPONENT
    
    # Attribute OID inherited from INFO-COMPONENT
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'MODEL-YEAR', MODEL_YEAR)


# Complex type MULTIPLE-ECU-JOB-SPEC with content type ELEMENT_ONLY
class MULTIPLE_ECU_JOB_SPEC (ODX_CATEGORY):
    """Complex type MULTIPLE-ECU-JOB-SPEC with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MULTIPLE-ECU-JOB-SPEC')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2141, 0)
    _ElementMap = ODX_CATEGORY._ElementMap.copy()
    _AttributeMap = ODX_CATEGORY._AttributeMap.copy()
    # Base type is ODX_CATEGORY
    
    # Element MULTIPLE-ECU-JOBS uses Python identifier MULTIPLE_ECU_JOBS
    __MULTIPLE_ECU_JOBS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MULTIPLE-ECU-JOBS'), 'MULTIPLE_ECU_JOBS', '__MULTIPLE_ECU_JOB_SPEC_MULTIPLE_ECU_JOBS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2146, 0), )

    
    MULTIPLE_ECU_JOBS = property(__MULTIPLE_ECU_JOBS.value, __MULTIPLE_ECU_JOBS.set, None, None)

    
    # Element DIAG-DATADICTIONARY-SPEC uses Python identifier DIAG_DATADICTIONARY_SPEC
    __DIAG_DATADICTIONARY_SPEC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-DATADICTIONARY-SPEC'), 'DIAG_DATADICTIONARY_SPEC', '__MULTIPLE_ECU_JOB_SPEC_DIAG_DATADICTIONARY_SPEC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2147, 0), )

    
    DIAG_DATADICTIONARY_SPEC = property(__DIAG_DATADICTIONARY_SPEC.value, __DIAG_DATADICTIONARY_SPEC.set, None, None)

    
    # Element FUNCT-CLASSS uses Python identifier FUNCT_CLASSS
    __FUNCT_CLASSS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASSS'), 'FUNCT_CLASSS', '__MULTIPLE_ECU_JOB_SPEC_FUNCT_CLASSS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2148, 0), )

    
    FUNCT_CLASSS = property(__FUNCT_CLASSS.value, __FUNCT_CLASSS.set, None, None)

    
    # Element ADDITIONAL-AUDIENCES uses Python identifier ADDITIONAL_AUDIENCES
    __ADDITIONAL_AUDIENCES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ADDITIONAL-AUDIENCES'), 'ADDITIONAL_AUDIENCES', '__MULTIPLE_ECU_JOB_SPEC_ADDITIONAL_AUDIENCES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2149, 0), )

    
    ADDITIONAL_AUDIENCES = property(__ADDITIONAL_AUDIENCES.value, __ADDITIONAL_AUDIENCES.set, None, None)

    
    # Element IMPORT-REFS uses Python identifier IMPORT_REFS
    __IMPORT_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IMPORT-REFS'), 'IMPORT_REFS', '__MULTIPLE_ECU_JOB_SPEC_IMPORT_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2150, 0), )

    
    IMPORT_REFS = property(__IMPORT_REFS.value, __IMPORT_REFS.set, None, None)

    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from ODX-CATEGORY
    
    # Element COMPANY_DATAS (COMPANY-DATAS) inherited from ODX-CATEGORY
    
    # Element SDGS (SDGS) inherited from ODX-CATEGORY
    
    # Element SHORT_NAME (SHORT-NAME) inherited from ODX-CATEGORY
    
    # Element LONG_NAME (LONG-NAME) inherited from ODX-CATEGORY
    
    # Element DESC (DESC) inherited from ODX-CATEGORY
    
    # Attribute ID inherited from ODX-CATEGORY
    
    # Attribute OID inherited from ODX-CATEGORY
    _ElementMap.update({
        __MULTIPLE_ECU_JOBS.name() : __MULTIPLE_ECU_JOBS,
        __DIAG_DATADICTIONARY_SPEC.name() : __DIAG_DATADICTIONARY_SPEC,
        __FUNCT_CLASSS.name() : __FUNCT_CLASSS,
        __ADDITIONAL_AUDIENCES.name() : __ADDITIONAL_AUDIENCES,
        __IMPORT_REFS.name() : __IMPORT_REFS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'MULTIPLE-ECU-JOB-SPEC', MULTIPLE_ECU_JOB_SPEC)


# Complex type NEG-OFFSET with content type ELEMENT_ONLY
class NEG_OFFSET (TARGET_ADDR_OFFSET):
    """Complex type NEG-OFFSET with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NEG-OFFSET')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2175, 0)
    _ElementMap = TARGET_ADDR_OFFSET._ElementMap.copy()
    _AttributeMap = TARGET_ADDR_OFFSET._AttributeMap.copy()
    # Base type is TARGET_ADDR_OFFSET
    
    # Element NEGATIVE-OFFSET uses Python identifier NEGATIVE_OFFSET
    __NEGATIVE_OFFSET = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NEGATIVE-OFFSET'), 'NEGATIVE_OFFSET', '__NEG_OFFSET_NEGATIVE_OFFSET', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2180, 0), )

    
    NEGATIVE_OFFSET = property(__NEGATIVE_OFFSET.value, __NEGATIVE_OFFSET.set, None, None)

    _ElementMap.update({
        __NEGATIVE_OFFSET.name() : __NEGATIVE_OFFSET
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'NEG-OFFSET', NEG_OFFSET)


# Complex type NEG-RESPONSE with content type ELEMENT_ONLY
class NEG_RESPONSE (RESPONSE):
    """Complex type NEG-RESPONSE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NEG-RESPONSE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2198, 0)
    _ElementMap = RESPONSE._ElementMap.copy()
    _AttributeMap = RESPONSE._AttributeMap.copy()
    # Base type is RESPONSE
    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from RESPONSE
    
    # Element PARAMS (PARAMS) inherited from RESPONSE
    
    # Element SDGS (SDGS) inherited from RESPONSE
    
    # Element SHORT_NAME (SHORT-NAME) inherited from RESPONSE
    
    # Element LONG_NAME (LONG-NAME) inherited from RESPONSE
    
    # Element DESC (DESC) inherited from RESPONSE
    
    # Attribute ID inherited from RESPONSE
    
    # Attribute OID inherited from RESPONSE
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'NEG-RESPONSE', NEG_RESPONSE)


# Complex type ODXLINK with content type EMPTY
class ODXLINK (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ODXLINK with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ODXLINK')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2318, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ID-REF uses Python identifier ID_REF
    __ID_REF = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID-REF'), 'ID_REF', '__ODXLINK_ID_REF', pyxb.binding.datatypes.string, required=True)
    __ID_REF._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3771, 0)
    __ID_REF._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3771, 0)
    
    ID_REF = property(__ID_REF.value, __ID_REF.set, None, None)

    
    # Attribute DOCREF uses Python identifier DOCREF
    __DOCREF = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DOCREF'), 'DOCREF', '__ODXLINK_DOCREF', STD_ANON_14)
    __DOCREF._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3772, 0)
    __DOCREF._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3772, 0)
    
    DOCREF = property(__DOCREF.value, __DOCREF.set, None, None)

    
    # Attribute DOCTYPE uses Python identifier DOCTYPE
    __DOCTYPE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DOCTYPE'), 'DOCTYPE', '__ODXLINK_DOCTYPE', DOCTYPE)
    __DOCTYPE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3779, 0)
    __DOCTYPE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3779, 0)
    
    DOCTYPE = property(__DOCTYPE.value, __DOCTYPE.set, None, None)

    
    # Attribute REVISION uses Python identifier REVISION
    __REVISION = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'REVISION'), 'REVISION', '__ODXLINK_REVISION', pyxb.binding.datatypes.string)
    __REVISION._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3780, 0)
    __REVISION._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3780, 0)
    
    REVISION = property(__REVISION.value, __REVISION.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ID_REF.name() : __ID_REF,
        __DOCREF.name() : __DOCREF,
        __DOCTYPE.name() : __DOCTYPE,
        __REVISION.name() : __REVISION
    })
Namespace.addCategoryObject('typeBinding', 'ODXLINK', ODXLINK)


# Complex type OEM with content type ELEMENT_ONLY
class OEM (INFO_COMPONENT):
    """Complex type OEM with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OEM')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2321, 0)
    _ElementMap = INFO_COMPONENT._ElementMap.copy()
    _AttributeMap = INFO_COMPONENT._AttributeMap.copy()
    # Base type is INFO_COMPONENT
    
    # Element MATCHING_COMPONENTS (MATCHING-COMPONENTS) inherited from INFO-COMPONENT
    
    # Element SHORT_NAME (SHORT-NAME) inherited from INFO-COMPONENT
    
    # Element LONG_NAME (LONG-NAME) inherited from INFO-COMPONENT
    
    # Element DESC (DESC) inherited from INFO-COMPONENT
    
    # Attribute ID inherited from INFO-COMPONENT
    
    # Attribute OID inherited from INFO-COMPONENT
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'OEM', OEM)


# Complex type OPTION-ITEM with content type ELEMENT_ONLY
class OPTION_ITEM (CONFIG_ITEM):
    """Complex type OPTION-ITEM with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OPTION-ITEM')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2327, 0)
    _ElementMap = CONFIG_ITEM._ElementMap.copy()
    _AttributeMap = CONFIG_ITEM._AttributeMap.copy()
    # Base type is CONFIG_ITEM
    
    # Element BYTE_POSITION (BYTE-POSITION) inherited from CONFIG-ITEM
    
    # Element BIT_POSITION (BIT-POSITION) inherited from CONFIG-ITEM
    
    # Element DATA_OBJECT_PROP_REF (DATA-OBJECT-PROP-REF) inherited from CONFIG-ITEM
    
    # Element DATA_OBJECT_PROP_SNREF (DATA-OBJECT-PROP-SNREF) inherited from CONFIG-ITEM
    
    # Element SDGS (SDGS) inherited from CONFIG-ITEM
    
    # Element PHYSICAL-DEFAULT-VALUE uses Python identifier PHYSICAL_DEFAULT_VALUE
    __PHYSICAL_DEFAULT_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PHYSICAL-DEFAULT-VALUE'), 'PHYSICAL_DEFAULT_VALUE', '__OPTION_ITEM_PHYSICAL_DEFAULT_VALUE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2332, 0), )

    
    PHYSICAL_DEFAULT_VALUE = property(__PHYSICAL_DEFAULT_VALUE.value, __PHYSICAL_DEFAULT_VALUE.set, None, None)

    
    # Element ITEM-VALUES uses Python identifier ITEM_VALUES
    __ITEM_VALUES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ITEM-VALUES'), 'ITEM_VALUES', '__OPTION_ITEM_ITEM_VALUES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2333, 0), )

    
    ITEM_VALUES = property(__ITEM_VALUES.value, __ITEM_VALUES.set, None, None)

    
    # Element WRITE-AUDIENCE uses Python identifier WRITE_AUDIENCE
    __WRITE_AUDIENCE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'WRITE-AUDIENCE'), 'WRITE_AUDIENCE', '__OPTION_ITEM_WRITE_AUDIENCE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2334, 0), )

    
    WRITE_AUDIENCE = property(__WRITE_AUDIENCE.value, __WRITE_AUDIENCE.set, None, None)

    
    # Element READ-AUDIENCE uses Python identifier READ_AUDIENCE
    __READ_AUDIENCE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'READ-AUDIENCE'), 'READ_AUDIENCE', '__OPTION_ITEM_READ_AUDIENCE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2335, 0), )

    
    READ_AUDIENCE = property(__READ_AUDIENCE.value, __READ_AUDIENCE.set, None, None)

    
    # Element SHORT_NAME (SHORT-NAME) inherited from CONFIG-ITEM
    
    # Element LONG_NAME (LONG-NAME) inherited from CONFIG-ITEM
    
    # Element DESC (DESC) inherited from CONFIG-ITEM
    
    # Attribute SEMANTIC inherited from CONFIG-ITEM
    _ElementMap.update({
        __PHYSICAL_DEFAULT_VALUE.name() : __PHYSICAL_DEFAULT_VALUE,
        __ITEM_VALUES.name() : __ITEM_VALUES,
        __WRITE_AUDIENCE.name() : __WRITE_AUDIENCE,
        __READ_AUDIENCE.name() : __READ_AUDIENCE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'OPTION-ITEM', OPTION_ITEM)


# Complex type PARENT-REF with content type ELEMENT_ONLY
class PARENT_REF (pyxb.binding.basis.complexTypeDefinition):
    """Complex type PARENT-REF with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PARENT-REF')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2409, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element NOT-INHERITED-DIAG-COMMS uses Python identifier NOT_INHERITED_DIAG_COMMS
    __NOT_INHERITED_DIAG_COMMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-DIAG-COMMS'), 'NOT_INHERITED_DIAG_COMMS', '__PARENT_REF_NOT_INHERITED_DIAG_COMMS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2412, 0), )

    
    NOT_INHERITED_DIAG_COMMS = property(__NOT_INHERITED_DIAG_COMMS.value, __NOT_INHERITED_DIAG_COMMS.set, None, None)

    
    # Element NOT-INHERITED-VARIABLES uses Python identifier NOT_INHERITED_VARIABLES
    __NOT_INHERITED_VARIABLES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-VARIABLES'), 'NOT_INHERITED_VARIABLES', '__PARENT_REF_NOT_INHERITED_VARIABLES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2414, 0), )

    
    NOT_INHERITED_VARIABLES = property(__NOT_INHERITED_VARIABLES.value, __NOT_INHERITED_VARIABLES.set, None, None)

    
    # Element NOT-INHERITED-DOPS uses Python identifier NOT_INHERITED_DOPS
    __NOT_INHERITED_DOPS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-DOPS'), 'NOT_INHERITED_DOPS', '__PARENT_REF_NOT_INHERITED_DOPS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2415, 0), )

    
    NOT_INHERITED_DOPS = property(__NOT_INHERITED_DOPS.value, __NOT_INHERITED_DOPS.set, None, None)

    
    # Element NOT-INHERITED-TABLES uses Python identifier NOT_INHERITED_TABLES
    __NOT_INHERITED_TABLES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-TABLES'), 'NOT_INHERITED_TABLES', '__PARENT_REF_NOT_INHERITED_TABLES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2416, 0), )

    
    NOT_INHERITED_TABLES = property(__NOT_INHERITED_TABLES.value, __NOT_INHERITED_TABLES.set, None, None)

    
    # Element NOT-INHERITED-GLOBAL-NEG-RESPONSES uses Python identifier NOT_INHERITED_GLOBAL_NEG_RESPONSES
    __NOT_INHERITED_GLOBAL_NEG_RESPONSES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-GLOBAL-NEG-RESPONSES'), 'NOT_INHERITED_GLOBAL_NEG_RESPONSES', '__PARENT_REF_NOT_INHERITED_GLOBAL_NEG_RESPONSES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2417, 0), )

    
    NOT_INHERITED_GLOBAL_NEG_RESPONSES = property(__NOT_INHERITED_GLOBAL_NEG_RESPONSES.value, __NOT_INHERITED_GLOBAL_NEG_RESPONSES.set, None, None)

    
    # Attribute ID-REF uses Python identifier ID_REF
    __ID_REF = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID-REF'), 'ID_REF', '__PARENT_REF_ID_REF', pyxb.binding.datatypes.string, required=True)
    __ID_REF._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3771, 0)
    __ID_REF._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3771, 0)
    
    ID_REF = property(__ID_REF.value, __ID_REF.set, None, None)

    
    # Attribute DOCREF uses Python identifier DOCREF
    __DOCREF = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DOCREF'), 'DOCREF', '__PARENT_REF_DOCREF', STD_ANON_14)
    __DOCREF._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3772, 0)
    __DOCREF._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3772, 0)
    
    DOCREF = property(__DOCREF.value, __DOCREF.set, None, None)

    
    # Attribute DOCTYPE uses Python identifier DOCTYPE
    __DOCTYPE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DOCTYPE'), 'DOCTYPE', '__PARENT_REF_DOCTYPE', DOCTYPE)
    __DOCTYPE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3779, 0)
    __DOCTYPE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3779, 0)
    
    DOCTYPE = property(__DOCTYPE.value, __DOCTYPE.set, None, None)

    
    # Attribute REVISION uses Python identifier REVISION
    __REVISION = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'REVISION'), 'REVISION', '__PARENT_REF_REVISION', pyxb.binding.datatypes.string)
    __REVISION._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3780, 0)
    __REVISION._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3780, 0)
    
    REVISION = property(__REVISION.value, __REVISION.set, None, None)

    _ElementMap.update({
        __NOT_INHERITED_DIAG_COMMS.name() : __NOT_INHERITED_DIAG_COMMS,
        __NOT_INHERITED_VARIABLES.name() : __NOT_INHERITED_VARIABLES,
        __NOT_INHERITED_DOPS.name() : __NOT_INHERITED_DOPS,
        __NOT_INHERITED_TABLES.name() : __NOT_INHERITED_TABLES,
        __NOT_INHERITED_GLOBAL_NEG_RESPONSES.name() : __NOT_INHERITED_GLOBAL_NEG_RESPONSES
    })
    _AttributeMap.update({
        __ID_REF.name() : __ID_REF,
        __DOCREF.name() : __DOCREF,
        __DOCTYPE.name() : __DOCTYPE,
        __REVISION.name() : __REVISION
    })
Namespace.addCategoryObject('typeBinding', 'PARENT-REF', PARENT_REF)


# Complex type PHYSICAL-TYPE with content type ELEMENT_ONLY
class PHYSICAL_TYPE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type PHYSICAL-TYPE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PHYSICAL-TYPE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2472, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PRECISION uses Python identifier PRECISION
    __PRECISION = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PRECISION'), 'PRECISION', '__PHYSICAL_TYPE_PRECISION', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2475, 0), )

    
    PRECISION = property(__PRECISION.value, __PRECISION.set, None, None)

    
    # Attribute BASE-DATA-TYPE uses Python identifier BASE_DATA_TYPE
    __BASE_DATA_TYPE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'BASE-DATA-TYPE'), 'BASE_DATA_TYPE', '__PHYSICAL_TYPE_BASE_DATA_TYPE', PHYSICAL_DATA_TYPE, required=True)
    __BASE_DATA_TYPE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2477, 0)
    __BASE_DATA_TYPE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2477, 0)
    
    BASE_DATA_TYPE = property(__BASE_DATA_TYPE.value, __BASE_DATA_TYPE.set, None, None)

    
    # Attribute DISPLAY-RADIX uses Python identifier DISPLAY_RADIX
    __DISPLAY_RADIX = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DISPLAY-RADIX'), 'DISPLAY_RADIX', '__PHYSICAL_TYPE_DISPLAY_RADIX', RADIX)
    __DISPLAY_RADIX._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2478, 0)
    __DISPLAY_RADIX._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2478, 0)
    
    DISPLAY_RADIX = property(__DISPLAY_RADIX.value, __DISPLAY_RADIX.set, None, None)

    _ElementMap.update({
        __PRECISION.name() : __PRECISION
    })
    _AttributeMap.update({
        __BASE_DATA_TYPE.name() : __BASE_DATA_TYPE,
        __DISPLAY_RADIX.name() : __DISPLAY_RADIX
    })
Namespace.addCategoryObject('typeBinding', 'PHYSICAL-TYPE', PHYSICAL_TYPE)


# Complex type POSITIONABLE-PARAM with content type ELEMENT_ONLY
class POSITIONABLE_PARAM (PARAM):
    """Complex type POSITIONABLE-PARAM with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'POSITIONABLE-PARAM')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2537, 0)
    _ElementMap = PARAM._ElementMap.copy()
    _AttributeMap = PARAM._AttributeMap.copy()
    # Base type is PARAM
    
    # Element SDGS (SDGS) inherited from PARAM
    
    # Element BYTE-POSITION uses Python identifier BYTE_POSITION
    __BYTE_POSITION = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION'), 'BYTE_POSITION', '__POSITIONABLE_PARAM_BYTE_POSITION', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2542, 0), )

    
    BYTE_POSITION = property(__BYTE_POSITION.value, __BYTE_POSITION.set, None, None)

    
    # Element BIT-POSITION uses Python identifier BIT_POSITION
    __BIT_POSITION = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BIT-POSITION'), 'BIT_POSITION', '__POSITIONABLE_PARAM_BIT_POSITION', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2543, 0), )

    
    BIT_POSITION = property(__BIT_POSITION.value, __BIT_POSITION.set, None, None)

    
    # Element SHORT_NAME (SHORT-NAME) inherited from PARAM
    
    # Element LONG_NAME (LONG-NAME) inherited from PARAM
    
    # Element DESC (DESC) inherited from PARAM
    
    # Attribute OID inherited from PARAM
    
    # Attribute SEMANTIC inherited from PARAM
    _ElementMap.update({
        __BYTE_POSITION.name() : __BYTE_POSITION,
        __BIT_POSITION.name() : __BIT_POSITION
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'POSITIONABLE-PARAM', POSITIONABLE_PARAM)


# Complex type POS-OFFSET with content type ELEMENT_ONLY
class POS_OFFSET (TARGET_ADDR_OFFSET):
    """Complex type POS-OFFSET with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'POS-OFFSET')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2554, 0)
    _ElementMap = TARGET_ADDR_OFFSET._ElementMap.copy()
    _AttributeMap = TARGET_ADDR_OFFSET._AttributeMap.copy()
    # Base type is TARGET_ADDR_OFFSET
    
    # Element POSITIVE-OFFSET uses Python identifier POSITIVE_OFFSET
    __POSITIVE_OFFSET = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'POSITIVE-OFFSET'), 'POSITIVE_OFFSET', '__POS_OFFSET_POSITIVE_OFFSET', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2559, 0), )

    
    POSITIVE_OFFSET = property(__POSITIVE_OFFSET.value, __POSITIVE_OFFSET.set, None, None)

    _ElementMap.update({
        __POSITIVE_OFFSET.name() : __POSITIVE_OFFSET
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'POS-OFFSET', POS_OFFSET)


# Complex type POS-RESPONSE with content type ELEMENT_ONLY
class POS_RESPONSE (RESPONSE):
    """Complex type POS-RESPONSE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'POS-RESPONSE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2564, 0)
    _ElementMap = RESPONSE._ElementMap.copy()
    _AttributeMap = RESPONSE._AttributeMap.copy()
    # Base type is RESPONSE
    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from RESPONSE
    
    # Element PARAMS (PARAMS) inherited from RESPONSE
    
    # Element SDGS (SDGS) inherited from RESPONSE
    
    # Element SHORT_NAME (SHORT-NAME) inherited from RESPONSE
    
    # Element LONG_NAME (LONG-NAME) inherited from RESPONSE
    
    # Element DESC (DESC) inherited from RESPONSE
    
    # Attribute ID inherited from RESPONSE
    
    # Attribute OID inherited from RESPONSE
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'POS-RESPONSE', POS_RESPONSE)


# Complex type PRE-CONDITION-STATE-REF with content type ELEMENT_ONLY
class PRE_CONDITION_STATE_REF (pyxb.binding.basis.complexTypeDefinition):
    """Complex type PRE-CONDITION-STATE-REF with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PRE-CONDITION-STATE-REF')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2606, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element VALUE uses Python identifier VALUE
    __VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VALUE'), 'VALUE', '__PRE_CONDITION_STATE_REF_VALUE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2609, 0), )

    
    VALUE = property(__VALUE.value, __VALUE.set, None, None)

    
    # Element IN-PARAM-IF-SNREF uses Python identifier IN_PARAM_IF_SNREF
    __IN_PARAM_IF_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNREF'), 'IN_PARAM_IF_SNREF', '__PRE_CONDITION_STATE_REF_IN_PARAM_IF_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2611, 0), )

    
    IN_PARAM_IF_SNREF = property(__IN_PARAM_IF_SNREF.value, __IN_PARAM_IF_SNREF.set, None, None)

    
    # Element IN-PARAM-IF-SNPATHREF uses Python identifier IN_PARAM_IF_SNPATHREF
    __IN_PARAM_IF_SNPATHREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNPATHREF'), 'IN_PARAM_IF_SNPATHREF', '__PRE_CONDITION_STATE_REF_IN_PARAM_IF_SNPATHREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2612, 0), )

    
    IN_PARAM_IF_SNPATHREF = property(__IN_PARAM_IF_SNPATHREF.value, __IN_PARAM_IF_SNPATHREF.set, None, None)

    
    # Attribute ID-REF uses Python identifier ID_REF
    __ID_REF = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID-REF'), 'ID_REF', '__PRE_CONDITION_STATE_REF_ID_REF', pyxb.binding.datatypes.string, required=True)
    __ID_REF._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3771, 0)
    __ID_REF._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3771, 0)
    
    ID_REF = property(__ID_REF.value, __ID_REF.set, None, None)

    
    # Attribute DOCREF uses Python identifier DOCREF
    __DOCREF = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DOCREF'), 'DOCREF', '__PRE_CONDITION_STATE_REF_DOCREF', STD_ANON_14)
    __DOCREF._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3772, 0)
    __DOCREF._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3772, 0)
    
    DOCREF = property(__DOCREF.value, __DOCREF.set, None, None)

    
    # Attribute DOCTYPE uses Python identifier DOCTYPE
    __DOCTYPE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DOCTYPE'), 'DOCTYPE', '__PRE_CONDITION_STATE_REF_DOCTYPE', DOCTYPE)
    __DOCTYPE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3779, 0)
    __DOCTYPE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3779, 0)
    
    DOCTYPE = property(__DOCTYPE.value, __DOCTYPE.set, None, None)

    
    # Attribute REVISION uses Python identifier REVISION
    __REVISION = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'REVISION'), 'REVISION', '__PRE_CONDITION_STATE_REF_REVISION', pyxb.binding.datatypes.string)
    __REVISION._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3780, 0)
    __REVISION._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3780, 0)
    
    REVISION = property(__REVISION.value, __REVISION.set, None, None)

    _ElementMap.update({
        __VALUE.name() : __VALUE,
        __IN_PARAM_IF_SNREF.name() : __IN_PARAM_IF_SNREF,
        __IN_PARAM_IF_SNPATHREF.name() : __IN_PARAM_IF_SNPATHREF
    })
    _AttributeMap.update({
        __ID_REF.name() : __ID_REF,
        __DOCREF.name() : __DOCREF,
        __DOCTYPE.name() : __DOCTYPE,
        __REVISION.name() : __REVISION
    })
Namespace.addCategoryObject('typeBinding', 'PRE-CONDITION-STATE-REF', PRE_CONDITION_STATE_REF)


# Complex type RELATED-DIAG-COMM-REF with content type ELEMENT_ONLY
class RELATED_DIAG_COMM_REF (pyxb.binding.basis.complexTypeDefinition):
    """Complex type RELATED-DIAG-COMM-REF with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RELATED-DIAG-COMM-REF')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2726, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element RELATION-TYPE uses Python identifier RELATION_TYPE
    __RELATION_TYPE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RELATION-TYPE'), 'RELATION_TYPE', '__RELATED_DIAG_COMM_REF_RELATION_TYPE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2729, 0), )

    
    RELATION_TYPE = property(__RELATION_TYPE.value, __RELATION_TYPE.set, None, None)

    
    # Attribute ID-REF uses Python identifier ID_REF
    __ID_REF = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID-REF'), 'ID_REF', '__RELATED_DIAG_COMM_REF_ID_REF', pyxb.binding.datatypes.string, required=True)
    __ID_REF._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3771, 0)
    __ID_REF._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3771, 0)
    
    ID_REF = property(__ID_REF.value, __ID_REF.set, None, None)

    
    # Attribute DOCREF uses Python identifier DOCREF
    __DOCREF = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DOCREF'), 'DOCREF', '__RELATED_DIAG_COMM_REF_DOCREF', STD_ANON_14)
    __DOCREF._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3772, 0)
    __DOCREF._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3772, 0)
    
    DOCREF = property(__DOCREF.value, __DOCREF.set, None, None)

    
    # Attribute DOCTYPE uses Python identifier DOCTYPE
    __DOCTYPE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DOCTYPE'), 'DOCTYPE', '__RELATED_DIAG_COMM_REF_DOCTYPE', DOCTYPE)
    __DOCTYPE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3779, 0)
    __DOCTYPE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3779, 0)
    
    DOCTYPE = property(__DOCTYPE.value, __DOCTYPE.set, None, None)

    
    # Attribute REVISION uses Python identifier REVISION
    __REVISION = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'REVISION'), 'REVISION', '__RELATED_DIAG_COMM_REF_REVISION', pyxb.binding.datatypes.string)
    __REVISION._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3780, 0)
    __REVISION._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3780, 0)
    
    REVISION = property(__REVISION.value, __REVISION.set, None, None)

    _ElementMap.update({
        __RELATION_TYPE.name() : __RELATION_TYPE
    })
    _AttributeMap.update({
        __ID_REF.name() : __ID_REF,
        __DOCREF.name() : __DOCREF,
        __DOCTYPE.name() : __DOCTYPE,
        __REVISION.name() : __REVISION
    })
Namespace.addCategoryObject('typeBinding', 'RELATED-DIAG-COMM-REF', RELATED_DIAG_COMM_REF)


# Complex type SCALE-CONSTR with content type ELEMENT_ONLY
class SCALE_CONSTR (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SCALE-CONSTR with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SCALE-CONSTR')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2808, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SHORT-LABEL uses Python identifier SHORT_LABEL
    __SHORT_LABEL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-LABEL'), 'SHORT_LABEL', '__SCALE_CONSTR_SHORT_LABEL', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2811, 0), )

    
    SHORT_LABEL = property(__SHORT_LABEL.value, __SHORT_LABEL.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__SCALE_CONSTR_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2812, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Element LOWER-LIMIT uses Python identifier LOWER_LIMIT
    __LOWER_LIMIT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LOWER-LIMIT'), 'LOWER_LIMIT', '__SCALE_CONSTR_LOWER_LIMIT', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2813, 0), )

    
    LOWER_LIMIT = property(__LOWER_LIMIT.value, __LOWER_LIMIT.set, None, None)

    
    # Element UPPER-LIMIT uses Python identifier UPPER_LIMIT
    __UPPER_LIMIT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UPPER-LIMIT'), 'UPPER_LIMIT', '__SCALE_CONSTR_UPPER_LIMIT', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2814, 0), )

    
    UPPER_LIMIT = property(__UPPER_LIMIT.value, __UPPER_LIMIT.set, None, None)

    
    # Attribute VALIDITY uses Python identifier VALIDITY
    __VALIDITY = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'VALIDITY'), 'VALIDITY', '__SCALE_CONSTR_VALIDITY', VALID_TYPE, required=True)
    __VALIDITY._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2816, 0)
    __VALIDITY._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2816, 0)
    
    VALIDITY = property(__VALIDITY.value, __VALIDITY.set, None, None)

    _ElementMap.update({
        __SHORT_LABEL.name() : __SHORT_LABEL,
        __DESC.name() : __DESC,
        __LOWER_LIMIT.name() : __LOWER_LIMIT,
        __UPPER_LIMIT.name() : __UPPER_LIMIT
    })
    _AttributeMap.update({
        __VALIDITY.name() : __VALIDITY
    })
Namespace.addCategoryObject('typeBinding', 'SCALE-CONSTR', SCALE_CONSTR)


# Complex type SDG with content type ELEMENT_ONLY
class SDG (SPECIAL_DATA):
    """Complex type SDG with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SDG')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2833, 0)
    _ElementMap = SPECIAL_DATA._ElementMap.copy()
    _AttributeMap = SPECIAL_DATA._AttributeMap.copy()
    # Base type is SPECIAL_DATA
    
    # Element SDG-CAPTION-REF uses Python identifier SDG_CAPTION_REF
    __SDG_CAPTION_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDG-CAPTION-REF'), 'SDG_CAPTION_REF', '__SDG_SDG_CAPTION_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2839, 0), )

    
    SDG_CAPTION_REF = property(__SDG_CAPTION_REF.value, __SDG_CAPTION_REF.set, None, None)

    
    # Element SDG-CAPTION uses Python identifier SDG_CAPTION
    __SDG_CAPTION = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDG-CAPTION'), 'SDG_CAPTION', '__SDG_SDG_CAPTION', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2840, 0), )

    
    SDG_CAPTION = property(__SDG_CAPTION.value, __SDG_CAPTION.set, None, None)

    
    # Element SDG uses Python identifier SDG
    __SDG = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDG'), 'SDG', '__SDG_SDG', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2843, 0), )

    
    SDG = property(__SDG.value, __SDG.set, None, None)

    
    # Element SD uses Python identifier SD
    __SD = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SD'), 'SD', '__SDG_SD', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2844, 0), )

    
    SD = property(__SD.value, __SD.set, None, None)

    
    # Attribute SI uses Python identifier SI
    __SI = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SI'), 'SI', '__SDG_SI', pyxb.binding.datatypes.string)
    __SI._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2847, 0)
    __SI._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2847, 0)
    
    SI = property(__SI.value, __SI.set, None, None)

    _ElementMap.update({
        __SDG_CAPTION_REF.name() : __SDG_CAPTION_REF,
        __SDG_CAPTION.name() : __SDG_CAPTION,
        __SDG.name() : __SDG,
        __SD.name() : __SD
    })
    _AttributeMap.update({
        __SI.name() : __SI
    })
Namespace.addCategoryObject('typeBinding', 'SDG', SDG)


# Complex type SECURITY-METHOD with content type SIMPLE
class SECURITY_METHOD (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SECURITY-METHOD with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SECURITY-METHOD')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2874, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute TYPE uses Python identifier TYPE
    __TYPE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TYPE'), 'TYPE', '__SECURITY_METHOD_TYPE', SESSION_SUB_ELEM_TYPE, required=True)
    __TYPE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2878, 0)
    __TYPE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2878, 0)
    
    TYPE = property(__TYPE.value, __TYPE.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __TYPE.name() : __TYPE
    })
Namespace.addCategoryObject('typeBinding', 'SECURITY-METHOD', SECURITY_METHOD)


# Complex type SESSION-DESC with content type ELEMENT_ONLY
class SESSION_DESC (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SESSION-DESC with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SESSION-DESC')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2929, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PARTNUMBER uses Python identifier PARTNUMBER
    __PARTNUMBER = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PARTNUMBER'), 'PARTNUMBER', '__SESSION_DESC_PARTNUMBER', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2933, 0), )

    
    PARTNUMBER = property(__PARTNUMBER.value, __PARTNUMBER.set, None, None)

    
    # Element PRIORITY uses Python identifier PRIORITY
    __PRIORITY = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PRIORITY'), 'PRIORITY', '__SESSION_DESC_PRIORITY', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2934, 0), )

    
    PRIORITY = property(__PRIORITY.value, __PRIORITY.set, None, None)

    
    # Element SESSION-SNREF uses Python identifier SESSION_SNREF
    __SESSION_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SESSION-SNREF'), 'SESSION_SNREF', '__SESSION_DESC_SESSION_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2935, 0), )

    
    SESSION_SNREF = property(__SESSION_SNREF.value, __SESSION_SNREF.set, None, None)

    
    # Element DIAG-COMM-SNREF uses Python identifier DIAG_COMM_SNREF
    __DIAG_COMM_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-SNREF'), 'DIAG_COMM_SNREF', '__SESSION_DESC_DIAG_COMM_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2936, 0), )

    
    DIAG_COMM_SNREF = property(__DIAG_COMM_SNREF.value, __DIAG_COMM_SNREF.set, None, None)

    
    # Element FLASH-CLASS-REFS uses Python identifier FLASH_CLASS_REFS
    __FLASH_CLASS_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FLASH-CLASS-REFS'), 'FLASH_CLASS_REFS', '__SESSION_DESC_FLASH_CLASS_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2937, 0), )

    
    FLASH_CLASS_REFS = property(__FLASH_CLASS_REFS.value, __FLASH_CLASS_REFS.set, None, None)

    
    # Element SDGS uses Python identifier SDGS
    __SDGS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SDGS'), 'SDGS', '__SESSION_DESC_SDGS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2938, 0), )

    
    SDGS = property(__SDGS.value, __SDGS.set, None, None)

    
    # Element AUDIENCE uses Python identifier AUDIENCE
    __AUDIENCE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AUDIENCE'), 'AUDIENCE', '__SESSION_DESC_AUDIENCE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2939, 0), )

    
    AUDIENCE = property(__AUDIENCE.value, __AUDIENCE.set, None, None)

    
    # Element OWN-IDENT uses Python identifier OWN_IDENT
    __OWN_IDENT = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OWN-IDENT'), 'OWN_IDENT', '__SESSION_DESC_OWN_IDENT', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2940, 0), )

    
    OWN_IDENT = property(__OWN_IDENT.value, __OWN_IDENT.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__SESSION_DESC_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__SESSION_DESC_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__SESSION_DESC_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__SESSION_DESC_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2942, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2942, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    
    # Attribute DIRECTION uses Python identifier DIRECTION
    __DIRECTION = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DIRECTION'), 'DIRECTION', '__SESSION_DESC_DIRECTION', DIRECTION, required=True)
    __DIRECTION._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2943, 0)
    __DIRECTION._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2943, 0)
    
    DIRECTION = property(__DIRECTION.value, __DIRECTION.set, None, None)

    _ElementMap.update({
        __PARTNUMBER.name() : __PARTNUMBER,
        __PRIORITY.name() : __PRIORITY,
        __SESSION_SNREF.name() : __SESSION_SNREF,
        __DIAG_COMM_SNREF.name() : __DIAG_COMM_SNREF,
        __FLASH_CLASS_REFS.name() : __FLASH_CLASS_REFS,
        __SDGS.name() : __SDGS,
        __AUDIENCE.name() : __AUDIENCE,
        __OWN_IDENT.name() : __OWN_IDENT,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __OID.name() : __OID,
        __DIRECTION.name() : __DIRECTION
    })
Namespace.addCategoryObject('typeBinding', 'SESSION-DESC', SESSION_DESC)


# Complex type SIZEDEF-FILTER with content type ELEMENT_ONLY
class SIZEDEF_FILTER (FILTER):
    """Complex type SIZEDEF-FILTER with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SIZEDEF-FILTER')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2983, 0)
    _ElementMap = FILTER._ElementMap.copy()
    _AttributeMap = FILTER._AttributeMap.copy()
    # Base type is FILTER
    
    # Element FILTER_START (FILTER-START) inherited from FILTER
    
    # Element FILTER-SIZE uses Python identifier FILTER_SIZE
    __FILTER_SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FILTER-SIZE'), 'FILTER_SIZE', '__SIZEDEF_FILTER_FILTER_SIZE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2988, 0), )

    
    FILTER_SIZE = property(__FILTER_SIZE.value, __FILTER_SIZE.set, None, None)

    _ElementMap.update({
        __FILTER_SIZE.name() : __FILTER_SIZE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SIZEDEF-FILTER', SIZEDEF_FILTER)


# Complex type SIZEDEF-PHYS-SEGMENT with content type ELEMENT_ONLY
class SIZEDEF_PHYS_SEGMENT (PHYS_SEGMENT):
    """Complex type SIZEDEF-PHYS-SEGMENT with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SIZEDEF-PHYS-SEGMENT')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2999, 0)
    _ElementMap = PHYS_SEGMENT._ElementMap.copy()
    _AttributeMap = PHYS_SEGMENT._AttributeMap.copy()
    # Base type is PHYS_SEGMENT
    
    # Element FILLBYTE (FILLBYTE) inherited from PHYS-SEGMENT
    
    # Element BLOCK_SIZE (BLOCK-SIZE) inherited from PHYS-SEGMENT
    
    # Element START_ADDRESS (START-ADDRESS) inherited from PHYS-SEGMENT
    
    # Element SIZE uses Python identifier SIZE
    __SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SIZE'), 'SIZE', '__SIZEDEF_PHYS_SEGMENT_SIZE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3004, 0), )

    
    SIZE = property(__SIZE.value, __SIZE.set, None, None)

    
    # Element SHORT_NAME (SHORT-NAME) inherited from PHYS-SEGMENT
    
    # Element LONG_NAME (LONG-NAME) inherited from PHYS-SEGMENT
    
    # Element DESC (DESC) inherited from PHYS-SEGMENT
    
    # Attribute ID inherited from PHYS-SEGMENT
    
    # Attribute OID inherited from PHYS-SEGMENT
    _ElementMap.update({
        __SIZE.name() : __SIZE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SIZEDEF-PHYS-SEGMENT', SIZEDEF_PHYS_SEGMENT)


# Complex type SNPATHREF with content type EMPTY
class SNPATHREF (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SNPATHREF with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SNPATHREF')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3015, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute SHORT-NAME-PATH uses Python identifier SHORT_NAME_PATH
    __SHORT_NAME_PATH = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SHORT-NAME-PATH'), 'SHORT_NAME_PATH', '__SNPATHREF_SHORT_NAME_PATH', STD_ANON_9, required=True)
    __SHORT_NAME_PATH._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3016, 0)
    __SHORT_NAME_PATH._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3016, 0)
    
    SHORT_NAME_PATH = property(__SHORT_NAME_PATH.value, __SHORT_NAME_PATH.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __SHORT_NAME_PATH.name() : __SHORT_NAME_PATH
    })
Namespace.addCategoryObject('typeBinding', 'SNPATHREF', SNPATHREF)


# Complex type SNREF with content type EMPTY
class SNREF (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SNREF with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SNREF')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3024, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__SNREF_SHORT_NAME', STD_ANON_10, required=True)
    __SHORT_NAME._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3025, 0)
    __SHORT_NAME._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3025, 0)
    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __SHORT_NAME.name() : __SHORT_NAME
    })
Namespace.addCategoryObject('typeBinding', 'SNREF', SNREF)


# Complex type STATE-TRANSITION-REF with content type ELEMENT_ONLY
class STATE_TRANSITION_REF (pyxb.binding.basis.complexTypeDefinition):
    """Complex type STATE-TRANSITION-REF with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'STATE-TRANSITION-REF')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3118, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element VALUE uses Python identifier VALUE
    __VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VALUE'), 'VALUE', '__STATE_TRANSITION_REF_VALUE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3121, 0), )

    
    VALUE = property(__VALUE.value, __VALUE.set, None, None)

    
    # Element IN-PARAM-IF-SNREF uses Python identifier IN_PARAM_IF_SNREF
    __IN_PARAM_IF_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNREF'), 'IN_PARAM_IF_SNREF', '__STATE_TRANSITION_REF_IN_PARAM_IF_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3123, 0), )

    
    IN_PARAM_IF_SNREF = property(__IN_PARAM_IF_SNREF.value, __IN_PARAM_IF_SNREF.set, None, None)

    
    # Element IN-PARAM-IF-SNPATHREF uses Python identifier IN_PARAM_IF_SNPATHREF
    __IN_PARAM_IF_SNPATHREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNPATHREF'), 'IN_PARAM_IF_SNPATHREF', '__STATE_TRANSITION_REF_IN_PARAM_IF_SNPATHREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3124, 0), )

    
    IN_PARAM_IF_SNPATHREF = property(__IN_PARAM_IF_SNPATHREF.value, __IN_PARAM_IF_SNPATHREF.set, None, None)

    
    # Attribute ID-REF uses Python identifier ID_REF
    __ID_REF = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID-REF'), 'ID_REF', '__STATE_TRANSITION_REF_ID_REF', pyxb.binding.datatypes.string, required=True)
    __ID_REF._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3771, 0)
    __ID_REF._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3771, 0)
    
    ID_REF = property(__ID_REF.value, __ID_REF.set, None, None)

    
    # Attribute DOCREF uses Python identifier DOCREF
    __DOCREF = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DOCREF'), 'DOCREF', '__STATE_TRANSITION_REF_DOCREF', STD_ANON_14)
    __DOCREF._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3772, 0)
    __DOCREF._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3772, 0)
    
    DOCREF = property(__DOCREF.value, __DOCREF.set, None, None)

    
    # Attribute DOCTYPE uses Python identifier DOCTYPE
    __DOCTYPE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'DOCTYPE'), 'DOCTYPE', '__STATE_TRANSITION_REF_DOCTYPE', DOCTYPE)
    __DOCTYPE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3779, 0)
    __DOCTYPE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3779, 0)
    
    DOCTYPE = property(__DOCTYPE.value, __DOCTYPE.set, None, None)

    
    # Attribute REVISION uses Python identifier REVISION
    __REVISION = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'REVISION'), 'REVISION', '__STATE_TRANSITION_REF_REVISION', pyxb.binding.datatypes.string)
    __REVISION._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3780, 0)
    __REVISION._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3780, 0)
    
    REVISION = property(__REVISION.value, __REVISION.set, None, None)

    _ElementMap.update({
        __VALUE.name() : __VALUE,
        __IN_PARAM_IF_SNREF.name() : __IN_PARAM_IF_SNREF,
        __IN_PARAM_IF_SNPATHREF.name() : __IN_PARAM_IF_SNPATHREF
    })
    _AttributeMap.update({
        __ID_REF.name() : __ID_REF,
        __DOCREF.name() : __DOCREF,
        __DOCTYPE.name() : __DOCTYPE,
        __REVISION.name() : __REVISION
    })
Namespace.addCategoryObject('typeBinding', 'STATE-TRANSITION-REF', STATE_TRANSITION_REF)


# Complex type SYSTEM-ITEM with content type ELEMENT_ONLY
class SYSTEM_ITEM (CONFIG_ITEM):
    """Complex type SYSTEM-ITEM with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SYSTEM-ITEM')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3274, 0)
    _ElementMap = CONFIG_ITEM._ElementMap.copy()
    _AttributeMap = CONFIG_ITEM._AttributeMap.copy()
    # Base type is CONFIG_ITEM
    
    # Element BYTE_POSITION (BYTE-POSITION) inherited from CONFIG-ITEM
    
    # Element BIT_POSITION (BIT-POSITION) inherited from CONFIG-ITEM
    
    # Element DATA_OBJECT_PROP_REF (DATA-OBJECT-PROP-REF) inherited from CONFIG-ITEM
    
    # Element DATA_OBJECT_PROP_SNREF (DATA-OBJECT-PROP-SNREF) inherited from CONFIG-ITEM
    
    # Element SDGS (SDGS) inherited from CONFIG-ITEM
    
    # Element SHORT_NAME (SHORT-NAME) inherited from CONFIG-ITEM
    
    # Element LONG_NAME (LONG-NAME) inherited from CONFIG-ITEM
    
    # Element DESC (DESC) inherited from CONFIG-ITEM
    
    # Attribute SEMANTIC inherited from CONFIG-ITEM
    
    # Attribute SYSPARAM uses Python identifier SYSPARAM
    __SYSPARAM = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SYSPARAM'), 'SYSPARAM', '__SYSTEM_ITEM_SYSPARAM', pyxb.binding.datatypes.string, required=True)
    __SYSPARAM._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3278, 0)
    __SYSPARAM._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3278, 0)
    
    SYSPARAM = property(__SYSPARAM.value, __SYSPARAM.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __SYSPARAM.name() : __SYSPARAM
    })
Namespace.addCategoryObject('typeBinding', 'SYSTEM-ITEM', SYSTEM_ITEM)


# Complex type VALIDITY-FOR with content type SIMPLE
class VALIDITY_FOR (pyxb.binding.basis.complexTypeDefinition):
    """Complex type VALIDITY-FOR with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VALIDITY-FOR')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3545, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute TYPE uses Python identifier TYPE
    __TYPE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TYPE'), 'TYPE', '__VALIDITY_FOR_TYPE', SESSION_SUB_ELEM_TYPE, required=True)
    __TYPE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3549, 0)
    __TYPE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3549, 0)
    
    TYPE = property(__TYPE.value, __TYPE.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __TYPE.name() : __TYPE
    })
Namespace.addCategoryObject('typeBinding', 'VALIDITY-FOR', VALIDITY_FOR)


# Complex type VEHICLE-CONNECTOR-PIN with content type ELEMENT_ONLY
class VEHICLE_CONNECTOR_PIN (pyxb.binding.basis.complexTypeDefinition):
    """Complex type VEHICLE-CONNECTOR-PIN with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VEHICLE-CONNECTOR-PIN')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3597, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PIN-NUMBER uses Python identifier PIN_NUMBER
    __PIN_NUMBER = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PIN-NUMBER'), 'PIN_NUMBER', '__VEHICLE_CONNECTOR_PIN_PIN_NUMBER', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3601, 0), )

    
    PIN_NUMBER = property(__PIN_NUMBER.value, __PIN_NUMBER.set, None, None)

    
    # Element SHORT-NAME uses Python identifier SHORT_NAME
    __SHORT_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), 'SHORT_NAME', '__VEHICLE_CONNECTOR_PIN_SHORT_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0), )

    
    SHORT_NAME = property(__SHORT_NAME.value, __SHORT_NAME.set, None, None)

    
    # Element LONG-NAME uses Python identifier LONG_NAME
    __LONG_NAME = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), 'LONG_NAME', '__VEHICLE_CONNECTOR_PIN_LONG_NAME', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0), )

    
    LONG_NAME = property(__LONG_NAME.value, __LONG_NAME.set, None, None)

    
    # Element DESC uses Python identifier DESC
    __DESC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DESC'), 'DESC', '__VEHICLE_CONNECTOR_PIN_DESC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0), )

    
    DESC = property(__DESC.value, __DESC.set, None, None)

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__VEHICLE_CONNECTOR_PIN_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3603, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3603, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID uses Python identifier OID
    __OID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'OID'), 'OID', '__VEHICLE_CONNECTOR_PIN_OID', pyxb.binding.datatypes.string)
    __OID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3604, 0)
    __OID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3604, 0)
    
    OID = property(__OID.value, __OID.set, None, None)

    
    # Attribute TYPE uses Python identifier TYPE
    __TYPE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TYPE'), 'TYPE', '__VEHICLE_CONNECTOR_PIN_TYPE', PIN_TYPE, required=True)
    __TYPE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3605, 0)
    __TYPE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3605, 0)
    
    TYPE = property(__TYPE.value, __TYPE.set, None, None)

    _ElementMap.update({
        __PIN_NUMBER.name() : __PIN_NUMBER,
        __SHORT_NAME.name() : __SHORT_NAME,
        __LONG_NAME.name() : __LONG_NAME,
        __DESC.name() : __DESC
    })
    _AttributeMap.update({
        __ID.name() : __ID,
        __OID.name() : __OID,
        __TYPE.name() : __TYPE
    })
Namespace.addCategoryObject('typeBinding', 'VEHICLE-CONNECTOR-PIN', VEHICLE_CONNECTOR_PIN)


# Complex type VEHICLE-INFO-SPEC with content type ELEMENT_ONLY
class VEHICLE_INFO_SPEC (ODX_CATEGORY):
    """Complex type VEHICLE-INFO-SPEC with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VEHICLE-INFO-SPEC')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3643, 0)
    _ElementMap = ODX_CATEGORY._ElementMap.copy()
    _AttributeMap = ODX_CATEGORY._AttributeMap.copy()
    # Base type is ODX_CATEGORY
    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from ODX-CATEGORY
    
    # Element COMPANY_DATAS (COMPANY-DATAS) inherited from ODX-CATEGORY
    
    # Element SDGS (SDGS) inherited from ODX-CATEGORY
    
    # Element INFO-COMPONENTS uses Python identifier INFO_COMPONENTS
    __INFO_COMPONENTS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'INFO-COMPONENTS'), 'INFO_COMPONENTS', '__VEHICLE_INFO_SPEC_INFO_COMPONENTS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3648, 0), )

    
    INFO_COMPONENTS = property(__INFO_COMPONENTS.value, __INFO_COMPONENTS.set, None, None)

    
    # Element VEHICLE-INFORMATIONS uses Python identifier VEHICLE_INFORMATIONS
    __VEHICLE_INFORMATIONS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VEHICLE-INFORMATIONS'), 'VEHICLE_INFORMATIONS', '__VEHICLE_INFO_SPEC_VEHICLE_INFORMATIONS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3649, 0), )

    
    VEHICLE_INFORMATIONS = property(__VEHICLE_INFORMATIONS.value, __VEHICLE_INFORMATIONS.set, None, None)

    
    # Element SHORT_NAME (SHORT-NAME) inherited from ODX-CATEGORY
    
    # Element LONG_NAME (LONG-NAME) inherited from ODX-CATEGORY
    
    # Element DESC (DESC) inherited from ODX-CATEGORY
    
    # Attribute ID inherited from ODX-CATEGORY
    
    # Attribute OID inherited from ODX-CATEGORY
    _ElementMap.update({
        __INFO_COMPONENTS.name() : __INFO_COMPONENTS,
        __VEHICLE_INFORMATIONS.name() : __VEHICLE_INFORMATIONS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'VEHICLE-INFO-SPEC', VEHICLE_INFO_SPEC)


# Complex type VEHICLE-MODEL with content type ELEMENT_ONLY
class VEHICLE_MODEL (INFO_COMPONENT):
    """Complex type VEHICLE-MODEL with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VEHICLE-MODEL')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3655, 0)
    _ElementMap = INFO_COMPONENT._ElementMap.copy()
    _AttributeMap = INFO_COMPONENT._AttributeMap.copy()
    # Base type is INFO_COMPONENT
    
    # Element MATCHING_COMPONENTS (MATCHING-COMPONENTS) inherited from INFO-COMPONENT
    
    # Element SHORT_NAME (SHORT-NAME) inherited from INFO-COMPONENT
    
    # Element LONG_NAME (LONG-NAME) inherited from INFO-COMPONENT
    
    # Element DESC (DESC) inherited from INFO-COMPONENT
    
    # Attribute ID inherited from INFO-COMPONENT
    
    # Attribute OID inherited from INFO-COMPONENT
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'VEHICLE-MODEL', VEHICLE_MODEL)


# Complex type VEHICLE-TYPE with content type ELEMENT_ONLY
class VEHICLE_TYPE (INFO_COMPONENT):
    """Complex type VEHICLE-TYPE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VEHICLE-TYPE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3661, 0)
    _ElementMap = INFO_COMPONENT._ElementMap.copy()
    _AttributeMap = INFO_COMPONENT._AttributeMap.copy()
    # Base type is INFO_COMPONENT
    
    # Element MATCHING_COMPONENTS (MATCHING-COMPONENTS) inherited from INFO-COMPONENT
    
    # Element SHORT_NAME (SHORT-NAME) inherited from INFO-COMPONENT
    
    # Element LONG_NAME (LONG-NAME) inherited from INFO-COMPONENT
    
    # Element DESC (DESC) inherited from INFO-COMPONENT
    
    # Attribute ID inherited from INFO-COMPONENT
    
    # Attribute OID inherited from INFO-COMPONENT
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'VEHICLE-TYPE', VEHICLE_TYPE)


# Complex type BASE-VARIANT with content type ELEMENT_ONLY
class BASE_VARIANT (HIERARCHY_ELEMENT):
    """Complex type BASE-VARIANT with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BASE-VARIANT')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 112, 0)
    _ElementMap = HIERARCHY_ELEMENT._ElementMap.copy()
    _AttributeMap = HIERARCHY_ELEMENT._AttributeMap.copy()
    # Base type is HIERARCHY_ELEMENT
    
    # Element DIAG-VARIABLES uses Python identifier DIAG_VARIABLES
    __DIAG_VARIABLES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-VARIABLES'), 'DIAG_VARIABLES', '__BASE_VARIANT_DIAG_VARIABLES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 117, 0), )

    
    DIAG_VARIABLES = property(__DIAG_VARIABLES.value, __DIAG_VARIABLES.set, None, None)

    
    # Element VARIABLE-GROUPS uses Python identifier VARIABLE_GROUPS
    __VARIABLE_GROUPS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VARIABLE-GROUPS'), 'VARIABLE_GROUPS', '__BASE_VARIANT_VARIABLE_GROUPS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 118, 0), )

    
    VARIABLE_GROUPS = property(__VARIABLE_GROUPS.value, __VARIABLE_GROUPS.set, None, None)

    
    # Element DYN-DEFINED-SPEC uses Python identifier DYN_DEFINED_SPEC
    __DYN_DEFINED_SPEC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DYN-DEFINED-SPEC'), 'DYN_DEFINED_SPEC', '__BASE_VARIANT_DYN_DEFINED_SPEC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 119, 0), )

    
    DYN_DEFINED_SPEC = property(__DYN_DEFINED_SPEC.value, __DYN_DEFINED_SPEC.set, None, None)

    
    # Element BASE-VARIANTPATTERN uses Python identifier BASE_VARIANTPATTERN
    __BASE_VARIANTPATTERN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BASE-VARIANTPATTERN'), 'BASE_VARIANTPATTERN', '__BASE_VARIANT_BASE_VARIANTPATTERN', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 120, 0), )

    
    BASE_VARIANTPATTERN = property(__BASE_VARIANTPATTERN.value, __BASE_VARIANTPATTERN.set, None, None)

    
    # Element PARENT-REFS uses Python identifier PARENT_REFS
    __PARENT_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PARENT-REFS'), 'PARENT_REFS', '__BASE_VARIANT_PARENT_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 121, 0), )

    
    PARENT_REFS = property(__PARENT_REFS.value, __PARENT_REFS.set, None, None)

    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from DIAG-LAYER
    
    # Element COMPANY_DATAS (COMPANY-DATAS) inherited from DIAG-LAYER
    
    # Element FUNCT_CLASSS (FUNCT-CLASSS) inherited from DIAG-LAYER
    
    # Element DIAG_DATA_DICTIONARY_SPEC (DIAG-DATA-DICTIONARY-SPEC) inherited from DIAG-LAYER
    
    # Element DIAG_COMMS (DIAG-COMMS) inherited from DIAG-LAYER
    
    # Element REQUESTS (REQUESTS) inherited from DIAG-LAYER
    
    # Element POS_RESPONSES (POS-RESPONSES) inherited from DIAG-LAYER
    
    # Element NEG_RESPONSES (NEG-RESPONSES) inherited from DIAG-LAYER
    
    # Element GLOBAL_NEG_RESPONSES (GLOBAL-NEG-RESPONSES) inherited from DIAG-LAYER
    
    # Element IMPORT_REFS (IMPORT-REFS) inherited from DIAG-LAYER
    
    # Element STATE_CHARTS (STATE-CHARTS) inherited from DIAG-LAYER
    
    # Element ADDITIONAL_AUDIENCES (ADDITIONAL-AUDIENCES) inherited from DIAG-LAYER
    
    # Element SUB_COMPONENTS (SUB-COMPONENTS) inherited from DIAG-LAYER
    
    # Element LIBRARYS (LIBRARYS) inherited from DIAG-LAYER
    
    # Element SDGS (SDGS) inherited from DIAG-LAYER
    
    # Element COMPARAM_REFS (COMPARAM-REFS) inherited from HIERARCHY-ELEMENT
    
    # Element SHORT_NAME (SHORT-NAME) inherited from DIAG-LAYER
    
    # Element LONG_NAME (LONG-NAME) inherited from DIAG-LAYER
    
    # Element DESC (DESC) inherited from DIAG-LAYER
    
    # Attribute ID inherited from DIAG-LAYER
    
    # Attribute OID inherited from DIAG-LAYER
    _ElementMap.update({
        __DIAG_VARIABLES.name() : __DIAG_VARIABLES,
        __VARIABLE_GROUPS.name() : __VARIABLE_GROUPS,
        __DYN_DEFINED_SPEC.name() : __DYN_DEFINED_SPEC,
        __BASE_VARIANTPATTERN.name() : __BASE_VARIANTPATTERN,
        __PARENT_REFS.name() : __PARENT_REFS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'BASE-VARIANT', BASE_VARIANT)


# Complex type BASE-VARIANT-REF with content type ELEMENT_ONLY
class BASE_VARIANT_REF (PARENT_REF):
    """Complex type BASE-VARIANT-REF with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BASE-VARIANT-REF')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 133, 0)
    _ElementMap = PARENT_REF._ElementMap.copy()
    _AttributeMap = PARENT_REF._AttributeMap.copy()
    # Base type is PARENT_REF
    
    # Element NOT_INHERITED_DIAG_COMMS (NOT-INHERITED-DIAG-COMMS) inherited from PARENT-REF
    
    # Element NOT_INHERITED_VARIABLES (NOT-INHERITED-VARIABLES) inherited from PARENT-REF
    
    # Element NOT_INHERITED_DOPS (NOT-INHERITED-DOPS) inherited from PARENT-REF
    
    # Element NOT_INHERITED_TABLES (NOT-INHERITED-TABLES) inherited from PARENT-REF
    
    # Element NOT_INHERITED_GLOBAL_NEG_RESPONSES (NOT-INHERITED-GLOBAL-NEG-RESPONSES) inherited from PARENT-REF
    
    # Attribute ID_REF inherited from PARENT-REF
    
    # Attribute DOCREF inherited from PARENT-REF
    
    # Attribute DOCTYPE inherited from PARENT-REF
    
    # Attribute REVISION inherited from PARENT-REF
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'BASE-VARIANT-REF', BASE_VARIANT_REF)


# Complex type BASIC-STRUCTURE with content type ELEMENT_ONLY
class BASIC_STRUCTURE (COMPLEX_DOP):
    """Complex type BASIC-STRUCTURE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BASIC-STRUCTURE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 145, 0)
    _ElementMap = COMPLEX_DOP._ElementMap.copy()
    _AttributeMap = COMPLEX_DOP._AttributeMap.copy()
    # Base type is COMPLEX_DOP
    
    # Element BYTE-SIZE uses Python identifier BYTE_SIZE
    __BYTE_SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BYTE-SIZE'), 'BYTE_SIZE', '__BASIC_STRUCTURE_BYTE_SIZE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 150, 0), )

    
    BYTE_SIZE = property(__BYTE_SIZE.value, __BYTE_SIZE.set, None, None)

    
    # Element PARAMS uses Python identifier PARAMS
    __PARAMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PARAMS'), 'PARAMS', '__BASIC_STRUCTURE_PARAMS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 151, 0), )

    
    PARAMS = property(__PARAMS.value, __PARAMS.set, None, None)

    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from DOP-BASE
    
    # Element SDGS (SDGS) inherited from DOP-BASE
    
    # Element SHORT_NAME (SHORT-NAME) inherited from DOP-BASE
    
    # Element LONG_NAME (LONG-NAME) inherited from DOP-BASE
    
    # Element DESC (DESC) inherited from DOP-BASE
    
    # Attribute ID inherited from DOP-BASE
    
    # Attribute OID inherited from DOP-BASE
    _ElementMap.update({
        __BYTE_SIZE.name() : __BYTE_SIZE,
        __PARAMS.name() : __PARAMS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'BASIC-STRUCTURE', BASIC_STRUCTURE)


# Complex type CODED-CONST with content type ELEMENT_ONLY
class CODED_CONST (POSITIONABLE_PARAM):
    """Complex type CODED-CONST with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CODED-CONST')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 205, 0)
    _ElementMap = POSITIONABLE_PARAM._ElementMap.copy()
    _AttributeMap = POSITIONABLE_PARAM._AttributeMap.copy()
    # Base type is POSITIONABLE_PARAM
    
    # Element CODED-VALUE uses Python identifier CODED_VALUE
    __CODED_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CODED-VALUE'), 'CODED_VALUE', '__CODED_CONST_CODED_VALUE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 210, 0), )

    
    CODED_VALUE = property(__CODED_VALUE.value, __CODED_VALUE.set, None, None)

    
    # Element DIAG-CODED-TYPE uses Python identifier DIAG_CODED_TYPE
    __DIAG_CODED_TYPE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-CODED-TYPE'), 'DIAG_CODED_TYPE', '__CODED_CONST_DIAG_CODED_TYPE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 211, 0), )

    
    DIAG_CODED_TYPE = property(__DIAG_CODED_TYPE.value, __DIAG_CODED_TYPE.set, None, None)

    
    # Element SDGS (SDGS) inherited from PARAM
    
    # Element BYTE_POSITION (BYTE-POSITION) inherited from POSITIONABLE-PARAM
    
    # Element BIT_POSITION (BIT-POSITION) inherited from POSITIONABLE-PARAM
    
    # Element SHORT_NAME (SHORT-NAME) inherited from PARAM
    
    # Element LONG_NAME (LONG-NAME) inherited from PARAM
    
    # Element DESC (DESC) inherited from PARAM
    
    # Attribute OID inherited from PARAM
    
    # Attribute SEMANTIC inherited from PARAM
    _ElementMap.update({
        __CODED_VALUE.name() : __CODED_VALUE,
        __DIAG_CODED_TYPE.name() : __DIAG_CODED_TYPE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CODED-CONST', CODED_CONST)


# Complex type COMPARAM with content type ELEMENT_ONLY
class COMPARAM (BASE_COMPARAM):
    """Complex type COMPARAM with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPARAM')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 311, 0)
    _ElementMap = BASE_COMPARAM._ElementMap.copy()
    _AttributeMap = BASE_COMPARAM._AttributeMap.copy()
    # Base type is BASE_COMPARAM
    
    # Element PHYSICAL-DEFAULT-VALUE uses Python identifier PHYSICAL_DEFAULT_VALUE
    __PHYSICAL_DEFAULT_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PHYSICAL-DEFAULT-VALUE'), 'PHYSICAL_DEFAULT_VALUE', '__COMPARAM_PHYSICAL_DEFAULT_VALUE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 316, 0), )

    
    PHYSICAL_DEFAULT_VALUE = property(__PHYSICAL_DEFAULT_VALUE.value, __PHYSICAL_DEFAULT_VALUE.set, None, None)

    
    # Element DATA-OBJECT-PROP-REF uses Python identifier DATA_OBJECT_PROP_REF
    __DATA_OBJECT_PROP_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-REF'), 'DATA_OBJECT_PROP_REF', '__COMPARAM_DATA_OBJECT_PROP_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 317, 0), )

    
    DATA_OBJECT_PROP_REF = property(__DATA_OBJECT_PROP_REF.value, __DATA_OBJECT_PROP_REF.set, None, None)

    
    # Element SHORT_NAME (SHORT-NAME) inherited from BASE-COMPARAM
    
    # Element LONG_NAME (LONG-NAME) inherited from BASE-COMPARAM
    
    # Element DESC (DESC) inherited from BASE-COMPARAM
    
    # Attribute ID inherited from BASE-COMPARAM
    
    # Attribute OID inherited from BASE-COMPARAM
    
    # Attribute PARAM_CLASS inherited from BASE-COMPARAM
    
    # Attribute CPTYPE inherited from BASE-COMPARAM
    
    # Attribute DISPLAY_LEVEL inherited from BASE-COMPARAM
    
    # Attribute CPUSAGE inherited from BASE-COMPARAM
    _ElementMap.update({
        __PHYSICAL_DEFAULT_VALUE.name() : __PHYSICAL_DEFAULT_VALUE,
        __DATA_OBJECT_PROP_REF.name() : __DATA_OBJECT_PROP_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'COMPARAM', COMPARAM)


# Complex type COMPLEX-COMPARAM with content type ELEMENT_ONLY
class COMPLEX_COMPARAM (BASE_COMPARAM):
    """Complex type COMPLEX-COMPARAM with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'COMPLEX-COMPARAM')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 377, 0)
    _ElementMap = BASE_COMPARAM._ElementMap.copy()
    _AttributeMap = BASE_COMPARAM._AttributeMap.copy()
    # Base type is BASE_COMPARAM
    
    # Element COMPARAM uses Python identifier COMPARAM
    __COMPARAM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPARAM'), 'COMPARAM', '__COMPLEX_COMPARAM_COMPARAM', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 383, 0), )

    
    COMPARAM = property(__COMPARAM.value, __COMPARAM.set, None, None)

    
    # Element COMPLEX-COMPARAM uses Python identifier COMPLEX_COMPARAM
    __COMPLEX_COMPARAM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPLEX-COMPARAM'), 'COMPLEX_COMPARAM', '__COMPLEX_COMPARAM_COMPLEX_COMPARAM', True, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 384, 0), )

    
    COMPLEX_COMPARAM = property(__COMPLEX_COMPARAM.value, __COMPLEX_COMPARAM.set, None, None)

    
    # Element COMPLEXPHYSICAL-DEFAULT-VALUE uses Python identifier COMPLEXPHYSICAL_DEFAULT_VALUE
    __COMPLEXPHYSICAL_DEFAULT_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPLEXPHYSICAL-DEFAULT-VALUE'), 'COMPLEXPHYSICAL_DEFAULT_VALUE', '__COMPLEX_COMPARAM_COMPLEXPHYSICAL_DEFAULT_VALUE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 386, 0), )

    
    COMPLEXPHYSICAL_DEFAULT_VALUE = property(__COMPLEXPHYSICAL_DEFAULT_VALUE.value, __COMPLEXPHYSICAL_DEFAULT_VALUE.set, None, None)

    
    # Element SHORT_NAME (SHORT-NAME) inherited from BASE-COMPARAM
    
    # Element LONG_NAME (LONG-NAME) inherited from BASE-COMPARAM
    
    # Element DESC (DESC) inherited from BASE-COMPARAM
    
    # Attribute ID inherited from BASE-COMPARAM
    
    # Attribute OID inherited from BASE-COMPARAM
    
    # Attribute PARAM_CLASS inherited from BASE-COMPARAM
    
    # Attribute CPTYPE inherited from BASE-COMPARAM
    
    # Attribute DISPLAY_LEVEL inherited from BASE-COMPARAM
    
    # Attribute CPUSAGE inherited from BASE-COMPARAM
    
    # Attribute ALLOW-MULTIPLE-VALUES uses Python identifier ALLOW_MULTIPLE_VALUES
    __ALLOW_MULTIPLE_VALUES = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ALLOW-MULTIPLE-VALUES'), 'ALLOW_MULTIPLE_VALUES', '__COMPLEX_COMPARAM_ALLOW_MULTIPLE_VALUES', pyxb.binding.datatypes.boolean, unicode_default='false')
    __ALLOW_MULTIPLE_VALUES._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 388, 0)
    __ALLOW_MULTIPLE_VALUES._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 388, 0)
    
    ALLOW_MULTIPLE_VALUES = property(__ALLOW_MULTIPLE_VALUES.value, __ALLOW_MULTIPLE_VALUES.set, None, None)

    _ElementMap.update({
        __COMPARAM.name() : __COMPARAM,
        __COMPLEX_COMPARAM.name() : __COMPLEX_COMPARAM,
        __COMPLEXPHYSICAL_DEFAULT_VALUE.name() : __COMPLEXPHYSICAL_DEFAULT_VALUE
    })
    _AttributeMap.update({
        __ALLOW_MULTIPLE_VALUES.name() : __ALLOW_MULTIPLE_VALUES
    })
Namespace.addCategoryObject('typeBinding', 'COMPLEX-COMPARAM', COMPLEX_COMPARAM)


# Complex type DIAG-SERVICE with content type ELEMENT_ONLY
class DIAG_SERVICE (DIAG_COMM):
    """Complex type DIAG-SERVICE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DIAG-SERVICE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 897, 0)
    _ElementMap = DIAG_COMM._ElementMap.copy()
    _AttributeMap = DIAG_COMM._AttributeMap.copy()
    # Base type is DIAG_COMM
    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from DIAG-COMM
    
    # Element SDGS (SDGS) inherited from DIAG-COMM
    
    # Element FUNCT_CLASS_REFS (FUNCT-CLASS-REFS) inherited from DIAG-COMM
    
    # Element AUDIENCE (AUDIENCE) inherited from DIAG-COMM
    
    # Element PROTOCOL_SNREFS (PROTOCOL-SNREFS) inherited from DIAG-COMM
    
    # Element RELATED_DIAG_COMM_REFS (RELATED-DIAG-COMM-REFS) inherited from DIAG-COMM
    
    # Element PRE_CONDITION_STATE_REFS (PRE-CONDITION-STATE-REFS) inherited from DIAG-COMM
    
    # Element STATE_TRANSITION_REFS (STATE-TRANSITION-REFS) inherited from DIAG-COMM
    
    # Element COMPARAM-REFS uses Python identifier COMPARAM_REFS
    __COMPARAM_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPARAM-REFS'), 'COMPARAM_REFS', '__DIAG_SERVICE_COMPARAM_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 902, 0), )

    
    COMPARAM_REFS = property(__COMPARAM_REFS.value, __COMPARAM_REFS.set, None, None)

    
    # Element REQUEST-REF uses Python identifier REQUEST_REF
    __REQUEST_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'REQUEST-REF'), 'REQUEST_REF', '__DIAG_SERVICE_REQUEST_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 903, 0), )

    
    REQUEST_REF = property(__REQUEST_REF.value, __REQUEST_REF.set, None, None)

    
    # Element POS-RESPONSE-REFS uses Python identifier POS_RESPONSE_REFS
    __POS_RESPONSE_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'POS-RESPONSE-REFS'), 'POS_RESPONSE_REFS', '__DIAG_SERVICE_POS_RESPONSE_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 904, 0), )

    
    POS_RESPONSE_REFS = property(__POS_RESPONSE_REFS.value, __POS_RESPONSE_REFS.set, None, None)

    
    # Element NEG-RESPONSE-REFS uses Python identifier NEG_RESPONSE_REFS
    __NEG_RESPONSE_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NEG-RESPONSE-REFS'), 'NEG_RESPONSE_REFS', '__DIAG_SERVICE_NEG_RESPONSE_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 905, 0), )

    
    NEG_RESPONSE_REFS = property(__NEG_RESPONSE_REFS.value, __NEG_RESPONSE_REFS.set, None, None)

    
    # Element POS-RESPONSESUPPRESSABLE uses Python identifier POS_RESPONSESUPPRESSABLE
    __POS_RESPONSESUPPRESSABLE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'POS-RESPONSESUPPRESSABLE'), 'POS_RESPONSESUPPRESSABLE', '__DIAG_SERVICE_POS_RESPONSESUPPRESSABLE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 906, 0), )

    
    POS_RESPONSESUPPRESSABLE = property(__POS_RESPONSESUPPRESSABLE.value, __POS_RESPONSESUPPRESSABLE.set, None, None)

    
    # Element SHORT_NAME (SHORT-NAME) inherited from DIAG-COMM
    
    # Element LONG_NAME (LONG-NAME) inherited from DIAG-COMM
    
    # Element DESC (DESC) inherited from DIAG-COMM
    
    # Attribute ID inherited from DIAG-COMM
    
    # Attribute OID inherited from DIAG-COMM
    
    # Attribute SEMANTIC inherited from DIAG-COMM
    
    # Attribute DIAGNOSTIC_CLASS inherited from DIAG-COMM
    
    # Attribute IS_MANDATORY inherited from DIAG-COMM
    
    # Attribute IS_EXECUTABLE inherited from DIAG-COMM
    
    # Attribute IS_FINAL inherited from DIAG-COMM
    
    # Attribute IS-CYCLIC uses Python identifier IS_CYCLIC
    __IS_CYCLIC = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IS-CYCLIC'), 'IS_CYCLIC', '__DIAG_SERVICE_IS_CYCLIC', pyxb.binding.datatypes.boolean, unicode_default='false')
    __IS_CYCLIC._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 908, 0)
    __IS_CYCLIC._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 908, 0)
    
    IS_CYCLIC = property(__IS_CYCLIC.value, __IS_CYCLIC.set, None, None)

    
    # Attribute IS-MULTIPLE uses Python identifier IS_MULTIPLE
    __IS_MULTIPLE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IS-MULTIPLE'), 'IS_MULTIPLE', '__DIAG_SERVICE_IS_MULTIPLE', pyxb.binding.datatypes.boolean, unicode_default='false')
    __IS_MULTIPLE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 909, 0)
    __IS_MULTIPLE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 909, 0)
    
    IS_MULTIPLE = property(__IS_MULTIPLE.value, __IS_MULTIPLE.set, None, None)

    
    # Attribute ADDRESSING uses Python identifier ADDRESSING
    __ADDRESSING = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ADDRESSING'), 'ADDRESSING', '__DIAG_SERVICE_ADDRESSING', ADDRESSING, unicode_default='PHYSICAL')
    __ADDRESSING._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 910, 0)
    __ADDRESSING._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 910, 0)
    
    ADDRESSING = property(__ADDRESSING.value, __ADDRESSING.set, None, None)

    
    # Attribute TRANSMISSION_MODE uses Python identifier TRANSMISSION_MODE
    __TRANSMISSION_MODE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TRANSMISSION-MODE'), 'TRANSMISSION_MODE', '__DIAG_SERVICE_TRANSMISSION_MODE', TRANS_MODE, unicode_default='SEND-AND-RECEIVE')
    __TRANSMISSION_MODE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 911, 0)
    __TRANSMISSION_MODE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 911, 0)
    
    TRANSMISSION_MODE = property(__TRANSMISSION_MODE.value, __TRANSMISSION_MODE.set, None, None)

    _ElementMap.update({
        __COMPARAM_REFS.name() : __COMPARAM_REFS,
        __REQUEST_REF.name() : __REQUEST_REF,
        __POS_RESPONSE_REFS.name() : __POS_RESPONSE_REFS,
        __NEG_RESPONSE_REFS.name() : __NEG_RESPONSE_REFS,
        __POS_RESPONSESUPPRESSABLE.name() : __POS_RESPONSESUPPRESSABLE
    })
    _AttributeMap.update({
        __IS_CYCLIC.name() : __IS_CYCLIC,
        __IS_MULTIPLE.name() : __IS_MULTIPLE,
        __ADDRESSING.name() : __ADDRESSING,
        __TRANSMISSION_MODE.name() : __TRANSMISSION_MODE
    })
Namespace.addCategoryObject('typeBinding', 'DIAG-SERVICE', DIAG_SERVICE)


# Complex type DYNAMIC with content type ELEMENT_ONLY
class DYNAMIC (POSITIONABLE_PARAM):
    """Complex type DYNAMIC with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DYNAMIC')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1064, 0)
    _ElementMap = POSITIONABLE_PARAM._ElementMap.copy()
    _AttributeMap = POSITIONABLE_PARAM._AttributeMap.copy()
    # Base type is POSITIONABLE_PARAM
    
    # Element SDGS (SDGS) inherited from PARAM
    
    # Element BYTE_POSITION (BYTE-POSITION) inherited from POSITIONABLE-PARAM
    
    # Element BIT_POSITION (BIT-POSITION) inherited from POSITIONABLE-PARAM
    
    # Element SHORT_NAME (SHORT-NAME) inherited from PARAM
    
    # Element LONG_NAME (LONG-NAME) inherited from PARAM
    
    # Element DESC (DESC) inherited from PARAM
    
    # Attribute OID inherited from PARAM
    
    # Attribute SEMANTIC inherited from PARAM
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DYNAMIC', DYNAMIC)


# Complex type ECU-SHARED-DATA-REF with content type ELEMENT_ONLY
class ECU_SHARED_DATA_REF (PARENT_REF):
    """Complex type ECU-SHARED-DATA-REF with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ECU-SHARED-DATA-REF')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1232, 0)
    _ElementMap = PARENT_REF._ElementMap.copy()
    _AttributeMap = PARENT_REF._AttributeMap.copy()
    # Base type is PARENT_REF
    
    # Element NOT_INHERITED_DIAG_COMMS (NOT-INHERITED-DIAG-COMMS) inherited from PARENT-REF
    
    # Element NOT_INHERITED_VARIABLES (NOT-INHERITED-VARIABLES) inherited from PARENT-REF
    
    # Element NOT_INHERITED_DOPS (NOT-INHERITED-DOPS) inherited from PARENT-REF
    
    # Element NOT_INHERITED_TABLES (NOT-INHERITED-TABLES) inherited from PARENT-REF
    
    # Element NOT_INHERITED_GLOBAL_NEG_RESPONSES (NOT-INHERITED-GLOBAL-NEG-RESPONSES) inherited from PARENT-REF
    
    # Attribute ID_REF inherited from PARENT-REF
    
    # Attribute DOCREF inherited from PARENT-REF
    
    # Attribute DOCTYPE inherited from PARENT-REF
    
    # Attribute REVISION inherited from PARENT-REF
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ECU-SHARED-DATA-REF', ECU_SHARED_DATA_REF)


# Complex type ECU-VARIANT with content type ELEMENT_ONLY
class ECU_VARIANT (HIERARCHY_ELEMENT):
    """Complex type ECU-VARIANT with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ECU-VARIANT')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1244, 0)
    _ElementMap = HIERARCHY_ELEMENT._ElementMap.copy()
    _AttributeMap = HIERARCHY_ELEMENT._AttributeMap.copy()
    # Base type is HIERARCHY_ELEMENT
    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from DIAG-LAYER
    
    # Element COMPANY_DATAS (COMPANY-DATAS) inherited from DIAG-LAYER
    
    # Element FUNCT_CLASSS (FUNCT-CLASSS) inherited from DIAG-LAYER
    
    # Element DIAG_DATA_DICTIONARY_SPEC (DIAG-DATA-DICTIONARY-SPEC) inherited from DIAG-LAYER
    
    # Element DIAG_COMMS (DIAG-COMMS) inherited from DIAG-LAYER
    
    # Element REQUESTS (REQUESTS) inherited from DIAG-LAYER
    
    # Element POS_RESPONSES (POS-RESPONSES) inherited from DIAG-LAYER
    
    # Element NEG_RESPONSES (NEG-RESPONSES) inherited from DIAG-LAYER
    
    # Element GLOBAL_NEG_RESPONSES (GLOBAL-NEG-RESPONSES) inherited from DIAG-LAYER
    
    # Element IMPORT_REFS (IMPORT-REFS) inherited from DIAG-LAYER
    
    # Element STATE_CHARTS (STATE-CHARTS) inherited from DIAG-LAYER
    
    # Element ADDITIONAL_AUDIENCES (ADDITIONAL-AUDIENCES) inherited from DIAG-LAYER
    
    # Element SUB_COMPONENTS (SUB-COMPONENTS) inherited from DIAG-LAYER
    
    # Element LIBRARYS (LIBRARYS) inherited from DIAG-LAYER
    
    # Element SDGS (SDGS) inherited from DIAG-LAYER
    
    # Element DIAG-VARIABLES uses Python identifier DIAG_VARIABLES
    __DIAG_VARIABLES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-VARIABLES'), 'DIAG_VARIABLES', '__ECU_VARIANT_DIAG_VARIABLES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1249, 0), )

    
    DIAG_VARIABLES = property(__DIAG_VARIABLES.value, __DIAG_VARIABLES.set, None, None)

    
    # Element VARIABLE-GROUPS uses Python identifier VARIABLE_GROUPS
    __VARIABLE_GROUPS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VARIABLE-GROUPS'), 'VARIABLE_GROUPS', '__ECU_VARIANT_VARIABLE_GROUPS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1250, 0), )

    
    VARIABLE_GROUPS = property(__VARIABLE_GROUPS.value, __VARIABLE_GROUPS.set, None, None)

    
    # Element ECU-VARIANT-PATTERNS uses Python identifier ECU_VARIANT_PATTERNS
    __ECU_VARIANT_PATTERNS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ECU-VARIANT-PATTERNS'), 'ECU_VARIANT_PATTERNS', '__ECU_VARIANT_ECU_VARIANT_PATTERNS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1251, 0), )

    
    ECU_VARIANT_PATTERNS = property(__ECU_VARIANT_PATTERNS.value, __ECU_VARIANT_PATTERNS.set, None, None)

    
    # Element DYN-DEFINED-SPEC uses Python identifier DYN_DEFINED_SPEC
    __DYN_DEFINED_SPEC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DYN-DEFINED-SPEC'), 'DYN_DEFINED_SPEC', '__ECU_VARIANT_DYN_DEFINED_SPEC', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1253, 0), )

    
    DYN_DEFINED_SPEC = property(__DYN_DEFINED_SPEC.value, __DYN_DEFINED_SPEC.set, None, None)

    
    # Element PARENT-REFS uses Python identifier PARENT_REFS
    __PARENT_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PARENT-REFS'), 'PARENT_REFS', '__ECU_VARIANT_PARENT_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1254, 0), )

    
    PARENT_REFS = property(__PARENT_REFS.value, __PARENT_REFS.set, None, None)

    
    # Element COMPARAM_REFS (COMPARAM-REFS) inherited from HIERARCHY-ELEMENT
    
    # Element SHORT_NAME (SHORT-NAME) inherited from DIAG-LAYER
    
    # Element LONG_NAME (LONG-NAME) inherited from DIAG-LAYER
    
    # Element DESC (DESC) inherited from DIAG-LAYER
    
    # Attribute ID inherited from DIAG-LAYER
    
    # Attribute OID inherited from DIAG-LAYER
    _ElementMap.update({
        __DIAG_VARIABLES.name() : __DIAG_VARIABLES,
        __VARIABLE_GROUPS.name() : __VARIABLE_GROUPS,
        __ECU_VARIANT_PATTERNS.name() : __ECU_VARIANT_PATTERNS,
        __DYN_DEFINED_SPEC.name() : __DYN_DEFINED_SPEC,
        __PARENT_REFS.name() : __PARENT_REFS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ECU-VARIANT', ECU_VARIANT)


# Complex type ENV-DATA-DESC with content type ELEMENT_ONLY
class ENV_DATA_DESC (COMPLEX_DOP):
    """Complex type ENV-DATA-DESC with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ENV-DATA-DESC')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1366, 0)
    _ElementMap = COMPLEX_DOP._ElementMap.copy()
    _AttributeMap = COMPLEX_DOP._AttributeMap.copy()
    # Base type is COMPLEX_DOP
    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from DOP-BASE
    
    # Element SDGS (SDGS) inherited from DOP-BASE
    
    # Element PARAM-SNREF uses Python identifier PARAM_SNREF
    __PARAM_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PARAM-SNREF'), 'PARAM_SNREF', '__ENV_DATA_DESC_PARAM_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1372, 0), )

    
    PARAM_SNREF = property(__PARAM_SNREF.value, __PARAM_SNREF.set, None, None)

    
    # Element PARAM-SNPATHREF uses Python identifier PARAM_SNPATHREF
    __PARAM_SNPATHREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PARAM-SNPATHREF'), 'PARAM_SNPATHREF', '__ENV_DATA_DESC_PARAM_SNPATHREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1373, 0), )

    
    PARAM_SNPATHREF = property(__PARAM_SNPATHREF.value, __PARAM_SNPATHREF.set, None, None)

    
    # Element ENV-DATA-REFS uses Python identifier ENV_DATA_REFS
    __ENV_DATA_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ENV-DATA-REFS'), 'ENV_DATA_REFS', '__ENV_DATA_DESC_ENV_DATA_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1375, 0), )

    
    ENV_DATA_REFS = property(__ENV_DATA_REFS.value, __ENV_DATA_REFS.set, None, None)

    
    # Element SHORT_NAME (SHORT-NAME) inherited from DOP-BASE
    
    # Element LONG_NAME (LONG-NAME) inherited from DOP-BASE
    
    # Element DESC (DESC) inherited from DOP-BASE
    
    # Attribute ID inherited from DOP-BASE
    
    # Attribute OID inherited from DOP-BASE
    _ElementMap.update({
        __PARAM_SNREF.name() : __PARAM_SNREF,
        __PARAM_SNPATHREF.name() : __PARAM_SNPATHREF,
        __ENV_DATA_REFS.name() : __ENV_DATA_REFS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ENV-DATA-DESC', ENV_DATA_DESC)


# Complex type FIELD with content type ELEMENT_ONLY
class FIELD (COMPLEX_DOP):
    """Complex type FIELD with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FIELD')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1446, 0)
    _ElementMap = COMPLEX_DOP._ElementMap.copy()
    _AttributeMap = COMPLEX_DOP._AttributeMap.copy()
    # Base type is COMPLEX_DOP
    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from DOP-BASE
    
    # Element SDGS (SDGS) inherited from DOP-BASE
    
    # Element BASIC-STRUCTURE-REF uses Python identifier BASIC_STRUCTURE_REF
    __BASIC_STRUCTURE_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BASIC-STRUCTURE-REF'), 'BASIC_STRUCTURE_REF', '__FIELD_BASIC_STRUCTURE_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1452, 0), )

    
    BASIC_STRUCTURE_REF = property(__BASIC_STRUCTURE_REF.value, __BASIC_STRUCTURE_REF.set, None, None)

    
    # Element BASIC-STRUCTURE-SNREF uses Python identifier BASIC_STRUCTURE_SNREF
    __BASIC_STRUCTURE_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BASIC-STRUCTURE-SNREF'), 'BASIC_STRUCTURE_SNREF', '__FIELD_BASIC_STRUCTURE_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1453, 0), )

    
    BASIC_STRUCTURE_SNREF = property(__BASIC_STRUCTURE_SNREF.value, __BASIC_STRUCTURE_SNREF.set, None, None)

    
    # Element ENV-DATA-DESC-REF uses Python identifier ENV_DATA_DESC_REF
    __ENV_DATA_DESC_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ENV-DATA-DESC-REF'), 'ENV_DATA_DESC_REF', '__FIELD_ENV_DATA_DESC_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1456, 0), )

    
    ENV_DATA_DESC_REF = property(__ENV_DATA_DESC_REF.value, __ENV_DATA_DESC_REF.set, None, None)

    
    # Element ENV-DATA-DESC-SNREF uses Python identifier ENV_DATA_DESC_SNREF
    __ENV_DATA_DESC_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ENV-DATA-DESC-SNREF'), 'ENV_DATA_DESC_SNREF', '__FIELD_ENV_DATA_DESC_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1457, 0), )

    
    ENV_DATA_DESC_SNREF = property(__ENV_DATA_DESC_SNREF.value, __ENV_DATA_DESC_SNREF.set, None, None)

    
    # Element SHORT_NAME (SHORT-NAME) inherited from DOP-BASE
    
    # Element LONG_NAME (LONG-NAME) inherited from DOP-BASE
    
    # Element DESC (DESC) inherited from DOP-BASE
    
    # Attribute ID inherited from DOP-BASE
    
    # Attribute OID inherited from DOP-BASE
    
    # Attribute IS-VISIBLE uses Python identifier IS_VISIBLE
    __IS_VISIBLE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IS-VISIBLE'), 'IS_VISIBLE', '__FIELD_IS_VISIBLE', pyxb.binding.datatypes.boolean, unicode_default='true')
    __IS_VISIBLE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1460, 0)
    __IS_VISIBLE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1460, 0)
    
    IS_VISIBLE = property(__IS_VISIBLE.value, __IS_VISIBLE.set, None, None)

    _ElementMap.update({
        __BASIC_STRUCTURE_REF.name() : __BASIC_STRUCTURE_REF,
        __BASIC_STRUCTURE_SNREF.name() : __BASIC_STRUCTURE_SNREF,
        __ENV_DATA_DESC_REF.name() : __ENV_DATA_DESC_REF,
        __ENV_DATA_DESC_SNREF.name() : __ENV_DATA_DESC_SNREF
    })
    _AttributeMap.update({
        __IS_VISIBLE.name() : __IS_VISIBLE
    })
Namespace.addCategoryObject('typeBinding', 'FIELD', FIELD)


# Complex type FUNCTIONAL-GROUP with content type ELEMENT_ONLY
class FUNCTIONAL_GROUP (HIERARCHY_ELEMENT):
    """Complex type FUNCTIONAL-GROUP with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FUNCTIONAL-GROUP')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1548, 0)
    _ElementMap = HIERARCHY_ELEMENT._ElementMap.copy()
    _AttributeMap = HIERARCHY_ELEMENT._AttributeMap.copy()
    # Base type is HIERARCHY_ELEMENT
    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from DIAG-LAYER
    
    # Element COMPANY_DATAS (COMPANY-DATAS) inherited from DIAG-LAYER
    
    # Element FUNCT_CLASSS (FUNCT-CLASSS) inherited from DIAG-LAYER
    
    # Element DIAG_DATA_DICTIONARY_SPEC (DIAG-DATA-DICTIONARY-SPEC) inherited from DIAG-LAYER
    
    # Element DIAG_COMMS (DIAG-COMMS) inherited from DIAG-LAYER
    
    # Element REQUESTS (REQUESTS) inherited from DIAG-LAYER
    
    # Element POS_RESPONSES (POS-RESPONSES) inherited from DIAG-LAYER
    
    # Element NEG_RESPONSES (NEG-RESPONSES) inherited from DIAG-LAYER
    
    # Element GLOBAL_NEG_RESPONSES (GLOBAL-NEG-RESPONSES) inherited from DIAG-LAYER
    
    # Element IMPORT_REFS (IMPORT-REFS) inherited from DIAG-LAYER
    
    # Element STATE_CHARTS (STATE-CHARTS) inherited from DIAG-LAYER
    
    # Element ADDITIONAL_AUDIENCES (ADDITIONAL-AUDIENCES) inherited from DIAG-LAYER
    
    # Element SUB_COMPONENTS (SUB-COMPONENTS) inherited from DIAG-LAYER
    
    # Element LIBRARYS (LIBRARYS) inherited from DIAG-LAYER
    
    # Element SDGS (SDGS) inherited from DIAG-LAYER
    
    # Element DIAG-VARIABLES uses Python identifier DIAG_VARIABLES
    __DIAG_VARIABLES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-VARIABLES'), 'DIAG_VARIABLES', '__FUNCTIONAL_GROUP_DIAG_VARIABLES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1553, 0), )

    
    DIAG_VARIABLES = property(__DIAG_VARIABLES.value, __DIAG_VARIABLES.set, None, None)

    
    # Element VARIABLE-GROUPS uses Python identifier VARIABLE_GROUPS
    __VARIABLE_GROUPS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VARIABLE-GROUPS'), 'VARIABLE_GROUPS', '__FUNCTIONAL_GROUP_VARIABLE_GROUPS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1554, 0), )

    
    VARIABLE_GROUPS = property(__VARIABLE_GROUPS.value, __VARIABLE_GROUPS.set, None, None)

    
    # Element PARENT-REFS uses Python identifier PARENT_REFS
    __PARENT_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PARENT-REFS'), 'PARENT_REFS', '__FUNCTIONAL_GROUP_PARENT_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1555, 0), )

    
    PARENT_REFS = property(__PARENT_REFS.value, __PARENT_REFS.set, None, None)

    
    # Element COMPARAM_REFS (COMPARAM-REFS) inherited from HIERARCHY-ELEMENT
    
    # Element SHORT_NAME (SHORT-NAME) inherited from DIAG-LAYER
    
    # Element LONG_NAME (LONG-NAME) inherited from DIAG-LAYER
    
    # Element DESC (DESC) inherited from DIAG-LAYER
    
    # Attribute ID inherited from DIAG-LAYER
    
    # Attribute OID inherited from DIAG-LAYER
    _ElementMap.update({
        __DIAG_VARIABLES.name() : __DIAG_VARIABLES,
        __VARIABLE_GROUPS.name() : __VARIABLE_GROUPS,
        __PARENT_REFS.name() : __PARENT_REFS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'FUNCTIONAL-GROUP', FUNCTIONAL_GROUP)


# Complex type FUNCTIONAL-GROUP-REF with content type ELEMENT_ONLY
class FUNCTIONAL_GROUP_REF (PARENT_REF):
    """Complex type FUNCTIONAL-GROUP-REF with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FUNCTIONAL-GROUP-REF')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1560, 0)
    _ElementMap = PARENT_REF._ElementMap.copy()
    _AttributeMap = PARENT_REF._AttributeMap.copy()
    # Base type is PARENT_REF
    
    # Element NOT_INHERITED_DIAG_COMMS (NOT-INHERITED-DIAG-COMMS) inherited from PARENT-REF
    
    # Element NOT_INHERITED_VARIABLES (NOT-INHERITED-VARIABLES) inherited from PARENT-REF
    
    # Element NOT_INHERITED_DOPS (NOT-INHERITED-DOPS) inherited from PARENT-REF
    
    # Element NOT_INHERITED_TABLES (NOT-INHERITED-TABLES) inherited from PARENT-REF
    
    # Element NOT_INHERITED_GLOBAL_NEG_RESPONSES (NOT-INHERITED-GLOBAL-NEG-RESPONSES) inherited from PARENT-REF
    
    # Attribute ID_REF inherited from PARENT-REF
    
    # Attribute DOCREF inherited from PARENT-REF
    
    # Attribute DOCTYPE inherited from PARENT-REF
    
    # Attribute REVISION inherited from PARENT-REF
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'FUNCTIONAL-GROUP-REF', FUNCTIONAL_GROUP_REF)


# Complex type LEADING-LENGTH-INFO-TYPE with content type ELEMENT_ONLY
class LEADING_LENGTH_INFO_TYPE (DIAG_CODED_TYPE):
    """Complex type LEADING-LENGTH-INFO-TYPE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LEADING-LENGTH-INFO-TYPE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1876, 0)
    _ElementMap = DIAG_CODED_TYPE._ElementMap.copy()
    _AttributeMap = DIAG_CODED_TYPE._AttributeMap.copy()
    # Base type is DIAG_CODED_TYPE
    
    # Element BIT-LENGTH uses Python identifier BIT_LENGTH
    __BIT_LENGTH = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BIT-LENGTH'), 'BIT_LENGTH', '__LEADING_LENGTH_INFO_TYPE_BIT_LENGTH', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1881, 0), )

    
    BIT_LENGTH = property(__BIT_LENGTH.value, __BIT_LENGTH.set, None, None)

    
    # Attribute BASE_TYPE_ENCODING inherited from DIAG-CODED-TYPE
    
    # Attribute BASE_DATA_TYPE inherited from DIAG-CODED-TYPE
    
    # Attribute IS_HIGHLOW_BYTE_ORDER inherited from DIAG-CODED-TYPE
    _ElementMap.update({
        __BIT_LENGTH.name() : __BIT_LENGTH
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'LEADING-LENGTH-INFO-TYPE', LEADING_LENGTH_INFO_TYPE)


# Complex type LENGTH-KEY with content type ELEMENT_ONLY
class LENGTH_KEY (POSITIONABLE_PARAM):
    """Complex type LENGTH-KEY with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LENGTH-KEY')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1892, 0)
    _ElementMap = POSITIONABLE_PARAM._ElementMap.copy()
    _AttributeMap = POSITIONABLE_PARAM._AttributeMap.copy()
    # Base type is POSITIONABLE_PARAM
    
    # Element DOP-REF uses Python identifier DOP_REF
    __DOP_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DOP-REF'), 'DOP_REF', '__LENGTH_KEY_DOP_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1897, 0), )

    
    DOP_REF = property(__DOP_REF.value, __DOP_REF.set, None, None)

    
    # Element DOP-SNREF uses Python identifier DOP_SNREF
    __DOP_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DOP-SNREF'), 'DOP_SNREF', '__LENGTH_KEY_DOP_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1898, 0), )

    
    DOP_SNREF = property(__DOP_SNREF.value, __DOP_SNREF.set, None, None)

    
    # Element SDGS (SDGS) inherited from PARAM
    
    # Element BYTE_POSITION (BYTE-POSITION) inherited from POSITIONABLE-PARAM
    
    # Element BIT_POSITION (BIT-POSITION) inherited from POSITIONABLE-PARAM
    
    # Element SHORT_NAME (SHORT-NAME) inherited from PARAM
    
    # Element LONG_NAME (LONG-NAME) inherited from PARAM
    
    # Element DESC (DESC) inherited from PARAM
    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__LENGTH_KEY_ID', pyxb.binding.datatypes.ID, required=True)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1900, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1900, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    
    # Attribute OID inherited from PARAM
    
    # Attribute SEMANTIC inherited from PARAM
    _ElementMap.update({
        __DOP_REF.name() : __DOP_REF,
        __DOP_SNREF.name() : __DOP_SNREF
    })
    _AttributeMap.update({
        __ID.name() : __ID
    })
Namespace.addCategoryObject('typeBinding', 'LENGTH-KEY', LENGTH_KEY)


# Complex type MATCHING-REQUEST-PARAM with content type ELEMENT_ONLY
class MATCHING_REQUEST_PARAM (POSITIONABLE_PARAM):
    """Complex type MATCHING-REQUEST-PARAM with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MATCHING-REQUEST-PARAM')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2054, 0)
    _ElementMap = POSITIONABLE_PARAM._ElementMap.copy()
    _AttributeMap = POSITIONABLE_PARAM._AttributeMap.copy()
    # Base type is POSITIONABLE_PARAM
    
    # Element REQUEST-BYTE-POS uses Python identifier REQUEST_BYTE_POS
    __REQUEST_BYTE_POS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'REQUEST-BYTE-POS'), 'REQUEST_BYTE_POS', '__MATCHING_REQUEST_PARAM_REQUEST_BYTE_POS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2059, 0), )

    
    REQUEST_BYTE_POS = property(__REQUEST_BYTE_POS.value, __REQUEST_BYTE_POS.set, None, None)

    
    # Element BYTE-LENGTH uses Python identifier BYTE_LENGTH
    __BYTE_LENGTH = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BYTE-LENGTH'), 'BYTE_LENGTH', '__MATCHING_REQUEST_PARAM_BYTE_LENGTH', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2060, 0), )

    
    BYTE_LENGTH = property(__BYTE_LENGTH.value, __BYTE_LENGTH.set, None, None)

    
    # Element SDGS (SDGS) inherited from PARAM
    
    # Element BYTE_POSITION (BYTE-POSITION) inherited from POSITIONABLE-PARAM
    
    # Element BIT_POSITION (BIT-POSITION) inherited from POSITIONABLE-PARAM
    
    # Element SHORT_NAME (SHORT-NAME) inherited from PARAM
    
    # Element LONG_NAME (LONG-NAME) inherited from PARAM
    
    # Element DESC (DESC) inherited from PARAM
    
    # Attribute OID inherited from PARAM
    
    # Attribute SEMANTIC inherited from PARAM
    _ElementMap.update({
        __REQUEST_BYTE_POS.name() : __REQUEST_BYTE_POS,
        __BYTE_LENGTH.name() : __BYTE_LENGTH
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'MATCHING-REQUEST-PARAM', MATCHING_REQUEST_PARAM)


# Complex type MIN-MAX-LENGTH-TYPE with content type ELEMENT_ONLY
class MIN_MAX_LENGTH_TYPE (DIAG_CODED_TYPE):
    """Complex type MIN-MAX-LENGTH-TYPE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MIN-MAX-LENGTH-TYPE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2079, 0)
    _ElementMap = DIAG_CODED_TYPE._ElementMap.copy()
    _AttributeMap = DIAG_CODED_TYPE._AttributeMap.copy()
    # Base type is DIAG_CODED_TYPE
    
    # Element MAX-LENGTH uses Python identifier MAX_LENGTH
    __MAX_LENGTH = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MAX-LENGTH'), 'MAX_LENGTH', '__MIN_MAX_LENGTH_TYPE_MAX_LENGTH', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2084, 0), )

    
    MAX_LENGTH = property(__MAX_LENGTH.value, __MAX_LENGTH.set, None, None)

    
    # Element MIN-LENGTH uses Python identifier MIN_LENGTH
    __MIN_LENGTH = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MIN-LENGTH'), 'MIN_LENGTH', '__MIN_MAX_LENGTH_TYPE_MIN_LENGTH', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2085, 0), )

    
    MIN_LENGTH = property(__MIN_LENGTH.value, __MIN_LENGTH.set, None, None)

    
    # Attribute BASE_TYPE_ENCODING inherited from DIAG-CODED-TYPE
    
    # Attribute BASE_DATA_TYPE inherited from DIAG-CODED-TYPE
    
    # Attribute IS_HIGHLOW_BYTE_ORDER inherited from DIAG-CODED-TYPE
    
    # Attribute TERMINATION uses Python identifier TERMINATION
    __TERMINATION = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TERMINATION'), 'TERMINATION', '__MIN_MAX_LENGTH_TYPE_TERMINATION', TERMINATION, required=True)
    __TERMINATION._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2087, 0)
    __TERMINATION._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2087, 0)
    
    TERMINATION = property(__TERMINATION.value, __TERMINATION.set, None, None)

    _ElementMap.update({
        __MAX_LENGTH.name() : __MAX_LENGTH,
        __MIN_LENGTH.name() : __MIN_LENGTH
    })
    _AttributeMap.update({
        __TERMINATION.name() : __TERMINATION
    })
Namespace.addCategoryObject('typeBinding', 'MIN-MAX-LENGTH-TYPE', MIN_MAX_LENGTH_TYPE)


# Complex type MUX with content type ELEMENT_ONLY
class MUX (COMPLEX_DOP):
    """Complex type MUX with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MUX')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2155, 0)
    _ElementMap = COMPLEX_DOP._ElementMap.copy()
    _AttributeMap = COMPLEX_DOP._AttributeMap.copy()
    # Base type is COMPLEX_DOP
    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from DOP-BASE
    
    # Element SDGS (SDGS) inherited from DOP-BASE
    
    # Element BYTE-POSITION uses Python identifier BYTE_POSITION
    __BYTE_POSITION = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION'), 'BYTE_POSITION', '__MUX_BYTE_POSITION', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2160, 0), )

    
    BYTE_POSITION = property(__BYTE_POSITION.value, __BYTE_POSITION.set, None, None)

    
    # Element SWITCH-KEY uses Python identifier SWITCH_KEY
    __SWITCH_KEY = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SWITCH-KEY'), 'SWITCH_KEY', '__MUX_SWITCH_KEY', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2161, 0), )

    
    SWITCH_KEY = property(__SWITCH_KEY.value, __SWITCH_KEY.set, None, None)

    
    # Element DEFAULT-CASE uses Python identifier DEFAULT_CASE
    __DEFAULT_CASE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DEFAULT-CASE'), 'DEFAULT_CASE', '__MUX_DEFAULT_CASE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2162, 0), )

    
    DEFAULT_CASE = property(__DEFAULT_CASE.value, __DEFAULT_CASE.set, None, None)

    
    # Element CASES uses Python identifier CASES
    __CASES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CASES'), 'CASES', '__MUX_CASES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2163, 0), )

    
    CASES = property(__CASES.value, __CASES.set, None, None)

    
    # Element SHORT_NAME (SHORT-NAME) inherited from DOP-BASE
    
    # Element LONG_NAME (LONG-NAME) inherited from DOP-BASE
    
    # Element DESC (DESC) inherited from DOP-BASE
    
    # Attribute ID inherited from DOP-BASE
    
    # Attribute OID inherited from DOP-BASE
    
    # Attribute IS-VISIBLE uses Python identifier IS_VISIBLE
    __IS_VISIBLE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IS-VISIBLE'), 'IS_VISIBLE', '__MUX_IS_VISIBLE', pyxb.binding.datatypes.boolean, unicode_default='false')
    __IS_VISIBLE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2165, 0)
    __IS_VISIBLE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2165, 0)
    
    IS_VISIBLE = property(__IS_VISIBLE.value, __IS_VISIBLE.set, None, None)

    _ElementMap.update({
        __BYTE_POSITION.name() : __BYTE_POSITION,
        __SWITCH_KEY.name() : __SWITCH_KEY,
        __DEFAULT_CASE.name() : __DEFAULT_CASE,
        __CASES.name() : __CASES
    })
    _AttributeMap.update({
        __IS_VISIBLE.name() : __IS_VISIBLE
    })
Namespace.addCategoryObject('typeBinding', 'MUX', MUX)


# Complex type NRC-CONST with content type ELEMENT_ONLY
class NRC_CONST (POSITIONABLE_PARAM):
    """Complex type NRC-CONST with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NRC-CONST')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2282, 0)
    _ElementMap = POSITIONABLE_PARAM._ElementMap.copy()
    _AttributeMap = POSITIONABLE_PARAM._AttributeMap.copy()
    # Base type is POSITIONABLE_PARAM
    
    # Element CODED-VALUES uses Python identifier CODED_VALUES
    __CODED_VALUES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CODED-VALUES'), 'CODED_VALUES', '__NRC_CONST_CODED_VALUES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2287, 0), )

    
    CODED_VALUES = property(__CODED_VALUES.value, __CODED_VALUES.set, None, None)

    
    # Element DIAG-CODED-TYPE uses Python identifier DIAG_CODED_TYPE
    __DIAG_CODED_TYPE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DIAG-CODED-TYPE'), 'DIAG_CODED_TYPE', '__NRC_CONST_DIAG_CODED_TYPE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2288, 0), )

    
    DIAG_CODED_TYPE = property(__DIAG_CODED_TYPE.value, __DIAG_CODED_TYPE.set, None, None)

    
    # Element SDGS (SDGS) inherited from PARAM
    
    # Element BYTE_POSITION (BYTE-POSITION) inherited from POSITIONABLE-PARAM
    
    # Element BIT_POSITION (BIT-POSITION) inherited from POSITIONABLE-PARAM
    
    # Element SHORT_NAME (SHORT-NAME) inherited from PARAM
    
    # Element LONG_NAME (LONG-NAME) inherited from PARAM
    
    # Element DESC (DESC) inherited from PARAM
    
    # Attribute OID inherited from PARAM
    
    # Attribute SEMANTIC inherited from PARAM
    _ElementMap.update({
        __CODED_VALUES.name() : __CODED_VALUES,
        __DIAG_CODED_TYPE.name() : __DIAG_CODED_TYPE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'NRC-CONST', NRC_CONST)


# Complex type PARAM-LENGTH-INFO-TYPE with content type ELEMENT_ONLY
class PARAM_LENGTH_INFO_TYPE (DIAG_CODED_TYPE):
    """Complex type PARAM-LENGTH-INFO-TYPE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PARAM-LENGTH-INFO-TYPE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2393, 0)
    _ElementMap = DIAG_CODED_TYPE._ElementMap.copy()
    _AttributeMap = DIAG_CODED_TYPE._AttributeMap.copy()
    # Base type is DIAG_CODED_TYPE
    
    # Element LENGTH-KEY-REF uses Python identifier LENGTH_KEY_REF
    __LENGTH_KEY_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LENGTH-KEY-REF'), 'LENGTH_KEY_REF', '__PARAM_LENGTH_INFO_TYPE_LENGTH_KEY_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2398, 0), )

    
    LENGTH_KEY_REF = property(__LENGTH_KEY_REF.value, __LENGTH_KEY_REF.set, None, None)

    
    # Attribute BASE_TYPE_ENCODING inherited from DIAG-CODED-TYPE
    
    # Attribute BASE_DATA_TYPE inherited from DIAG-CODED-TYPE
    
    # Attribute IS_HIGHLOW_BYTE_ORDER inherited from DIAG-CODED-TYPE
    _ElementMap.update({
        __LENGTH_KEY_REF.name() : __LENGTH_KEY_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'PARAM-LENGTH-INFO-TYPE', PARAM_LENGTH_INFO_TYPE)


# Complex type PHYS-CONST with content type ELEMENT_ONLY
class PHYS_CONST (POSITIONABLE_PARAM):
    """Complex type PHYS-CONST with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PHYS-CONST')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2427, 0)
    _ElementMap = POSITIONABLE_PARAM._ElementMap.copy()
    _AttributeMap = POSITIONABLE_PARAM._AttributeMap.copy()
    # Base type is POSITIONABLE_PARAM
    
    # Element SDGS (SDGS) inherited from PARAM
    
    # Element PHYS-CONSTANT-VALUE uses Python identifier PHYS_CONSTANT_VALUE
    __PHYS_CONSTANT_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PHYS-CONSTANT-VALUE'), 'PHYS_CONSTANT_VALUE', '__PHYS_CONST_PHYS_CONSTANT_VALUE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2432, 0), )

    
    PHYS_CONSTANT_VALUE = property(__PHYS_CONSTANT_VALUE.value, __PHYS_CONSTANT_VALUE.set, None, None)

    
    # Element DOP-REF uses Python identifier DOP_REF
    __DOP_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DOP-REF'), 'DOP_REF', '__PHYS_CONST_DOP_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2434, 0), )

    
    DOP_REF = property(__DOP_REF.value, __DOP_REF.set, None, None)

    
    # Element DOP-SNREF uses Python identifier DOP_SNREF
    __DOP_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DOP-SNREF'), 'DOP_SNREF', '__PHYS_CONST_DOP_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2435, 0), )

    
    DOP_SNREF = property(__DOP_SNREF.value, __DOP_SNREF.set, None, None)

    
    # Element BYTE_POSITION (BYTE-POSITION) inherited from POSITIONABLE-PARAM
    
    # Element BIT_POSITION (BIT-POSITION) inherited from POSITIONABLE-PARAM
    
    # Element SHORT_NAME (SHORT-NAME) inherited from PARAM
    
    # Element LONG_NAME (LONG-NAME) inherited from PARAM
    
    # Element DESC (DESC) inherited from PARAM
    
    # Attribute OID inherited from PARAM
    
    # Attribute SEMANTIC inherited from PARAM
    _ElementMap.update({
        __PHYS_CONSTANT_VALUE.name() : __PHYS_CONSTANT_VALUE,
        __DOP_REF.name() : __DOP_REF,
        __DOP_SNREF.name() : __DOP_SNREF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'PHYS-CONST', PHYS_CONST)


# Complex type PROTOCOL with content type ELEMENT_ONLY
class PROTOCOL (HIERARCHY_ELEMENT):
    """Complex type PROTOCOL with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PROTOCOL')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2640, 0)
    _ElementMap = HIERARCHY_ELEMENT._ElementMap.copy()
    _AttributeMap = HIERARCHY_ELEMENT._AttributeMap.copy()
    # Base type is HIERARCHY_ELEMENT
    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from DIAG-LAYER
    
    # Element COMPANY_DATAS (COMPANY-DATAS) inherited from DIAG-LAYER
    
    # Element FUNCT_CLASSS (FUNCT-CLASSS) inherited from DIAG-LAYER
    
    # Element DIAG_DATA_DICTIONARY_SPEC (DIAG-DATA-DICTIONARY-SPEC) inherited from DIAG-LAYER
    
    # Element DIAG_COMMS (DIAG-COMMS) inherited from DIAG-LAYER
    
    # Element REQUESTS (REQUESTS) inherited from DIAG-LAYER
    
    # Element POS_RESPONSES (POS-RESPONSES) inherited from DIAG-LAYER
    
    # Element NEG_RESPONSES (NEG-RESPONSES) inherited from DIAG-LAYER
    
    # Element GLOBAL_NEG_RESPONSES (GLOBAL-NEG-RESPONSES) inherited from DIAG-LAYER
    
    # Element IMPORT_REFS (IMPORT-REFS) inherited from DIAG-LAYER
    
    # Element STATE_CHARTS (STATE-CHARTS) inherited from DIAG-LAYER
    
    # Element ADDITIONAL_AUDIENCES (ADDITIONAL-AUDIENCES) inherited from DIAG-LAYER
    
    # Element SUB_COMPONENTS (SUB-COMPONENTS) inherited from DIAG-LAYER
    
    # Element LIBRARYS (LIBRARYS) inherited from DIAG-LAYER
    
    # Element SDGS (SDGS) inherited from DIAG-LAYER
    
    # Element COMPARAM_REFS (COMPARAM-REFS) inherited from HIERARCHY-ELEMENT
    
    # Element COMPARAM-SPEC-REF uses Python identifier COMPARAM_SPEC_REF
    __COMPARAM_SPEC_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'COMPARAM-SPEC-REF'), 'COMPARAM_SPEC_REF', '__PROTOCOL_COMPARAM_SPEC_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2645, 0), )

    
    COMPARAM_SPEC_REF = property(__COMPARAM_SPEC_REF.value, __COMPARAM_SPEC_REF.set, None, None)

    
    # Element PROT-STACK-SNREF uses Python identifier PROT_STACK_SNREF
    __PROT_STACK_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PROT-STACK-SNREF'), 'PROT_STACK_SNREF', '__PROTOCOL_PROT_STACK_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2646, 0), )

    
    PROT_STACK_SNREF = property(__PROT_STACK_SNREF.value, __PROT_STACK_SNREF.set, None, None)

    
    # Element PARENT-REFS uses Python identifier PARENT_REFS
    __PARENT_REFS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PARENT-REFS'), 'PARENT_REFS', '__PROTOCOL_PARENT_REFS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2647, 0), )

    
    PARENT_REFS = property(__PARENT_REFS.value, __PARENT_REFS.set, None, None)

    
    # Element SHORT_NAME (SHORT-NAME) inherited from DIAG-LAYER
    
    # Element LONG_NAME (LONG-NAME) inherited from DIAG-LAYER
    
    # Element DESC (DESC) inherited from DIAG-LAYER
    
    # Attribute ID inherited from DIAG-LAYER
    
    # Attribute OID inherited from DIAG-LAYER
    _ElementMap.update({
        __COMPARAM_SPEC_REF.name() : __COMPARAM_SPEC_REF,
        __PROT_STACK_SNREF.name() : __PROT_STACK_SNREF,
        __PARENT_REFS.name() : __PARENT_REFS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'PROTOCOL', PROTOCOL)


# Complex type PROTOCOL-REF with content type ELEMENT_ONLY
class PROTOCOL_REF (PARENT_REF):
    """Complex type PROTOCOL-REF with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PROTOCOL-REF')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2652, 0)
    _ElementMap = PARENT_REF._ElementMap.copy()
    _AttributeMap = PARENT_REF._AttributeMap.copy()
    # Base type is PARENT_REF
    
    # Element NOT_INHERITED_DIAG_COMMS (NOT-INHERITED-DIAG-COMMS) inherited from PARENT-REF
    
    # Element NOT_INHERITED_VARIABLES (NOT-INHERITED-VARIABLES) inherited from PARENT-REF
    
    # Element NOT_INHERITED_DOPS (NOT-INHERITED-DOPS) inherited from PARENT-REF
    
    # Element NOT_INHERITED_TABLES (NOT-INHERITED-TABLES) inherited from PARENT-REF
    
    # Element NOT_INHERITED_GLOBAL_NEG_RESPONSES (NOT-INHERITED-GLOBAL-NEG-RESPONSES) inherited from PARENT-REF
    
    # Attribute ID_REF inherited from PARENT-REF
    
    # Attribute DOCREF inherited from PARENT-REF
    
    # Attribute DOCTYPE inherited from PARENT-REF
    
    # Attribute REVISION inherited from PARENT-REF
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'PROTOCOL-REF', PROTOCOL_REF)


# Complex type RESERVED with content type ELEMENT_ONLY
class RESERVED (POSITIONABLE_PARAM):
    """Complex type RESERVED with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RESERVED')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2769, 0)
    _ElementMap = POSITIONABLE_PARAM._ElementMap.copy()
    _AttributeMap = POSITIONABLE_PARAM._AttributeMap.copy()
    # Base type is POSITIONABLE_PARAM
    
    # Element SDGS (SDGS) inherited from PARAM
    
    # Element BYTE_POSITION (BYTE-POSITION) inherited from POSITIONABLE-PARAM
    
    # Element BIT_POSITION (BIT-POSITION) inherited from POSITIONABLE-PARAM
    
    # Element BIT-LENGTH uses Python identifier BIT_LENGTH
    __BIT_LENGTH = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BIT-LENGTH'), 'BIT_LENGTH', '__RESERVED_BIT_LENGTH', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2774, 0), )

    
    BIT_LENGTH = property(__BIT_LENGTH.value, __BIT_LENGTH.set, None, None)

    
    # Element SHORT_NAME (SHORT-NAME) inherited from PARAM
    
    # Element LONG_NAME (LONG-NAME) inherited from PARAM
    
    # Element DESC (DESC) inherited from PARAM
    
    # Attribute OID inherited from PARAM
    
    # Attribute SEMANTIC inherited from PARAM
    _ElementMap.update({
        __BIT_LENGTH.name() : __BIT_LENGTH
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'RESERVED', RESERVED)


# Complex type SINGLE-ECU-JOB with content type ELEMENT_ONLY
class SINGLE_ECU_JOB (DIAG_COMM):
    """Complex type SINGLE-ECU-JOB with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SINGLE-ECU-JOB')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2970, 0)
    _ElementMap = DIAG_COMM._ElementMap.copy()
    _AttributeMap = DIAG_COMM._AttributeMap.copy()
    # Base type is DIAG_COMM
    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from DIAG-COMM
    
    # Element SDGS (SDGS) inherited from DIAG-COMM
    
    # Element FUNCT_CLASS_REFS (FUNCT-CLASS-REFS) inherited from DIAG-COMM
    
    # Element AUDIENCE (AUDIENCE) inherited from DIAG-COMM
    
    # Element PROTOCOL_SNREFS (PROTOCOL-SNREFS) inherited from DIAG-COMM
    
    # Element RELATED_DIAG_COMM_REFS (RELATED-DIAG-COMM-REFS) inherited from DIAG-COMM
    
    # Element PRE_CONDITION_STATE_REFS (PRE-CONDITION-STATE-REFS) inherited from DIAG-COMM
    
    # Element STATE_TRANSITION_REFS (STATE-TRANSITION-REFS) inherited from DIAG-COMM
    
    # Element PROG-CODES uses Python identifier PROG_CODES
    __PROG_CODES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PROG-CODES'), 'PROG_CODES', '__SINGLE_ECU_JOB_PROG_CODES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2975, 0), )

    
    PROG_CODES = property(__PROG_CODES.value, __PROG_CODES.set, None, None)

    
    # Element INPUT-PARAMS uses Python identifier INPUT_PARAMS
    __INPUT_PARAMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'INPUT-PARAMS'), 'INPUT_PARAMS', '__SINGLE_ECU_JOB_INPUT_PARAMS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2976, 0), )

    
    INPUT_PARAMS = property(__INPUT_PARAMS.value, __INPUT_PARAMS.set, None, None)

    
    # Element OUTPUT-PARAMS uses Python identifier OUTPUT_PARAMS
    __OUTPUT_PARAMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OUTPUT-PARAMS'), 'OUTPUT_PARAMS', '__SINGLE_ECU_JOB_OUTPUT_PARAMS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2977, 0), )

    
    OUTPUT_PARAMS = property(__OUTPUT_PARAMS.value, __OUTPUT_PARAMS.set, None, None)

    
    # Element NEG-OUTPUT-PARAMS uses Python identifier NEG_OUTPUT_PARAMS
    __NEG_OUTPUT_PARAMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NEG-OUTPUT-PARAMS'), 'NEG_OUTPUT_PARAMS', '__SINGLE_ECU_JOB_NEG_OUTPUT_PARAMS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2978, 0), )

    
    NEG_OUTPUT_PARAMS = property(__NEG_OUTPUT_PARAMS.value, __NEG_OUTPUT_PARAMS.set, None, None)

    
    # Element SHORT_NAME (SHORT-NAME) inherited from DIAG-COMM
    
    # Element LONG_NAME (LONG-NAME) inherited from DIAG-COMM
    
    # Element DESC (DESC) inherited from DIAG-COMM
    
    # Attribute ID inherited from DIAG-COMM
    
    # Attribute OID inherited from DIAG-COMM
    
    # Attribute SEMANTIC inherited from DIAG-COMM
    
    # Attribute DIAGNOSTIC_CLASS inherited from DIAG-COMM
    
    # Attribute IS_MANDATORY inherited from DIAG-COMM
    
    # Attribute IS_EXECUTABLE inherited from DIAG-COMM
    
    # Attribute IS_FINAL inherited from DIAG-COMM
    _ElementMap.update({
        __PROG_CODES.name() : __PROG_CODES,
        __INPUT_PARAMS.name() : __INPUT_PARAMS,
        __OUTPUT_PARAMS.name() : __OUTPUT_PARAMS,
        __NEG_OUTPUT_PARAMS.name() : __NEG_OUTPUT_PARAMS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SINGLE-ECU-JOB', SINGLE_ECU_JOB)


# Complex type STANDARD-LENGTH-TYPE with content type ELEMENT_ONLY
class STANDARD_LENGTH_TYPE (DIAG_CODED_TYPE):
    """Complex type STANDARD-LENGTH-TYPE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'STANDARD-LENGTH-TYPE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3057, 0)
    _ElementMap = DIAG_CODED_TYPE._ElementMap.copy()
    _AttributeMap = DIAG_CODED_TYPE._AttributeMap.copy()
    # Base type is DIAG_CODED_TYPE
    
    # Element BIT-LENGTH uses Python identifier BIT_LENGTH
    __BIT_LENGTH = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BIT-LENGTH'), 'BIT_LENGTH', '__STANDARD_LENGTH_TYPE_BIT_LENGTH', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3062, 0), )

    
    BIT_LENGTH = property(__BIT_LENGTH.value, __BIT_LENGTH.set, None, None)

    
    # Element BIT-MASK uses Python identifier BIT_MASK
    __BIT_MASK = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BIT-MASK'), 'BIT_MASK', '__STANDARD_LENGTH_TYPE_BIT_MASK', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3069, 0), )

    
    BIT_MASK = property(__BIT_MASK.value, __BIT_MASK.set, None, None)

    
    # Attribute BASE_TYPE_ENCODING inherited from DIAG-CODED-TYPE
    
    # Attribute BASE_DATA_TYPE inherited from DIAG-CODED-TYPE
    
    # Attribute IS_HIGHLOW_BYTE_ORDER inherited from DIAG-CODED-TYPE
    
    # Attribute CONDENSED uses Python identifier CONDENSED
    __CONDENSED = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CONDENSED'), 'CONDENSED', '__STANDARD_LENGTH_TYPE_CONDENSED', pyxb.binding.datatypes.boolean, unicode_default='false')
    __CONDENSED._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3071, 0)
    __CONDENSED._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3071, 0)
    
    CONDENSED = property(__CONDENSED.value, __CONDENSED.set, None, None)

    _ElementMap.update({
        __BIT_LENGTH.name() : __BIT_LENGTH,
        __BIT_MASK.name() : __BIT_MASK
    })
    _AttributeMap.update({
        __CONDENSED.name() : __CONDENSED
    })
Namespace.addCategoryObject('typeBinding', 'STANDARD-LENGTH-TYPE', STANDARD_LENGTH_TYPE)


# Complex type SYSTEM with content type ELEMENT_ONLY
class SYSTEM (POSITIONABLE_PARAM):
    """Complex type SYSTEM with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SYSTEM')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3262, 0)
    _ElementMap = POSITIONABLE_PARAM._ElementMap.copy()
    _AttributeMap = POSITIONABLE_PARAM._AttributeMap.copy()
    # Base type is POSITIONABLE_PARAM
    
    # Element SDGS (SDGS) inherited from PARAM
    
    # Element BYTE_POSITION (BYTE-POSITION) inherited from POSITIONABLE-PARAM
    
    # Element BIT_POSITION (BIT-POSITION) inherited from POSITIONABLE-PARAM
    
    # Element DOP-REF uses Python identifier DOP_REF
    __DOP_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DOP-REF'), 'DOP_REF', '__SYSTEM_DOP_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3267, 0), )

    
    DOP_REF = property(__DOP_REF.value, __DOP_REF.set, None, None)

    
    # Element DOP-SNREF uses Python identifier DOP_SNREF
    __DOP_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DOP-SNREF'), 'DOP_SNREF', '__SYSTEM_DOP_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3268, 0), )

    
    DOP_SNREF = property(__DOP_SNREF.value, __DOP_SNREF.set, None, None)

    
    # Element SHORT_NAME (SHORT-NAME) inherited from PARAM
    
    # Element LONG_NAME (LONG-NAME) inherited from PARAM
    
    # Element DESC (DESC) inherited from PARAM
    
    # Attribute OID inherited from PARAM
    
    # Attribute SEMANTIC inherited from PARAM
    
    # Attribute SYSPARAM uses Python identifier SYSPARAM
    __SYSPARAM = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SYSPARAM'), 'SYSPARAM', '__SYSTEM_SYSPARAM', pyxb.binding.datatypes.string, required=True)
    __SYSPARAM._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3270, 0)
    __SYSPARAM._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3270, 0)
    
    SYSPARAM = property(__SYSPARAM.value, __SYSPARAM.set, None, None)

    _ElementMap.update({
        __DOP_REF.name() : __DOP_REF,
        __DOP_SNREF.name() : __DOP_SNREF
    })
    _AttributeMap.update({
        __SYSPARAM.name() : __SYSPARAM
    })
Namespace.addCategoryObject('typeBinding', 'SYSTEM', SYSTEM)


# Complex type TABLE-ENTRY with content type ELEMENT_ONLY
class TABLE_ENTRY (POSITIONABLE_PARAM):
    """Complex type TABLE-ENTRY with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TABLE-ENTRY')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3321, 0)
    _ElementMap = POSITIONABLE_PARAM._ElementMap.copy()
    _AttributeMap = POSITIONABLE_PARAM._AttributeMap.copy()
    # Base type is POSITIONABLE_PARAM
    
    # Element SDGS (SDGS) inherited from PARAM
    
    # Element BYTE_POSITION (BYTE-POSITION) inherited from POSITIONABLE-PARAM
    
    # Element BIT_POSITION (BIT-POSITION) inherited from POSITIONABLE-PARAM
    
    # Element TARGET uses Python identifier TARGET
    __TARGET = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TARGET'), 'TARGET', '__TABLE_ENTRY_TARGET', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3326, 0), )

    
    TARGET = property(__TARGET.value, __TARGET.set, None, None)

    
    # Element TABLE-ROW-REF uses Python identifier TABLE_ROW_REF
    __TABLE_ROW_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TABLE-ROW-REF'), 'TABLE_ROW_REF', '__TABLE_ENTRY_TABLE_ROW_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3327, 0), )

    
    TABLE_ROW_REF = property(__TABLE_ROW_REF.value, __TABLE_ROW_REF.set, None, None)

    
    # Element SHORT_NAME (SHORT-NAME) inherited from PARAM
    
    # Element LONG_NAME (LONG-NAME) inherited from PARAM
    
    # Element DESC (DESC) inherited from PARAM
    
    # Attribute OID inherited from PARAM
    
    # Attribute SEMANTIC inherited from PARAM
    _ElementMap.update({
        __TARGET.name() : __TARGET,
        __TABLE_ROW_REF.name() : __TABLE_ROW_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'TABLE-ENTRY', TABLE_ENTRY)


# Complex type TABLE-KEY with content type ELEMENT_ONLY
class TABLE_KEY (POSITIONABLE_PARAM):
    """Complex type TABLE-KEY with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TABLE-KEY')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3332, 0)
    _ElementMap = POSITIONABLE_PARAM._ElementMap.copy()
    _AttributeMap = POSITIONABLE_PARAM._AttributeMap.copy()
    # Base type is POSITIONABLE_PARAM
    
    # Element SDGS (SDGS) inherited from PARAM
    
    # Element BYTE_POSITION (BYTE-POSITION) inherited from POSITIONABLE-PARAM
    
    # Element BIT_POSITION (BIT-POSITION) inherited from POSITIONABLE-PARAM
    
    # Element TABLE-ROW-REF uses Python identifier TABLE_ROW_REF
    __TABLE_ROW_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TABLE-ROW-REF'), 'TABLE_ROW_REF', '__TABLE_KEY_TABLE_ROW_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3339, 0), )

    
    TABLE_ROW_REF = property(__TABLE_ROW_REF.value, __TABLE_ROW_REF.set, None, None)

    
    # Element SHORT_NAME (SHORT-NAME) inherited from PARAM
    
    # Element LONG_NAME (LONG-NAME) inherited from PARAM
    
    # Element DESC (DESC) inherited from PARAM
    
    # Element TABLE-REF uses Python identifier TABLE_REF
    __TABLE_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TABLE-REF'), 'TABLE_REF', '__TABLE_KEY_TABLE_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3754, 0), )

    
    TABLE_REF = property(__TABLE_REF.value, __TABLE_REF.set, None, None)

    
    # Element TABLE-ROW-SNREF uses Python identifier TABLE_ROW_SNREF
    __TABLE_ROW_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TABLE-ROW-SNREF'), 'TABLE_ROW_SNREF', '__TABLE_KEY_TABLE_ROW_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3755, 0), )

    
    TABLE_ROW_SNREF = property(__TABLE_ROW_SNREF.value, __TABLE_ROW_SNREF.set, None, None)

    
    # Element TABLE-SNREF uses Python identifier TABLE_SNREF
    __TABLE_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TABLE-SNREF'), 'TABLE_SNREF', '__TABLE_KEY_TABLE_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3766, 0), )

    
    TABLE_SNREF = property(__TABLE_SNREF.value, __TABLE_SNREF.set, None, None)

    
    # Attribute OID inherited from PARAM
    
    # Attribute SEMANTIC inherited from PARAM
    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ID'), 'ID', '__TABLE_KEY_ID', pyxb.binding.datatypes.ID)
    __ID._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3341, 0)
    __ID._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3341, 0)
    
    ID = property(__ID.value, __ID.set, None, None)

    _ElementMap.update({
        __TABLE_ROW_REF.name() : __TABLE_ROW_REF,
        __TABLE_REF.name() : __TABLE_REF,
        __TABLE_ROW_SNREF.name() : __TABLE_ROW_SNREF,
        __TABLE_SNREF.name() : __TABLE_SNREF
    })
    _AttributeMap.update({
        __ID.name() : __ID
    })
Namespace.addCategoryObject('typeBinding', 'TABLE-KEY', TABLE_KEY)


# Complex type TABLE-STRUCT with content type ELEMENT_ONLY
class TABLE_STRUCT (POSITIONABLE_PARAM):
    """Complex type TABLE-STRUCT with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TABLE-STRUCT')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3395, 0)
    _ElementMap = POSITIONABLE_PARAM._ElementMap.copy()
    _AttributeMap = POSITIONABLE_PARAM._AttributeMap.copy()
    # Base type is POSITIONABLE_PARAM
    
    # Element SDGS (SDGS) inherited from PARAM
    
    # Element BYTE_POSITION (BYTE-POSITION) inherited from POSITIONABLE-PARAM
    
    # Element BIT_POSITION (BIT-POSITION) inherited from POSITIONABLE-PARAM
    
    # Element TABLE-KEY-REF uses Python identifier TABLE_KEY_REF
    __TABLE_KEY_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TABLE-KEY-REF'), 'TABLE_KEY_REF', '__TABLE_STRUCT_TABLE_KEY_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3400, 0), )

    
    TABLE_KEY_REF = property(__TABLE_KEY_REF.value, __TABLE_KEY_REF.set, None, None)

    
    # Element TABLE-KEY-SNREF uses Python identifier TABLE_KEY_SNREF
    __TABLE_KEY_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TABLE-KEY-SNREF'), 'TABLE_KEY_SNREF', '__TABLE_STRUCT_TABLE_KEY_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3401, 0), )

    
    TABLE_KEY_SNREF = property(__TABLE_KEY_SNREF.value, __TABLE_KEY_SNREF.set, None, None)

    
    # Element SHORT_NAME (SHORT-NAME) inherited from PARAM
    
    # Element LONG_NAME (LONG-NAME) inherited from PARAM
    
    # Element DESC (DESC) inherited from PARAM
    
    # Attribute OID inherited from PARAM
    
    # Attribute SEMANTIC inherited from PARAM
    _ElementMap.update({
        __TABLE_KEY_REF.name() : __TABLE_KEY_REF,
        __TABLE_KEY_SNREF.name() : __TABLE_KEY_SNREF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'TABLE-STRUCT', TABLE_STRUCT)


# Complex type VALUE with content type ELEMENT_ONLY
class VALUE (POSITIONABLE_PARAM):
    """Complex type VALUE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VALUE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3561, 0)
    _ElementMap = POSITIONABLE_PARAM._ElementMap.copy()
    _AttributeMap = POSITIONABLE_PARAM._AttributeMap.copy()
    # Base type is POSITIONABLE_PARAM
    
    # Element SDGS (SDGS) inherited from PARAM
    
    # Element BYTE_POSITION (BYTE-POSITION) inherited from POSITIONABLE-PARAM
    
    # Element BIT_POSITION (BIT-POSITION) inherited from POSITIONABLE-PARAM
    
    # Element PHYSICAL-DEFAULT-VALUE uses Python identifier PHYSICAL_DEFAULT_VALUE
    __PHYSICAL_DEFAULT_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PHYSICAL-DEFAULT-VALUE'), 'PHYSICAL_DEFAULT_VALUE', '__VALUE_PHYSICAL_DEFAULT_VALUE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3566, 0), )

    
    PHYSICAL_DEFAULT_VALUE = property(__PHYSICAL_DEFAULT_VALUE.value, __PHYSICAL_DEFAULT_VALUE.set, None, None)

    
    # Element DOP-REF uses Python identifier DOP_REF
    __DOP_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DOP-REF'), 'DOP_REF', '__VALUE_DOP_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3568, 0), )

    
    DOP_REF = property(__DOP_REF.value, __DOP_REF.set, None, None)

    
    # Element DOP-SNREF uses Python identifier DOP_SNREF
    __DOP_SNREF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DOP-SNREF'), 'DOP_SNREF', '__VALUE_DOP_SNREF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3569, 0), )

    
    DOP_SNREF = property(__DOP_SNREF.value, __DOP_SNREF.set, None, None)

    
    # Element SHORT_NAME (SHORT-NAME) inherited from PARAM
    
    # Element LONG_NAME (LONG-NAME) inherited from PARAM
    
    # Element DESC (DESC) inherited from PARAM
    
    # Attribute OID inherited from PARAM
    
    # Attribute SEMANTIC inherited from PARAM
    _ElementMap.update({
        __PHYSICAL_DEFAULT_VALUE.name() : __PHYSICAL_DEFAULT_VALUE,
        __DOP_REF.name() : __DOP_REF,
        __DOP_SNREF.name() : __DOP_SNREF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'VALUE', VALUE)


# Complex type DYNAMIC-ENDMARKER-FIELD with content type ELEMENT_ONLY
class DYNAMIC_ENDMARKER_FIELD (FIELD):
    """Complex type DYNAMIC-ENDMARKER-FIELD with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DYNAMIC-ENDMARKER-FIELD')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1070, 0)
    _ElementMap = FIELD._ElementMap.copy()
    _AttributeMap = FIELD._AttributeMap.copy()
    # Base type is FIELD
    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from DOP-BASE
    
    # Element SDGS (SDGS) inherited from DOP-BASE
    
    # Element DATA-OBJECT-PROP-REF uses Python identifier DATA_OBJECT_PROP_REF
    __DATA_OBJECT_PROP_REF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-REF'), 'DATA_OBJECT_PROP_REF', '__DYNAMIC_ENDMARKER_FIELD_DATA_OBJECT_PROP_REF', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1075, 0), )

    
    DATA_OBJECT_PROP_REF = property(__DATA_OBJECT_PROP_REF.value, __DATA_OBJECT_PROP_REF.set, None, None)

    
    # Element BASIC_STRUCTURE_REF (BASIC-STRUCTURE-REF) inherited from FIELD
    
    # Element BASIC_STRUCTURE_SNREF (BASIC-STRUCTURE-SNREF) inherited from FIELD
    
    # Element ENV_DATA_DESC_REF (ENV-DATA-DESC-REF) inherited from FIELD
    
    # Element ENV_DATA_DESC_SNREF (ENV-DATA-DESC-SNREF) inherited from FIELD
    
    # Element SHORT_NAME (SHORT-NAME) inherited from DOP-BASE
    
    # Element LONG_NAME (LONG-NAME) inherited from DOP-BASE
    
    # Element DESC (DESC) inherited from DOP-BASE
    
    # Attribute ID inherited from DOP-BASE
    
    # Attribute OID inherited from DOP-BASE
    
    # Attribute IS_VISIBLE inherited from FIELD
    _ElementMap.update({
        __DATA_OBJECT_PROP_REF.name() : __DATA_OBJECT_PROP_REF
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DYNAMIC-ENDMARKER-FIELD', DYNAMIC_ENDMARKER_FIELD)


# Complex type DYNAMIC-LENGTH-FIELD with content type ELEMENT_ONLY
class DYNAMIC_LENGTH_FIELD (FIELD):
    """Complex type DYNAMIC-LENGTH-FIELD with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DYNAMIC-LENGTH-FIELD')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1086, 0)
    _ElementMap = FIELD._ElementMap.copy()
    _AttributeMap = FIELD._AttributeMap.copy()
    # Base type is FIELD
    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from DOP-BASE
    
    # Element SDGS (SDGS) inherited from DOP-BASE
    
    # Element OFFSET uses Python identifier OFFSET
    __OFFSET = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OFFSET'), 'OFFSET', '__DYNAMIC_LENGTH_FIELD_OFFSET', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1091, 0), )

    
    OFFSET = property(__OFFSET.value, __OFFSET.set, None, None)

    
    # Element DETERMINENUMBER-OF-ITEMS uses Python identifier DETERMINENUMBER_OF_ITEMS
    __DETERMINENUMBER_OF_ITEMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DETERMINENUMBER-OF-ITEMS'), 'DETERMINENUMBER_OF_ITEMS', '__DYNAMIC_LENGTH_FIELD_DETERMINENUMBER_OF_ITEMS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1092, 0), )

    
    DETERMINENUMBER_OF_ITEMS = property(__DETERMINENUMBER_OF_ITEMS.value, __DETERMINENUMBER_OF_ITEMS.set, None, None)

    
    # Element BASIC_STRUCTURE_REF (BASIC-STRUCTURE-REF) inherited from FIELD
    
    # Element BASIC_STRUCTURE_SNREF (BASIC-STRUCTURE-SNREF) inherited from FIELD
    
    # Element ENV_DATA_DESC_REF (ENV-DATA-DESC-REF) inherited from FIELD
    
    # Element ENV_DATA_DESC_SNREF (ENV-DATA-DESC-SNREF) inherited from FIELD
    
    # Element SHORT_NAME (SHORT-NAME) inherited from DOP-BASE
    
    # Element LONG_NAME (LONG-NAME) inherited from DOP-BASE
    
    # Element DESC (DESC) inherited from DOP-BASE
    
    # Attribute ID inherited from DOP-BASE
    
    # Attribute OID inherited from DOP-BASE
    
    # Attribute IS_VISIBLE inherited from FIELD
    _ElementMap.update({
        __OFFSET.name() : __OFFSET,
        __DETERMINENUMBER_OF_ITEMS.name() : __DETERMINENUMBER_OF_ITEMS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DYNAMIC-LENGTH-FIELD', DYNAMIC_LENGTH_FIELD)


# Complex type END-OF-PDU-FIELD with content type ELEMENT_ONLY
class END_OF_PDU_FIELD (FIELD):
    """Complex type END-OF-PDU-FIELD with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'END-OF-PDU-FIELD')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1324, 0)
    _ElementMap = FIELD._ElementMap.copy()
    _AttributeMap = FIELD._AttributeMap.copy()
    # Base type is FIELD
    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from DOP-BASE
    
    # Element SDGS (SDGS) inherited from DOP-BASE
    
    # Element MAX-NUMBER-OF-ITEMS uses Python identifier MAX_NUMBER_OF_ITEMS
    __MAX_NUMBER_OF_ITEMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MAX-NUMBER-OF-ITEMS'), 'MAX_NUMBER_OF_ITEMS', '__END_OF_PDU_FIELD_MAX_NUMBER_OF_ITEMS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1329, 0), )

    
    MAX_NUMBER_OF_ITEMS = property(__MAX_NUMBER_OF_ITEMS.value, __MAX_NUMBER_OF_ITEMS.set, None, None)

    
    # Element MIN-NUMBER-OF-ITEMS uses Python identifier MIN_NUMBER_OF_ITEMS
    __MIN_NUMBER_OF_ITEMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MIN-NUMBER-OF-ITEMS'), 'MIN_NUMBER_OF_ITEMS', '__END_OF_PDU_FIELD_MIN_NUMBER_OF_ITEMS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1330, 0), )

    
    MIN_NUMBER_OF_ITEMS = property(__MIN_NUMBER_OF_ITEMS.value, __MIN_NUMBER_OF_ITEMS.set, None, None)

    
    # Element BASIC_STRUCTURE_REF (BASIC-STRUCTURE-REF) inherited from FIELD
    
    # Element BASIC_STRUCTURE_SNREF (BASIC-STRUCTURE-SNREF) inherited from FIELD
    
    # Element ENV_DATA_DESC_REF (ENV-DATA-DESC-REF) inherited from FIELD
    
    # Element ENV_DATA_DESC_SNREF (ENV-DATA-DESC-SNREF) inherited from FIELD
    
    # Element SHORT_NAME (SHORT-NAME) inherited from DOP-BASE
    
    # Element LONG_NAME (LONG-NAME) inherited from DOP-BASE
    
    # Element DESC (DESC) inherited from DOP-BASE
    
    # Attribute ID inherited from DOP-BASE
    
    # Attribute OID inherited from DOP-BASE
    
    # Attribute IS_VISIBLE inherited from FIELD
    _ElementMap.update({
        __MAX_NUMBER_OF_ITEMS.name() : __MAX_NUMBER_OF_ITEMS,
        __MIN_NUMBER_OF_ITEMS.name() : __MIN_NUMBER_OF_ITEMS
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'END-OF-PDU-FIELD', END_OF_PDU_FIELD)


# Complex type ENV-DATA with content type ELEMENT_ONLY
class ENV_DATA (BASIC_STRUCTURE):
    """Complex type ENV-DATA with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ENV-DATA')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1341, 0)
    _ElementMap = BASIC_STRUCTURE._ElementMap.copy()
    _AttributeMap = BASIC_STRUCTURE._AttributeMap.copy()
    # Base type is BASIC_STRUCTURE
    
    # Element BYTE_SIZE (BYTE-SIZE) inherited from BASIC-STRUCTURE
    
    # Element PARAMS (PARAMS) inherited from BASIC-STRUCTURE
    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from DOP-BASE
    
    # Element SDGS (SDGS) inherited from DOP-BASE
    
    # Element ALL-VALUE uses Python identifier ALL_VALUE
    __ALL_VALUE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ALL-VALUE'), 'ALL_VALUE', '__ENV_DATA_ALL_VALUE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1346, 0), )

    
    ALL_VALUE = property(__ALL_VALUE.value, __ALL_VALUE.set, None, None)

    
    # Element DTC-VALUES uses Python identifier DTC_VALUES
    __DTC_VALUES = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DTC-VALUES'), 'DTC_VALUES', '__ENV_DATA_DTC_VALUES', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1347, 0), )

    
    DTC_VALUES = property(__DTC_VALUES.value, __DTC_VALUES.set, None, None)

    
    # Element SHORT_NAME (SHORT-NAME) inherited from DOP-BASE
    
    # Element LONG_NAME (LONG-NAME) inherited from DOP-BASE
    
    # Element DESC (DESC) inherited from DOP-BASE
    
    # Attribute ID inherited from DOP-BASE
    
    # Attribute OID inherited from DOP-BASE
    _ElementMap.update({
        __ALL_VALUE.name() : __ALL_VALUE,
        __DTC_VALUES.name() : __DTC_VALUES
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ENV-DATA', ENV_DATA)


# Complex type STATIC-FIELD with content type ELEMENT_ONLY
class STATIC_FIELD (FIELD):
    """Complex type STATIC-FIELD with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'STATIC-FIELD')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3141, 0)
    _ElementMap = FIELD._ElementMap.copy()
    _AttributeMap = FIELD._AttributeMap.copy()
    # Base type is FIELD
    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from DOP-BASE
    
    # Element SDGS (SDGS) inherited from DOP-BASE
    
    # Element BASIC_STRUCTURE_REF (BASIC-STRUCTURE-REF) inherited from FIELD
    
    # Element BASIC_STRUCTURE_SNREF (BASIC-STRUCTURE-SNREF) inherited from FIELD
    
    # Element ENV_DATA_DESC_REF (ENV-DATA-DESC-REF) inherited from FIELD
    
    # Element ENV_DATA_DESC_SNREF (ENV-DATA-DESC-SNREF) inherited from FIELD
    
    # Element FIXED-NUMBER-OF-ITEMS uses Python identifier FIXED_NUMBER_OF_ITEMS
    __FIXED_NUMBER_OF_ITEMS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FIXED-NUMBER-OF-ITEMS'), 'FIXED_NUMBER_OF_ITEMS', '__STATIC_FIELD_FIXED_NUMBER_OF_ITEMS', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3146, 0), )

    
    FIXED_NUMBER_OF_ITEMS = property(__FIXED_NUMBER_OF_ITEMS.value, __FIXED_NUMBER_OF_ITEMS.set, None, None)

    
    # Element ITEM-BYTE-SIZE uses Python identifier ITEM_BYTE_SIZE
    __ITEM_BYTE_SIZE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ITEM-BYTE-SIZE'), 'ITEM_BYTE_SIZE', '__STATIC_FIELD_ITEM_BYTE_SIZE', False, pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3147, 0), )

    
    ITEM_BYTE_SIZE = property(__ITEM_BYTE_SIZE.value, __ITEM_BYTE_SIZE.set, None, None)

    
    # Element SHORT_NAME (SHORT-NAME) inherited from DOP-BASE
    
    # Element LONG_NAME (LONG-NAME) inherited from DOP-BASE
    
    # Element DESC (DESC) inherited from DOP-BASE
    
    # Attribute ID inherited from DOP-BASE
    
    # Attribute OID inherited from DOP-BASE
    
    # Attribute IS_VISIBLE inherited from FIELD
    _ElementMap.update({
        __FIXED_NUMBER_OF_ITEMS.name() : __FIXED_NUMBER_OF_ITEMS,
        __ITEM_BYTE_SIZE.name() : __ITEM_BYTE_SIZE
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'STATIC-FIELD', STATIC_FIELD)


# Complex type STRUCTURE with content type ELEMENT_ONLY
class STRUCTURE (BASIC_STRUCTURE):
    """Complex type STRUCTURE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'STRUCTURE')
    _XSDLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3158, 0)
    _ElementMap = BASIC_STRUCTURE._ElementMap.copy()
    _AttributeMap = BASIC_STRUCTURE._AttributeMap.copy()
    # Base type is BASIC_STRUCTURE
    
    # Element BYTE_SIZE (BYTE-SIZE) inherited from BASIC-STRUCTURE
    
    # Element PARAMS (PARAMS) inherited from BASIC-STRUCTURE
    
    # Element ADMIN_DATA (ADMIN-DATA) inherited from DOP-BASE
    
    # Element SDGS (SDGS) inherited from DOP-BASE
    
    # Element SHORT_NAME (SHORT-NAME) inherited from DOP-BASE
    
    # Element LONG_NAME (LONG-NAME) inherited from DOP-BASE
    
    # Element DESC (DESC) inherited from DOP-BASE
    
    # Attribute ID inherited from DOP-BASE
    
    # Attribute OID inherited from DOP-BASE
    
    # Attribute IS-VISIBLE uses Python identifier IS_VISIBLE
    __IS_VISIBLE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IS-VISIBLE'), 'IS_VISIBLE', '__STRUCTURE_IS_VISIBLE', pyxb.binding.datatypes.boolean, unicode_default='true')
    __IS_VISIBLE._DeclarationLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3162, 0)
    __IS_VISIBLE._UseLocation = pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3162, 0)
    
    IS_VISIBLE = property(__IS_VISIBLE.value, __IS_VISIBLE.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __IS_VISIBLE.name() : __IS_VISIBLE
    })
Namespace.addCategoryObject('typeBinding', 'STRUCTURE', STRUCTURE)


b = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'b'), CTD_ANON, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 3, 4))
Namespace.addCategoryObject('elementBinding', b.name().localName(), b)

br = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'br'), CTD_ANON_, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 14, 4))
Namespace.addCategoryObject('elementBinding', br.name().localName(), br)

i = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'i'), CTD_ANON_2, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 29, 4))
Namespace.addCategoryObject('elementBinding', i.name().localName(), i)

li = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'li'), CTD_ANON_3, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 39, 4))
Namespace.addCategoryObject('elementBinding', li.name().localName(), li)

ol = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ol'), CTD_ANON_4, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 47, 4))
Namespace.addCategoryObject('elementBinding', ol.name().localName(), ol)

sub = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sub'), CTD_ANON_5, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 65, 4))
Namespace.addCategoryObject('elementBinding', sub.name().localName(), sub)

sup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sup'), CTD_ANON_6, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 70, 4))
Namespace.addCategoryObject('elementBinding', sup.name().localName(), sup)

u = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'u'), CTD_ANON_7, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 75, 4))
Namespace.addCategoryObject('elementBinding', u.name().localName(), u)

ul = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ul'), CTD_ANON_8, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 80, 4))
Namespace.addCategoryObject('elementBinding', ul.name().localName(), ul)

p = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'p'), CTD_ANON_9, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 93, 4))
Namespace.addCategoryObject('elementBinding', p.name().localName(), p)

ODX = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ODX'), ODX_, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3782, 0))
Namespace.addCategoryObject('elementBinding', ODX.name().localName(), ODX)



CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'br'), CTD_ANON_, scope=CTD_ANON, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 14, 4)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 5, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'br')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 19, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton()




CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'br'), CTD_ANON_, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 14, 4)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 31, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'br')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 19, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_2._Automaton = _BuildAutomaton_()




CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'br'), CTD_ANON_, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 14, 4)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ol'), CTD_ANON_4, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 47, 4)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ul'), CTD_ANON_8, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 80, 4)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'p'), CTD_ANON_9, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 93, 4)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 41, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'p')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ul')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 89, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ol')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 90, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'br')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 19, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_3._Automaton = _BuildAutomaton_2()




CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'li'), CTD_ANON_3, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 39, 4)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 50, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'li')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 50, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_4._Automaton = _BuildAutomaton_3()




CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'br'), CTD_ANON_, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 14, 4)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 67, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'br')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 19, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_5._Automaton = _BuildAutomaton_4()




CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'br'), CTD_ANON_, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 14, 4)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 72, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'br')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 19, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_6._Automaton = _BuildAutomaton_5()




CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'br'), CTD_ANON_, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 14, 4)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 77, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'br')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 19, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_7._Automaton = _BuildAutomaton_6()




CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'li'), CTD_ANON_3, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 39, 4)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 83, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'li')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 83, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_8._Automaton = _BuildAutomaton_7()




CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'br'), CTD_ANON_, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 14, 4)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 95, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'br')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 19, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_9._Automaton = _BuildAutomaton_8()




ADDITIONAL_AUDIENCE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=ADDITIONAL_AUDIENCE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

ADDITIONAL_AUDIENCE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=ADDITIONAL_AUDIENCE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

ADDITIONAL_AUDIENCE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=ADDITIONAL_AUDIENCE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ADDITIONAL_AUDIENCE._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ADDITIONAL_AUDIENCE._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ADDITIONAL_AUDIENCE._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ADDITIONAL_AUDIENCE._Automaton = _BuildAutomaton_9()




ADDITIONAL_AUDIENCES._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ADDITIONAL-AUDIENCE'), ADDITIONAL_AUDIENCE, scope=ADDITIONAL_AUDIENCES, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 17, 0)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ADDITIONAL_AUDIENCES._UseForTag(pyxb.namespace.ExpandedName(None, 'ADDITIONAL-AUDIENCE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 17, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ADDITIONAL_AUDIENCES._Automaton = _BuildAutomaton_10()




ADMIN_DATA._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LANGUAGE'), STD_ANON, scope=ADMIN_DATA, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 50, 0)))

ADMIN_DATA._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPANY-DOC-INFOS'), COMPANY_DOC_INFOS, scope=ADMIN_DATA, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 57, 0)))

ADMIN_DATA._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DOC-REVISIONS'), DOC_REVISIONS, scope=ADMIN_DATA, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 58, 0)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 50, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 57, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 58, 0))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ADMIN_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'LANGUAGE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 50, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ADMIN_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPANY-DOC-INFOS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 57, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ADMIN_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'DOC-REVISIONS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 58, 0))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ADMIN_DATA._Automaton = _BuildAutomaton_11()




ALL_VARIANT_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ALL-VARIANT-REF'), ODXLINK, scope=ALL_VARIANT_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 67, 0)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ALL_VARIANT_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'ALL-VARIANT-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 67, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ALL_VARIANT_REFS._Automaton = _BuildAutomaton_12()




AUDIENCE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DISABLED-AUDIENCE-REFS'), DISABLED_AUDIENCE_REFS, scope=AUDIENCE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 74, 0)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 74, 0))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AUDIENCE._UseForTag(pyxb.namespace.ExpandedName(None, 'DISABLED-AUDIENCE-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 74, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AUDIENCE._Automaton = _BuildAutomaton_13()




BASE_FUNCTION_NODE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AUDIENCE'), AUDIENCE, scope=BASE_FUNCTION_NODE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 98, 0)))

BASE_FUNCTION_NODE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FUNCTION-IN-PARAMS'), FUNCTION_IN_PARAMS, scope=BASE_FUNCTION_NODE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 99, 0)))

BASE_FUNCTION_NODE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FUNCTION-OUT-PARAMS'), FUNCTION_OUT_PARAMS, scope=BASE_FUNCTION_NODE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 100, 0)))

BASE_FUNCTION_NODE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPONENT-CONNECTORS'), COMPONENT_CONNECTORS, scope=BASE_FUNCTION_NODE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 101, 0)))

BASE_FUNCTION_NODE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MULTIPLE-ECU-JOB-REFS'), MULTIPLE_ECU_JOB_REFS, scope=BASE_FUNCTION_NODE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 102, 0)))

BASE_FUNCTION_NODE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), ADMIN_DATA, scope=BASE_FUNCTION_NODE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 103, 0)))

BASE_FUNCTION_NODE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDG'), SDG, scope=BASE_FUNCTION_NODE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 104, 0)))

BASE_FUNCTION_NODE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=BASE_FUNCTION_NODE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

BASE_FUNCTION_NODE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=BASE_FUNCTION_NODE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

BASE_FUNCTION_NODE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=BASE_FUNCTION_NODE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 98, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 99, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 100, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 101, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 102, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 103, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 104, 0))
    counters.add(cc_8)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(BASE_FUNCTION_NODE._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BASE_FUNCTION_NODE._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(BASE_FUNCTION_NODE._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(BASE_FUNCTION_NODE._UseForTag(pyxb.namespace.ExpandedName(None, 'AUDIENCE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 98, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(BASE_FUNCTION_NODE._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCTION-IN-PARAMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 99, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(BASE_FUNCTION_NODE._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCTION-OUT-PARAMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 100, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(BASE_FUNCTION_NODE._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPONENT-CONNECTORS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 101, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(BASE_FUNCTION_NODE._UseForTag(pyxb.namespace.ExpandedName(None, 'MULTIPLE-ECU-JOB-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 102, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(BASE_FUNCTION_NODE._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 103, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(BASE_FUNCTION_NODE._UseForTag(pyxb.namespace.ExpandedName(None, 'SDG')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 104, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
BASE_FUNCTION_NODE._Automaton = _BuildAutomaton_14()




BASE_VARIANT_PATTERN._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MATCHING-BASE-VARIANT-PARAMETERS'), MATCHING_BASE_VARIANT_PARAMETERS, scope=BASE_VARIANT_PATTERN, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 129, 0)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT_PATTERN._UseForTag(pyxb.namespace.ExpandedName(None, 'MATCHING-BASE-VARIANT-PARAMETERS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 129, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
BASE_VARIANT_PATTERN._Automaton = _BuildAutomaton_15()




BASE_VARIANTS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BASE-VARIANT'), BASE_VARIANT, scope=BASE_VARIANTS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 142, 0)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANTS._UseForTag(pyxb.namespace.ExpandedName(None, 'BASE-VARIANT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 142, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
BASE_VARIANTS._Automaton = _BuildAutomaton_16()




CASE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'STRUCTURE-REF'), ODXLINK, scope=CASE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 161, 0)))

CASE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'STRUCTURE-SNREF'), SNREF, scope=CASE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 162, 0)))

CASE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LOWER-LIMIT'), LIMIT, scope=CASE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 164, 0)))

CASE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UPPER-LIMIT'), LIMIT, scope=CASE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 165, 0)))

CASE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=CASE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

CASE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=CASE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

CASE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=CASE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 160, 0))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CASE._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CASE._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CASE._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CASE._UseForTag(pyxb.namespace.ExpandedName(None, 'STRUCTURE-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 161, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CASE._UseForTag(pyxb.namespace.ExpandedName(None, 'STRUCTURE-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 162, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CASE._UseForTag(pyxb.namespace.ExpandedName(None, 'LOWER-LIMIT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 164, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CASE._UseForTag(pyxb.namespace.ExpandedName(None, 'UPPER-LIMIT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 165, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CASE._Automaton = _BuildAutomaton_17()




CASES._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CASE'), CASE, scope=CASES, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 171, 0)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CASES._UseForTag(pyxb.namespace.ExpandedName(None, 'CASE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 171, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CASES._Automaton = _BuildAutomaton_18()




CHECKSUM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FILLBYTE'), pyxb.binding.datatypes.hexBinary, scope=CHECKSUM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 178, 0)))

CHECKSUM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SOURCE-START-ADDRESS'), pyxb.binding.datatypes.hexBinary, scope=CHECKSUM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 179, 0)))

CHECKSUM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPRESSED-SIZE'), pyxb.binding.datatypes.unsignedInt, scope=CHECKSUM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 180, 0)))

CHECKSUM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CHECKSUM-ALG'), pyxb.binding.datatypes.string, scope=CHECKSUM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 181, 0)))

CHECKSUM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SOURCE-END-ADDRESS'), SOURCE_END_ADDRESS, scope=CHECKSUM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 183, 0)))

CHECKSUM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UNCOMPRESSED-SIZE'), UNCOMPRESSED_SIZE, scope=CHECKSUM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 184, 0)))

CHECKSUM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CHECKSUM-RESULT'), CHECKSUM_RESULT, scope=CHECKSUM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 186, 0)))

CHECKSUM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=CHECKSUM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

CHECKSUM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=CHECKSUM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

CHECKSUM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=CHECKSUM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 178, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 180, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 181, 0))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CHECKSUM._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CHECKSUM._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CHECKSUM._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CHECKSUM._UseForTag(pyxb.namespace.ExpandedName(None, 'FILLBYTE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 178, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CHECKSUM._UseForTag(pyxb.namespace.ExpandedName(None, 'SOURCE-START-ADDRESS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 179, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CHECKSUM._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPRESSED-SIZE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 180, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CHECKSUM._UseForTag(pyxb.namespace.ExpandedName(None, 'CHECKSUM-ALG')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 181, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CHECKSUM._UseForTag(pyxb.namespace.ExpandedName(None, 'SOURCE-END-ADDRESS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 183, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CHECKSUM._UseForTag(pyxb.namespace.ExpandedName(None, 'UNCOMPRESSED-SIZE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 184, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CHECKSUM._UseForTag(pyxb.namespace.ExpandedName(None, 'CHECKSUM-RESULT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 186, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CHECKSUM._Automaton = _BuildAutomaton_19()




CHECKSUMS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CHECKSUM'), CHECKSUM, scope=CHECKSUMS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 202, 0)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CHECKSUMS._UseForTag(pyxb.namespace.ExpandedName(None, 'CHECKSUM')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 202, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CHECKSUMS._Automaton = _BuildAutomaton_20()




CODED_VALUES._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CODED-VALUE'), pyxb.binding.datatypes.string, scope=CODED_VALUES, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 219, 0)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CODED_VALUES._UseForTag(pyxb.namespace.ExpandedName(None, 'CODED-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 219, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CODED_VALUES._Automaton = _BuildAutomaton_21()




COMM_RELATIONS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMM-RELATION'), COMM_RELATION, scope=COMM_RELATIONS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 247, 0)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMM_RELATIONS._UseForTag(pyxb.namespace.ExpandedName(None, 'COMM-RELATION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 247, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMM_RELATIONS._Automaton = _BuildAutomaton_22()




COMPANY_DATA._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ROLES'), ROLES, scope=COMPANY_DATA, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 262, 0)))

COMPANY_DATA._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TEAM-MEMBERS'), TEAM_MEMBERS, scope=COMPANY_DATA, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 263, 0)))

COMPANY_DATA._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPANY-SPECIFIC-INFO'), COMPANY_SPECIFIC_INFO, scope=COMPANY_DATA, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 264, 0)))

COMPANY_DATA._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=COMPANY_DATA, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

COMPANY_DATA._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=COMPANY_DATA, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

COMPANY_DATA._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=COMPANY_DATA, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 262, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 263, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 264, 0))
    counters.add(cc_4)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPANY_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(COMPANY_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(COMPANY_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(COMPANY_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'ROLES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 262, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(COMPANY_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'TEAM-MEMBERS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 263, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(COMPANY_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPANY-SPECIFIC-INFO')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 264, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPANY_DATA._Automaton = _BuildAutomaton_23()




COMPANY_DATAS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPANY-DATA'), COMPANY_DATA, scope=COMPANY_DATAS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 272, 0)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPANY_DATAS._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPANY-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 272, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPANY_DATAS._Automaton = _BuildAutomaton_24()




COMPANY_DOC_INFO._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPANY-DATA-REF'), ODXLINK, scope=COMPANY_DOC_INFO, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 278, 0)))

COMPANY_DOC_INFO._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TEAM-MEMBER-REF'), ODXLINK, scope=COMPANY_DOC_INFO, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 279, 0)))

COMPANY_DOC_INFO._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DOC-LABEL'), pyxb.binding.datatypes.string, scope=COMPANY_DOC_INFO, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 280, 0)))

COMPANY_DOC_INFO._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDGS'), SDGS, scope=COMPANY_DOC_INFO, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 281, 0)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 279, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 280, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 281, 0))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPANY_DOC_INFO._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPANY-DATA-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 278, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(COMPANY_DOC_INFO._UseForTag(pyxb.namespace.ExpandedName(None, 'TEAM-MEMBER-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 279, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(COMPANY_DOC_INFO._UseForTag(pyxb.namespace.ExpandedName(None, 'DOC-LABEL')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 280, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(COMPANY_DOC_INFO._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 281, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPANY_DOC_INFO._Automaton = _BuildAutomaton_25()




COMPANY_DOC_INFOS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPANY-DOC-INFO'), COMPANY_DOC_INFO, scope=COMPANY_DOC_INFOS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 287, 0)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPANY_DOC_INFOS._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPANY-DOC-INFO')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 287, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPANY_DOC_INFOS._Automaton = _BuildAutomaton_26()




COMPANY_REVISION_INFO._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPANY-DATA-REF'), ODXLINK, scope=COMPANY_REVISION_INFO, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 293, 0)))

COMPANY_REVISION_INFO._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'REVISION-LABEL'), pyxb.binding.datatypes.string, scope=COMPANY_REVISION_INFO, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 294, 0)))

COMPANY_REVISION_INFO._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'STATE'), pyxb.binding.datatypes.string, scope=COMPANY_REVISION_INFO, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 295, 0)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 294, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 295, 0))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPANY_REVISION_INFO._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPANY-DATA-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 293, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(COMPANY_REVISION_INFO._UseForTag(pyxb.namespace.ExpandedName(None, 'REVISION-LABEL')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 294, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(COMPANY_REVISION_INFO._UseForTag(pyxb.namespace.ExpandedName(None, 'STATE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 295, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPANY_REVISION_INFO._Automaton = _BuildAutomaton_27()




COMPANY_REVISION_INFOS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPANY-REVISIONINFO'), COMPANY_REVISION_INFO, scope=COMPANY_REVISION_INFOS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 301, 0)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPANY_REVISION_INFOS._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPANY-REVISIONINFO')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 301, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPANY_REVISION_INFOS._Automaton = _BuildAutomaton_28()




COMPANY_SPECIFIC_INFO._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RELATED-DOCS'), RELATED_DOCS, scope=COMPANY_SPECIFIC_INFO, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 307, 0)))

COMPANY_SPECIFIC_INFO._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDGS'), SDGS, scope=COMPANY_SPECIFIC_INFO, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 308, 0)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 307, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 308, 0))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(COMPANY_SPECIFIC_INFO._UseForTag(pyxb.namespace.ExpandedName(None, 'RELATED-DOCS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 307, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(COMPANY_SPECIFIC_INFO._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 308, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
COMPANY_SPECIFIC_INFO._Automaton = _BuildAutomaton_29()




COMPARAM_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPARAM-REF'), COMPARAM_REF, scope=COMPARAM_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 338, 0)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPARAM_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPARAM-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 338, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPARAM_REFS._Automaton = _BuildAutomaton_30()




COMPARAMS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPARAM'), COMPARAM, scope=COMPARAMS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 344, 0)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPARAMS._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPARAM')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 344, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPARAMS._Automaton = _BuildAutomaton_31()




COMPARAM_SUBSET_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPARAM-SUBSET-REF'), ODXLINK, scope=COMPARAM_SUBSET_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 374, 0)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPARAM_SUBSET_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPARAM-SUBSET-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 374, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPARAM_SUBSET_REFS._Automaton = _BuildAutomaton_32()




COMPLEX_COMPARAMS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPLEX-COMPARAM'), COMPLEX_COMPARAM, scope=COMPLEX_COMPARAMS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 395, 0)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPLEX_COMPARAMS._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPLEX-COMPARAM')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 395, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPLEX_COMPARAMS._Automaton = _BuildAutomaton_33()




COMPLEX_PHYSICAL_DEFAULT_VALUE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPLEX-VALUES'), COMPLEX_VALUES, scope=COMPLEX_PHYSICAL_DEFAULT_VALUE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 407, 0)))

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 407, 0))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(COMPLEX_PHYSICAL_DEFAULT_VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPLEX-VALUES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 407, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
COMPLEX_PHYSICAL_DEFAULT_VALUE._Automaton = _BuildAutomaton_34()




COMPLEX_VALUES._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPLEX-VALUE'), COMPLEX_VALUE, scope=COMPLEX_VALUES, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 424, 0)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPLEX_VALUES._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPLEX-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 424, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPLEX_VALUES._Automaton = _BuildAutomaton_35()




COMPONENT_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ECU-VARIANT-REFS'), ECU_VARIANT_REFS, scope=COMPONENT_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 430, 0)))

COMPONENT_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BASE-VARIANT-REF'), ODXLINK, scope=COMPONENT_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 431, 0)))

COMPONENT_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-OBJECT-CONNECTOR'), DIAG_OBJECT_CONNECTOR, scope=COMPONENT_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 433, 0)))

COMPONENT_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-OBJECT-CONNECTOR-REF'), ODXLINK, scope=COMPONENT_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 434, 0)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 430, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 431, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 433, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 434, 0))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(COMPONENT_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'ECU-VARIANT-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 430, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(COMPONENT_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'BASE-VARIANT-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 431, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(COMPONENT_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-OBJECT-CONNECTOR')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 433, 0))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(COMPONENT_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-OBJECT-CONNECTOR-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 434, 0))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
COMPONENT_CONNECTOR._Automaton = _BuildAutomaton_36()




COMPONENT_CONNECTORS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPONENT-CONNECTOR'), COMPONENT_CONNECTOR, scope=COMPONENT_CONNECTORS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 441, 0)))

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPONENT_CONNECTORS._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPONENT-CONNECTOR')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 441, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPONENT_CONNECTORS._Automaton = _BuildAutomaton_37()




COMPU_CONST._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'V'), V, scope=COMPU_CONST, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 459, 0)))

COMPU_CONST._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VT'), VT, scope=COMPU_CONST, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 460, 0)))

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPU_CONST._UseForTag(pyxb.namespace.ExpandedName(None, 'V')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 459, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPU_CONST._UseForTag(pyxb.namespace.ExpandedName(None, 'VT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 460, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPU_CONST._Automaton = _BuildAutomaton_38()




COMPU_DEFAULT_VALUE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'V'), V, scope=COMPU_DEFAULT_VALUE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 467, 0)))

COMPU_DEFAULT_VALUE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VT'), VT, scope=COMPU_DEFAULT_VALUE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 468, 0)))

COMPU_DEFAULT_VALUE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPU-INVERSE-VALUE'), COMPU_INVERSE_VALUE, scope=COMPU_DEFAULT_VALUE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 470, 0)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 470, 0))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPU_DEFAULT_VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'V')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 467, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPU_DEFAULT_VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'VT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 468, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(COMPU_DEFAULT_VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPU-INVERSE-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 470, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPU_DEFAULT_VALUE._Automaton = _BuildAutomaton_39()




COMPU_DENOMINATOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'V'), V, scope=COMPU_DENOMINATOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 476, 0)))

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPU_DENOMINATOR._UseForTag(pyxb.namespace.ExpandedName(None, 'V')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 476, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPU_DENOMINATOR._Automaton = _BuildAutomaton_40()




COMPU_INTERNAL_TO_PHYS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPU-SCALES'), COMPU_SCALES, scope=COMPU_INTERNAL_TO_PHYS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 483, 0)))

COMPU_INTERNAL_TO_PHYS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PROG-CODE'), PROG_CODE, scope=COMPU_INTERNAL_TO_PHYS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 484, 0)))

COMPU_INTERNAL_TO_PHYS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPU-DEFAULT-VALUE'), COMPU_DEFAULT_VALUE, scope=COMPU_INTERNAL_TO_PHYS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 486, 0)))

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 486, 0))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPU_INTERNAL_TO_PHYS._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPU-SCALES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 483, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPU_INTERNAL_TO_PHYS._UseForTag(pyxb.namespace.ExpandedName(None, 'PROG-CODE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 484, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(COMPU_INTERNAL_TO_PHYS._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPU-DEFAULT-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 486, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPU_INTERNAL_TO_PHYS._Automaton = _BuildAutomaton_41()




COMPU_INVERSE_VALUE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'V'), V, scope=COMPU_INVERSE_VALUE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 492, 0)))

COMPU_INVERSE_VALUE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VT'), VT, scope=COMPU_INVERSE_VALUE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 493, 0)))

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPU_INVERSE_VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'V')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 492, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPU_INVERSE_VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'VT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 493, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPU_INVERSE_VALUE._Automaton = _BuildAutomaton_42()




COMPU_METHOD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CATEGORY'), COMPU_CATEGORY, scope=COMPU_METHOD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 499, 0)))

COMPU_METHOD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPU-INTERNAL-TO-PHYS'), COMPU_INTERNAL_TO_PHYS, scope=COMPU_METHOD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 500, 0)))

COMPU_METHOD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPU-PHYS-TO-INTERNAL'), COMPU_PHYS_TO_INTERNAL, scope=COMPU_METHOD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 501, 0)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 500, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 501, 0))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPU_METHOD._UseForTag(pyxb.namespace.ExpandedName(None, 'CATEGORY')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 499, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(COMPU_METHOD._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPU-INTERNAL-TO-PHYS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 500, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(COMPU_METHOD._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPU-PHYS-TO-INTERNAL')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 501, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPU_METHOD._Automaton = _BuildAutomaton_43()




COMPU_NUMERATOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'V'), V, scope=COMPU_NUMERATOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 507, 0)))

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPU_NUMERATOR._UseForTag(pyxb.namespace.ExpandedName(None, 'V')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 507, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPU_NUMERATOR._Automaton = _BuildAutomaton_44()




COMPU_PHYS_TO_INTERNAL._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PROG-CODE'), PROG_CODE, scope=COMPU_PHYS_TO_INTERNAL, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 514, 0)))

COMPU_PHYS_TO_INTERNAL._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPU-SCALES'), COMPU_SCALES, scope=COMPU_PHYS_TO_INTERNAL, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 515, 0)))

COMPU_PHYS_TO_INTERNAL._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPU-DEFAULT-VALUE'), COMPU_DEFAULT_VALUE, scope=COMPU_PHYS_TO_INTERNAL, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 517, 0)))

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 517, 0))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPU_PHYS_TO_INTERNAL._UseForTag(pyxb.namespace.ExpandedName(None, 'PROG-CODE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 514, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPU_PHYS_TO_INTERNAL._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPU-SCALES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 515, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(COMPU_PHYS_TO_INTERNAL._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPU-DEFAULT-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 517, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPU_PHYS_TO_INTERNAL._Automaton = _BuildAutomaton_45()




COMPU_RATIONAL_COEFFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPU-NUMERATOR'), COMPU_NUMERATOR, scope=COMPU_RATIONAL_COEFFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 523, 0)))

COMPU_RATIONAL_COEFFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPU-DENOMINATOR'), COMPU_DENOMINATOR, scope=COMPU_RATIONAL_COEFFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 524, 0)))

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 524, 0))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPU_RATIONAL_COEFFS._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPU-NUMERATOR')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 523, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(COMPU_RATIONAL_COEFFS._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPU-DENOMINATOR')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 524, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPU_RATIONAL_COEFFS._Automaton = _BuildAutomaton_46()




COMPU_SCALE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-LABEL'), TEXT, scope=COMPU_SCALE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 530, 0)))

COMPU_SCALE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=COMPU_SCALE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 531, 0)))

COMPU_SCALE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LOWER-LIMIT'), LIMIT, scope=COMPU_SCALE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 532, 0)))

COMPU_SCALE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UPPER-LIMIT'), LIMIT, scope=COMPU_SCALE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 533, 0)))

COMPU_SCALE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPU-INVERSE-VALUE'), COMPU_INVERSE_VALUE, scope=COMPU_SCALE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 534, 0)))

COMPU_SCALE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPU-CONST'), COMPU_CONST, scope=COMPU_SCALE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 536, 0)))

COMPU_SCALE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPU-RATIONAL-COEFFS'), COMPU_RATIONAL_COEFFS, scope=COMPU_SCALE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 537, 0)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 530, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 531, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 532, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 533, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 534, 0))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(COMPU_SCALE._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-LABEL')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 530, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(COMPU_SCALE._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 531, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(COMPU_SCALE._UseForTag(pyxb.namespace.ExpandedName(None, 'LOWER-LIMIT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 532, 0))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(COMPU_SCALE._UseForTag(pyxb.namespace.ExpandedName(None, 'UPPER-LIMIT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 533, 0))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(COMPU_SCALE._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPU-INVERSE-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 534, 0))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPU_SCALE._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPU-CONST')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 536, 0))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPU_SCALE._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPU-RATIONAL-COEFFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 537, 0))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPU_SCALE._Automaton = _BuildAutomaton_47()




COMPU_SCALES._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPU-SCALE'), COMPU_SCALE, scope=COMPU_SCALES, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 544, 0)))

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPU_SCALES._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPU-SCALE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 544, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPU_SCALES._Automaton = _BuildAutomaton_48()




CONFIG_DATA._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VALID-BASE-VARIANTS'), VALID_BASE_VARIANTS, scope=CONFIG_DATA, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 551, 0)))

CONFIG_DATA._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CONFIG-RECORDS'), CONFIG_RECORDS, scope=CONFIG_DATA, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 552, 0)))

CONFIG_DATA._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDGS'), SDGS, scope=CONFIG_DATA, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 553, 0)))

CONFIG_DATA._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=CONFIG_DATA, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

CONFIG_DATA._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=CONFIG_DATA, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

CONFIG_DATA._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=CONFIG_DATA, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 552, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 553, 0))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CONFIG_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CONFIG_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CONFIG_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CONFIG_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'VALID-BASE-VARIANTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 551, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CONFIG_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'CONFIG-RECORDS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 552, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CONFIG_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 553, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CONFIG_DATA._Automaton = _BuildAutomaton_49()




CONFIG_DATA_DICTIONARY_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROPS'), DATA_OBJECT_PROPS, scope=CONFIG_DATA_DICTIONARY_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 559, 0)))

CONFIG_DATA_DICTIONARY_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UNIT-SPEC'), UNIT_SPEC, scope=CONFIG_DATA_DICTIONARY_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 560, 0)))

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 559, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 560, 0))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CONFIG_DATA_DICTIONARY_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROPS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 559, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CONFIG_DATA_DICTIONARY_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'UNIT-SPEC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 560, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CONFIG_DATA_DICTIONARY_SPEC._Automaton = _BuildAutomaton_50()




CONFIG_DATAS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CONFIG-DATA'), CONFIG_DATA, scope=CONFIG_DATAS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 566, 0)))

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CONFIG_DATAS._UseForTag(pyxb.namespace.ExpandedName(None, 'CONFIG-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 566, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CONFIG_DATAS._Automaton = _BuildAutomaton_51()




CONFIG_ITEM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION'), pyxb.binding.datatypes.unsignedInt, scope=CONFIG_ITEM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 579, 0)))

CONFIG_ITEM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BIT-POSITION'), pyxb.binding.datatypes.unsignedInt, scope=CONFIG_ITEM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 580, 0)))

CONFIG_ITEM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-REF'), ODXLINK, scope=CONFIG_ITEM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 582, 0)))

CONFIG_ITEM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-SNREF'), SNREF, scope=CONFIG_ITEM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 583, 0)))

CONFIG_ITEM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDGS'), SDGS, scope=CONFIG_ITEM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 585, 0)))

CONFIG_ITEM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=CONFIG_ITEM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

CONFIG_ITEM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=CONFIG_ITEM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

CONFIG_ITEM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=CONFIG_ITEM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 580, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 585, 0))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CONFIG_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CONFIG_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CONFIG_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CONFIG_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 579, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CONFIG_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'BIT-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 580, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CONFIG_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 582, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CONFIG_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 583, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CONFIG_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 585, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CONFIG_ITEM._Automaton = _BuildAutomaton_52()




CONFIG_RECORD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CONFIG-ID-ITEM'), CONFIG_ID_ITEM, scope=CONFIG_RECORD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 593, 0)))

CONFIG_RECORD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-DATA-CONNECTORS'), DIAG_COMM_DATA_CONNECTORS, scope=CONFIG_RECORD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 594, 0)))

CONFIG_RECORD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CONFIG-ID'), IDENT_VALUE, scope=CONFIG_RECORD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 596, 0)))

CONFIG_RECORD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DATA-RECORDS'), DATA_RECORDS, scope=CONFIG_RECORD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 597, 0)))

CONFIG_RECORD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AUDIENCE'), AUDIENCE, scope=CONFIG_RECORD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 598, 0)))

CONFIG_RECORD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SYSTEM-ITEMS'), SYSTEM_ITEMS, scope=CONFIG_RECORD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 599, 0)))

CONFIG_RECORD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DATA-ID-ITEM'), DATA_ID_ITEM, scope=CONFIG_RECORD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 600, 0)))

CONFIG_RECORD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OPTION-ITEMS'), OPTION_ITEMS, scope=CONFIG_RECORD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 601, 0)))

CONFIG_RECORD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DEFAULT-DATA-RECORD-SNREF'), SNREF, scope=CONFIG_RECORD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 602, 0)))

CONFIG_RECORD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDGS'), SDGS, scope=CONFIG_RECORD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 603, 0)))

CONFIG_RECORD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=CONFIG_RECORD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

CONFIG_RECORD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=CONFIG_RECORD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

CONFIG_RECORD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=CONFIG_RECORD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 593, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 596, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 597, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 598, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 599, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 600, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 601, 0))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 602, 0))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 603, 0))
    counters.add(cc_10)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CONFIG_RECORD._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CONFIG_RECORD._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CONFIG_RECORD._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CONFIG_RECORD._UseForTag(pyxb.namespace.ExpandedName(None, 'CONFIG-ID-ITEM')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 593, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CONFIG_RECORD._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-DATA-CONNECTORS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 594, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CONFIG_RECORD._UseForTag(pyxb.namespace.ExpandedName(None, 'CONFIG-ID')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 596, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CONFIG_RECORD._UseForTag(pyxb.namespace.ExpandedName(None, 'DATA-RECORDS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 597, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CONFIG_RECORD._UseForTag(pyxb.namespace.ExpandedName(None, 'AUDIENCE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 598, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CONFIG_RECORD._UseForTag(pyxb.namespace.ExpandedName(None, 'SYSTEM-ITEMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 599, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CONFIG_RECORD._UseForTag(pyxb.namespace.ExpandedName(None, 'DATA-ID-ITEM')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 600, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CONFIG_RECORD._UseForTag(pyxb.namespace.ExpandedName(None, 'OPTION-ITEMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 601, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CONFIG_RECORD._UseForTag(pyxb.namespace.ExpandedName(None, 'DEFAULT-DATA-RECORD-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 602, 0))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CONFIG_RECORD._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 603, 0))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CONFIG_RECORD._Automaton = _BuildAutomaton_53()




CONFIG_RECORDS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CONFIG-RECORD'), CONFIG_RECORD, scope=CONFIG_RECORDS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 609, 0)))

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CONFIG_RECORDS._UseForTag(pyxb.namespace.ExpandedName(None, 'CONFIG-RECORD')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 609, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CONFIG_RECORDS._Automaton = _BuildAutomaton_54()




DATABLOCK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LOGICAL-BLOCK-INDEX'), pyxb.binding.datatypes.hexBinary, scope=DATABLOCK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 622, 0)))

DATABLOCK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FLASHDATA-REF'), ODXLINK, scope=DATABLOCK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 623, 0)))

DATABLOCK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FILTERS'), FILTERS, scope=DATABLOCK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 624, 0)))

DATABLOCK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SEGMENTS'), SEGMENTS, scope=DATABLOCK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 625, 0)))

DATABLOCK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TARGET-ADDR-OFFSET'), TARGET_ADDR_OFFSET, scope=DATABLOCK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 626, 0)))

DATABLOCK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OWN-IDENTS'), OWN_IDENTS, scope=DATABLOCK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 627, 0)))

DATABLOCK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SECURITYS'), SECURITYS, scope=DATABLOCK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 628, 0)))

DATABLOCK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDGS'), SDGS, scope=DATABLOCK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 629, 0)))

DATABLOCK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AUDIENCE'), AUDIENCE, scope=DATABLOCK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 630, 0)))

DATABLOCK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=DATABLOCK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

DATABLOCK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=DATABLOCK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

DATABLOCK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=DATABLOCK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 622, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 623, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 624, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 625, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 626, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 627, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 628, 0))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 629, 0))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 630, 0))
    counters.add(cc_10)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DATABLOCK._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DATABLOCK._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DATABLOCK._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DATABLOCK._UseForTag(pyxb.namespace.ExpandedName(None, 'LOGICAL-BLOCK-INDEX')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 622, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DATABLOCK._UseForTag(pyxb.namespace.ExpandedName(None, 'FLASHDATA-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 623, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DATABLOCK._UseForTag(pyxb.namespace.ExpandedName(None, 'FILTERS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 624, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(DATABLOCK._UseForTag(pyxb.namespace.ExpandedName(None, 'SEGMENTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 625, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(DATABLOCK._UseForTag(pyxb.namespace.ExpandedName(None, 'TARGET-ADDR-OFFSET')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 626, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(DATABLOCK._UseForTag(pyxb.namespace.ExpandedName(None, 'OWN-IDENTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 627, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(DATABLOCK._UseForTag(pyxb.namespace.ExpandedName(None, 'SECURITYS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 628, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(DATABLOCK._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 629, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(DATABLOCK._UseForTag(pyxb.namespace.ExpandedName(None, 'AUDIENCE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 630, 0))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DATABLOCK._Automaton = _BuildAutomaton_55()




DATABLOCK_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DATABLOCK-REF'), ODXLINK, scope=DATABLOCK_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 639, 0)))

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DATABLOCK_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'DATABLOCK-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 639, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DATABLOCK_REFS._Automaton = _BuildAutomaton_56()




DATABLOCKS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DATABLOCK'), DATABLOCK, scope=DATABLOCKS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 645, 0)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DATABLOCKS._UseForTag(pyxb.namespace.ExpandedName(None, 'DATABLOCK')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 645, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DATABLOCKS._Automaton = _BuildAutomaton_57()




DATA_OBJECT_PROPS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP'), DATA_OBJECT_PROP, scope=DATA_OBJECT_PROPS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 693, 0)))

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DATA_OBJECT_PROPS._UseForTag(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 693, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DATA_OBJECT_PROPS._Automaton = _BuildAutomaton_58()




DATA_RECORDS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DATA-RECORD'), DATA_RECORD, scope=DATA_RECORDS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 715, 0)))

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DATA_RECORDS._UseForTag(pyxb.namespace.ExpandedName(None, 'DATA-RECORD')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 715, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DATA_RECORDS._Automaton = _BuildAutomaton_59()




DEFAULT_CASE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'STRUCTURE-REF'), ODXLINK, scope=DEFAULT_CASE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 735, 0)))

DEFAULT_CASE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'STRUCTURE-SNREF'), SNREF, scope=DEFAULT_CASE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 736, 0)))

DEFAULT_CASE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=DEFAULT_CASE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

DEFAULT_CASE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=DEFAULT_CASE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

DEFAULT_CASE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=DEFAULT_CASE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 734, 0))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DEFAULT_CASE._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DEFAULT_CASE._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DEFAULT_CASE._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DEFAULT_CASE._UseForTag(pyxb.namespace.ExpandedName(None, 'STRUCTURE-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 735, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DEFAULT_CASE._UseForTag(pyxb.namespace.ExpandedName(None, 'STRUCTURE-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 736, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DEFAULT_CASE._Automaton = _BuildAutomaton_60()




DESCRIPTION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ol'), CTD_ANON_4, scope=DESCRIPTION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 47, 4)))

DESCRIPTION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ul'), CTD_ANON_8, scope=DESCRIPTION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 80, 4)))

DESCRIPTION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'p'), CTD_ANON_9, scope=DESCRIPTION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 93, 4)))

DESCRIPTION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EXTERNAL-DOCS'), EXTERNAL_DOCS, scope=DESCRIPTION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 744, 0)))

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 743, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 744, 0))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DESCRIPTION._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'p')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DESCRIPTION._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ul')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 89, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DESCRIPTION._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ol')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx-xhtml.xsd', 90, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DESCRIPTION._UseForTag(pyxb.namespace.ExpandedName(None, 'EXTERNAL-DOCS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 744, 0))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DESCRIPTION._Automaton = _BuildAutomaton_61()




DETERMINE_NUMBER_OF_ITEMS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION'), pyxb.binding.datatypes.unsignedInt, scope=DETERMINE_NUMBER_OF_ITEMS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 751, 0)))

DETERMINE_NUMBER_OF_ITEMS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BIT-POSITION'), STD_ANON_, scope=DETERMINE_NUMBER_OF_ITEMS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 752, 0)))

DETERMINE_NUMBER_OF_ITEMS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-REF'), ODXLINK, scope=DETERMINE_NUMBER_OF_ITEMS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 759, 0)))

def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 752, 0))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DETERMINE_NUMBER_OF_ITEMS._UseForTag(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 751, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DETERMINE_NUMBER_OF_ITEMS._UseForTag(pyxb.namespace.ExpandedName(None, 'BIT-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 752, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DETERMINE_NUMBER_OF_ITEMS._UseForTag(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 759, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DETERMINE_NUMBER_OF_ITEMS._Automaton = _BuildAutomaton_62()




DIAG_COMM_DATA_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UNCOMPRESSED-SIZE'), pyxb.binding.datatypes.unsignedInt, scope=DIAG_COMM_DATA_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 803, 0)))

DIAG_COMM_DATA_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SOURCE-START-ADDRESS'), pyxb.binding.datatypes.hexBinary, scope=DIAG_COMM_DATA_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 804, 0)))

DIAG_COMM_DATA_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'READ-DIAG-COMMCONNECTOR'), READ_DIAG_COMM_CONNECTOR, scope=DIAG_COMM_DATA_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 805, 0)))

DIAG_COMM_DATA_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'WRITE-DIAG-COMMCONNECTOR'), WRITE_DIAG_COMM_CONNECTOR, scope=DIAG_COMM_DATA_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 806, 0)))

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 805, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 806, 0))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DIAG_COMM_DATA_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'UNCOMPRESSED-SIZE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 803, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DIAG_COMM_DATA_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'SOURCE-START-ADDRESS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 804, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_COMM_DATA_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'READ-DIAG-COMMCONNECTOR')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 805, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_COMM_DATA_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'WRITE-DIAG-COMMCONNECTOR')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 806, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DIAG_COMM_DATA_CONNECTOR._Automaton = _BuildAutomaton_63()




DIAG_COMM_DATA_CONNECTORS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-DATACONNECTOR'), DIAG_COMM_DATA_CONNECTOR, scope=DIAG_COMM_DATA_CONNECTORS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 812, 0)))

def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DIAG_COMM_DATA_CONNECTORS._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-DATACONNECTOR')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 812, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DIAG_COMM_DATA_CONNECTORS._Automaton = _BuildAutomaton_64()




DIAG_COMMS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-SERVICE'), DIAG_SERVICE, scope=DIAG_COMMS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3721, 0)))

DIAG_COMMS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SINGLE-ECU-JOB'), SINGLE_ECU_JOB, scope=DIAG_COMMS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3722, 0)))

DIAG_COMMS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-REF'), ODXLINK, scope=DIAG_COMMS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3724, 0)))

def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DIAG_COMMS._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-SERVICE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3721, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DIAG_COMMS._UseForTag(pyxb.namespace.ExpandedName(None, 'SINGLE-ECU-JOB')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3722, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DIAG_COMMS._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3724, 0))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DIAG_COMMS._Automaton = _BuildAutomaton_65()




DIAG_DATA_DICTIONARY_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), ADMIN_DATA, scope=DIAG_DATA_DICTIONARY_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 824, 0)))

DIAG_DATA_DICTIONARY_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DTC-DOPS'), DTC_DOPS, scope=DIAG_DATA_DICTIONARY_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 825, 0)))

DIAG_DATA_DICTIONARY_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ENV-DATA-DESCS'), ENV_DATA_DESCS, scope=DIAG_DATA_DICTIONARY_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 826, 0)))

DIAG_DATA_DICTIONARY_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROPS'), DATA_OBJECT_PROPS, scope=DIAG_DATA_DICTIONARY_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 827, 0)))

DIAG_DATA_DICTIONARY_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'STRUCTURES'), STRUCTURES, scope=DIAG_DATA_DICTIONARY_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 828, 0)))

DIAG_DATA_DICTIONARY_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'STATIC-FIELDS'), STATIC_FIELDS, scope=DIAG_DATA_DICTIONARY_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 829, 0)))

DIAG_DATA_DICTIONARY_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DYNAMIC-LENGTH-FIELDS'), DYNAMIC_LENGTH_FIELDS, scope=DIAG_DATA_DICTIONARY_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 830, 0)))

DIAG_DATA_DICTIONARY_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DYNAMIC-ENDMARKER-FIELDS'), DYNAMIC_ENDMARKER_FIELDS, scope=DIAG_DATA_DICTIONARY_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 831, 0)))

DIAG_DATA_DICTIONARY_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'END-OF-PDU-FIELDS'), END_OF_PDU_FIELDS, scope=DIAG_DATA_DICTIONARY_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 833, 0)))

DIAG_DATA_DICTIONARY_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MUXS'), MUXS, scope=DIAG_DATA_DICTIONARY_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 834, 0)))

DIAG_DATA_DICTIONARY_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ENV-DATAS'), ENV_DATAS, scope=DIAG_DATA_DICTIONARY_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 835, 0)))

DIAG_DATA_DICTIONARY_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UNIT-SPEC'), UNIT_SPEC, scope=DIAG_DATA_DICTIONARY_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 836, 0)))

DIAG_DATA_DICTIONARY_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TABLES'), TABLES, scope=DIAG_DATA_DICTIONARY_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 837, 0)))

DIAG_DATA_DICTIONARY_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDGS'), SDGS, scope=DIAG_DATA_DICTIONARY_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 838, 0)))

def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 824, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 825, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 826, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 827, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 828, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 829, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 830, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 831, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 833, 0))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 834, 0))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 835, 0))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 836, 0))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 837, 0))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 838, 0))
    counters.add(cc_13)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_DATA_DICTIONARY_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 824, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_DATA_DICTIONARY_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'DTC-DOPS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 825, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_DATA_DICTIONARY_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'ENV-DATA-DESCS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 826, 0))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_DATA_DICTIONARY_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROPS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 827, 0))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_DATA_DICTIONARY_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'STRUCTURES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 828, 0))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_DATA_DICTIONARY_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'STATIC-FIELDS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 829, 0))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_DATA_DICTIONARY_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'DYNAMIC-LENGTH-FIELDS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 830, 0))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_DATA_DICTIONARY_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'DYNAMIC-ENDMARKER-FIELDS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 831, 0))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_DATA_DICTIONARY_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'END-OF-PDU-FIELDS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 833, 0))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_DATA_DICTIONARY_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'MUXS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 834, 0))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_DATA_DICTIONARY_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'ENV-DATAS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 835, 0))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_DATA_DICTIONARY_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'UNIT-SPEC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 836, 0))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_DATA_DICTIONARY_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'TABLES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 837, 0))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_DATA_DICTIONARY_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 838, 0))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DIAG_DATA_DICTIONARY_SPEC._Automaton = _BuildAutomaton_66()




DIAG_LAYER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), ADMIN_DATA, scope=DIAG_LAYER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 845, 0)))

DIAG_LAYER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPANY-DATAS'), COMPANY_DATAS, scope=DIAG_LAYER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 846, 0)))

DIAG_LAYER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASSS'), FUNCT_CLASSS, scope=DIAG_LAYER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 847, 0)))

DIAG_LAYER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-DATA-DICTIONARY-SPEC'), DIAG_DATA_DICTIONARY_SPEC, scope=DIAG_LAYER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 848, 0)))

DIAG_LAYER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-COMMS'), DIAG_COMMS, scope=DIAG_LAYER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 849, 0)))

DIAG_LAYER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'REQUESTS'), REQUESTS, scope=DIAG_LAYER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 850, 0)))

DIAG_LAYER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'POS-RESPONSES'), POS_RESPONSES, scope=DIAG_LAYER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 851, 0)))

DIAG_LAYER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NEG-RESPONSES'), NEG_RESPONSES, scope=DIAG_LAYER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 852, 0)))

DIAG_LAYER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'GLOBAL-NEG-RESPONSES'), GLOBAL_NEG_RESPONSES, scope=DIAG_LAYER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 853, 0)))

DIAG_LAYER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IMPORT-REFS'), IMPORT_REFS, scope=DIAG_LAYER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 854, 0)))

DIAG_LAYER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'STATE-CHARTS'), STATE_CHARTS, scope=DIAG_LAYER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 855, 0)))

DIAG_LAYER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ADDITIONAL-AUDIENCES'), ADDITIONAL_AUDIENCES, scope=DIAG_LAYER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 856, 0)))

DIAG_LAYER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SUB-COMPONENTS'), SUB_COMPONENTS, scope=DIAG_LAYER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 857, 0)))

DIAG_LAYER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LIBRARYS'), LIBRARYS, scope=DIAG_LAYER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 858, 0)))

DIAG_LAYER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDGS'), SDGS, scope=DIAG_LAYER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 859, 0)))

DIAG_LAYER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=DIAG_LAYER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

DIAG_LAYER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=DIAG_LAYER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

DIAG_LAYER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=DIAG_LAYER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 845, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 846, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 847, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 848, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 849, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 850, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 851, 0))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 852, 0))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 853, 0))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 854, 0))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 855, 0))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 856, 0))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 857, 0))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 858, 0))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 859, 0))
    counters.add(cc_16)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 845, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPANY-DATAS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 846, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASSS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 847, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-DATA-DICTIONARY-SPEC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 848, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-COMMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 849, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER._UseForTag(pyxb.namespace.ExpandedName(None, 'REQUESTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 850, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER._UseForTag(pyxb.namespace.ExpandedName(None, 'POS-RESPONSES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 851, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER._UseForTag(pyxb.namespace.ExpandedName(None, 'NEG-RESPONSES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 852, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER._UseForTag(pyxb.namespace.ExpandedName(None, 'GLOBAL-NEG-RESPONSES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 853, 0))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER._UseForTag(pyxb.namespace.ExpandedName(None, 'IMPORT-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 854, 0))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER._UseForTag(pyxb.namespace.ExpandedName(None, 'STATE-CHARTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 855, 0))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER._UseForTag(pyxb.namespace.ExpandedName(None, 'ADDITIONAL-AUDIENCES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 856, 0))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER._UseForTag(pyxb.namespace.ExpandedName(None, 'SUB-COMPONENTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 857, 0))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER._UseForTag(pyxb.namespace.ExpandedName(None, 'LIBRARYS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 858, 0))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 859, 0))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DIAG_LAYER._Automaton = _BuildAutomaton_67()




DIAG_LAYER_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-LAYER-REF'), ODXLINK, scope=DIAG_LAYER_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 881, 0)))

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-LAYER-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 881, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DIAG_LAYER_REFS._Automaton = _BuildAutomaton_68()




DIAG_OBJECT_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FUNCTION-DIAG-COMM-CONNECTORS'), FUNCTION_DIAG_COMM_CONNECTORS, scope=DIAG_OBJECT_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 888, 0)))

DIAG_OBJECT_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TABLE-ROW-CONNECTORS'), TABLE_ROW_CONNECTORS, scope=DIAG_OBJECT_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 890, 0)))

DIAG_OBJECT_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ENV-DATA-CONNECTORS'), ENV_DATA_CONNECTORS, scope=DIAG_OBJECT_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 891, 0)))

DIAG_OBJECT_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DTC-CONNECTORS'), DTC_CONNECTORS, scope=DIAG_OBJECT_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 892, 0)))

DIAG_OBJECT_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=DIAG_OBJECT_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

DIAG_OBJECT_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=DIAG_OBJECT_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

DIAG_OBJECT_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=DIAG_OBJECT_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 888, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 890, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 891, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 892, 0))
    counters.add(cc_5)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DIAG_OBJECT_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_OBJECT_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_OBJECT_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_OBJECT_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCTION-DIAG-COMM-CONNECTORS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 888, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_OBJECT_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'TABLE-ROW-CONNECTORS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 890, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_OBJECT_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'ENV-DATA-CONNECTORS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 891, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_OBJECT_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'DTC-CONNECTORS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 892, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DIAG_OBJECT_CONNECTOR._Automaton = _BuildAutomaton_69()




DIAG_VARIABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), ADMIN_DATA, scope=DIAG_VARIABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 919, 0)))

DIAG_VARIABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VARIABLE-GROUP-REF'), ODXLINK, scope=DIAG_VARIABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 920, 0)))

DIAG_VARIABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SW-VARIABLES'), SW_VARIABLES, scope=DIAG_VARIABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 921, 0)))

DIAG_VARIABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMM-RELATIONS'), COMM_RELATIONS, scope=DIAG_VARIABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 923, 0)))

DIAG_VARIABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SNREF-TO-TABLEROW'), SNREF_TO_TABLEROW, scope=DIAG_VARIABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 924, 0)))

DIAG_VARIABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDGS'), SDGS, scope=DIAG_VARIABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 926, 0)))

DIAG_VARIABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=DIAG_VARIABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

DIAG_VARIABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=DIAG_VARIABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

DIAG_VARIABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=DIAG_VARIABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 919, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 920, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 921, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 923, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 924, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 926, 0))
    counters.add(cc_7)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DIAG_VARIABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_VARIABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_VARIABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_VARIABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 919, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_VARIABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'VARIABLE-GROUP-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 920, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_VARIABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'SW-VARIABLES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 921, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_VARIABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'COMM-RELATIONS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 923, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_VARIABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'SNREF-TO-TABLEROW')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 924, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_VARIABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 926, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DIAG_VARIABLE._Automaton = _BuildAutomaton_70()




DIAG_VARIABLES._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-VARIABLE-REF'), ODXLINK, scope=DIAG_VARIABLES, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3729, 0)))

DIAG_VARIABLES._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-VARIABLE'), DIAG_VARIABLE, scope=DIAG_VARIABLES, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3730, 0)))

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DIAG_VARIABLES._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-VARIABLE-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3729, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DIAG_VARIABLES._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-VARIABLE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3730, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DIAG_VARIABLES._Automaton = _BuildAutomaton_71()




DISABLED_AUDIENCE_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DISABLED-AUDIENCE-REF'), ODXLINK, scope=DISABLED_AUDIENCE_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 947, 4)))

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DISABLED_AUDIENCE_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'DISABLED-AUDIENCE-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 947, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DISABLED_AUDIENCE_REFS._Automaton = _BuildAutomaton_72()




DOC_REVISION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TEAM-MEMBER-REF'), ODXLINK, scope=DOC_REVISION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 953, 0)))

DOC_REVISION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'REVISION-LABEL'), pyxb.binding.datatypes.string, scope=DOC_REVISION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 954, 0)))

DOC_REVISION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'STATE'), pyxb.binding.datatypes.string, scope=DOC_REVISION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 955, 0)))

DOC_REVISION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DATE'), pyxb.binding.datatypes.dateTime, scope=DOC_REVISION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 956, 0)))

DOC_REVISION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TOOL'), pyxb.binding.datatypes.string, scope=DOC_REVISION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 957, 0)))

DOC_REVISION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPANY-REVISION-INFOS'), COMPANY_REVISION_INFOS, scope=DOC_REVISION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 958, 0)))

DOC_REVISION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MODIFICATIONS'), MODIFICATIONS, scope=DOC_REVISION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 959, 0)))

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 953, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 954, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 955, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 957, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 958, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 959, 0))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DOC_REVISION._UseForTag(pyxb.namespace.ExpandedName(None, 'TEAM-MEMBER-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 953, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DOC_REVISION._UseForTag(pyxb.namespace.ExpandedName(None, 'REVISION-LABEL')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 954, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DOC_REVISION._UseForTag(pyxb.namespace.ExpandedName(None, 'STATE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 955, 0))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DOC_REVISION._UseForTag(pyxb.namespace.ExpandedName(None, 'DATE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 956, 0))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DOC_REVISION._UseForTag(pyxb.namespace.ExpandedName(None, 'TOOL')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 957, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DOC_REVISION._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPANY-REVISION-INFOS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 958, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(DOC_REVISION._UseForTag(pyxb.namespace.ExpandedName(None, 'MODIFICATIONS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 959, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DOC_REVISION._Automaton = _BuildAutomaton_73()




DOC_REVISIONS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DOC-REVISION'), DOC_REVISION, scope=DOC_REVISIONS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 965, 0)))

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DOC_REVISIONS._UseForTag(pyxb.namespace.ExpandedName(None, 'DOC-REVISION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 965, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DOC_REVISIONS._Automaton = _BuildAutomaton_74()




DOP_BASE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), ADMIN_DATA, scope=DOP_BASE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0)))

DOP_BASE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDGS'), SDGS, scope=DOP_BASE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0)))

DOP_BASE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=DOP_BASE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

DOP_BASE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=DOP_BASE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

DOP_BASE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=DOP_BASE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DOP_BASE._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DOP_BASE._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DOP_BASE._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DOP_BASE._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DOP_BASE._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DOP_BASE._Automaton = _BuildAutomaton_75()




DTC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_2, scope=DTC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 994, 0)))

DTC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TROUBLE-CODE'), pyxb.binding.datatypes.unsignedInt, scope=DTC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1001, 0)))

DTC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DISPLAY-TROUBLE-CODE'), pyxb.binding.datatypes.string, scope=DTC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1002, 0)))

DTC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TEXT'), TEXT, scope=DTC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1003, 0)))

DTC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LEVEL'), pyxb.binding.datatypes.unsignedByte, scope=DTC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1004, 0)))

DTC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDGS'), SDGS, scope=DTC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1005, 0)))

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1002, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1004, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1005, 0))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DTC._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 994, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DTC._UseForTag(pyxb.namespace.ExpandedName(None, 'TROUBLE-CODE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1001, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DTC._UseForTag(pyxb.namespace.ExpandedName(None, 'DISPLAY-TROUBLE-CODE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1002, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DTC._UseForTag(pyxb.namespace.ExpandedName(None, 'TEXT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1003, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DTC._UseForTag(pyxb.namespace.ExpandedName(None, 'LEVEL')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1004, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DTC._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1005, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DTC._Automaton = _BuildAutomaton_76()




DTC_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DTC-DOP-REF'), ODXLINK, scope=DTC_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1015, 0)))

DTC_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DTC-SNREF'), SNREF, scope=DTC_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1016, 0)))

DTC_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=DTC_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

DTC_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=DTC_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

DTC_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=DTC_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DTC_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DTC_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DTC_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DTC_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'DTC-DOP-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1015, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DTC_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'DTC-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1016, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DTC_CONNECTOR._Automaton = _BuildAutomaton_77()




DTC_CONNECTORS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DTC-CONNECTOR'), DTC_CONNECTOR, scope=DTC_CONNECTORS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1022, 0)))

def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DTC_CONNECTORS._UseForTag(pyxb.namespace.ExpandedName(None, 'DTC-CONNECTOR')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1022, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DTC_CONNECTORS._Automaton = _BuildAutomaton_78()




DTC_DOPS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DTC-DOP'), DTC_DOP, scope=DTC_DOPS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1043, 0)))

def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DTC_DOPS._UseForTag(pyxb.namespace.ExpandedName(None, 'DTC-DOP')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1043, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DTC_DOPS._Automaton = _BuildAutomaton_79()




DTCS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DTC-REF'), ODXLINK, scope=DTCS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3735, 0)))

DTCS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DTC'), DTC, scope=DTCS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3736, 0)))

def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DTCS._UseForTag(pyxb.namespace.ExpandedName(None, 'DTC-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3735, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DTCS._UseForTag(pyxb.namespace.ExpandedName(None, 'DTC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3736, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DTCS._Automaton = _BuildAutomaton_80()




DTC_VALUES._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DTC-VALUE'), DTC_VALUE, scope=DTC_VALUES, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1061, 0)))

def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DTC_VALUES._UseForTag(pyxb.namespace.ExpandedName(None, 'DTC-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1061, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DTC_VALUES._Automaton = _BuildAutomaton_81()




DYNAMIC_ENDMARKER_FIELDS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DYNAMIC-ENDMARKERFIELD'), DYNAMIC_ENDMARKER_FIELD, scope=DYNAMIC_ENDMARKER_FIELDS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1083, 0)))

def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DYNAMIC_ENDMARKER_FIELDS._UseForTag(pyxb.namespace.ExpandedName(None, 'DYNAMIC-ENDMARKERFIELD')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1083, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DYNAMIC_ENDMARKER_FIELDS._Automaton = _BuildAutomaton_82()




DYNAMIC_LENGTH_FIELDS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DYNAMIC-LENGTHFIELD'), DYNAMIC_LENGTH_FIELD, scope=DYNAMIC_LENGTH_FIELDS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1100, 0)))

def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DYNAMIC_LENGTH_FIELDS._UseForTag(pyxb.namespace.ExpandedName(None, 'DYNAMIC-LENGTHFIELD')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1100, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DYNAMIC_LENGTH_FIELDS._Automaton = _BuildAutomaton_83()




DYN_DEFINED_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DYN-ID-DEF-MODE-INFOS'), DYN_ID_DEF_MODE_INFOS, scope=DYN_DEFINED_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1106, 0)))

def _BuildAutomaton_84 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1106, 0))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DYN_DEFINED_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'DYN-ID-DEF-MODE-INFOS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1106, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DYN_DEFINED_SPEC._Automaton = _BuildAutomaton_84()




DYN_ID_DEF_MODE_INFO._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DEF-MODE'), pyxb.binding.datatypes.string, scope=DYN_ID_DEF_MODE_INFO, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1119, 0)))

DYN_ID_DEF_MODE_INFO._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CLEAR-DYN-DEF-MESSAGE-REF'), ODXLINK, scope=DYN_ID_DEF_MODE_INFO, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1121, 0)))

DYN_ID_DEF_MODE_INFO._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CLEAR-DYN-DEF-MESSAGE-SNREF'), SNREF, scope=DYN_ID_DEF_MODE_INFO, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1122, 0)))

DYN_ID_DEF_MODE_INFO._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'READ-DYN-DEF-MESSAGE-REF'), ODXLINK, scope=DYN_ID_DEF_MODE_INFO, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1125, 0)))

DYN_ID_DEF_MODE_INFO._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'READ-DYN-DEF-MESSAGE-SNREF'), SNREF, scope=DYN_ID_DEF_MODE_INFO, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1126, 0)))

DYN_ID_DEF_MODE_INFO._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DYN-DEF-MESSAGE-REF'), ODXLINK, scope=DYN_ID_DEF_MODE_INFO, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1129, 0)))

DYN_ID_DEF_MODE_INFO._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DYN-DEF-MESSAGE-SNREF'), SNREF, scope=DYN_ID_DEF_MODE_INFO, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1130, 0)))

DYN_ID_DEF_MODE_INFO._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SUPPORTED-DYN-IDS'), SUPPORTED_DYN_IDS, scope=DYN_ID_DEF_MODE_INFO, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1132, 0)))

DYN_ID_DEF_MODE_INFO._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SELECTION-TABLE-REFS'), SELECTION_TABLE_REFS, scope=DYN_ID_DEF_MODE_INFO, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1133, 0)))

def _BuildAutomaton_85 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1132, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1133, 0))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DYN_ID_DEF_MODE_INFO._UseForTag(pyxb.namespace.ExpandedName(None, 'DEF-MODE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1119, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DYN_ID_DEF_MODE_INFO._UseForTag(pyxb.namespace.ExpandedName(None, 'CLEAR-DYN-DEF-MESSAGE-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1121, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DYN_ID_DEF_MODE_INFO._UseForTag(pyxb.namespace.ExpandedName(None, 'CLEAR-DYN-DEF-MESSAGE-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1122, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DYN_ID_DEF_MODE_INFO._UseForTag(pyxb.namespace.ExpandedName(None, 'READ-DYN-DEF-MESSAGE-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1125, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DYN_ID_DEF_MODE_INFO._UseForTag(pyxb.namespace.ExpandedName(None, 'READ-DYN-DEF-MESSAGE-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1126, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DYN_ID_DEF_MODE_INFO._UseForTag(pyxb.namespace.ExpandedName(None, 'DYN-DEF-MESSAGE-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1129, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DYN_ID_DEF_MODE_INFO._UseForTag(pyxb.namespace.ExpandedName(None, 'DYN-DEF-MESSAGE-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1130, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DYN_ID_DEF_MODE_INFO._UseForTag(pyxb.namespace.ExpandedName(None, 'SUPPORTED-DYN-IDS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1132, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DYN_ID_DEF_MODE_INFO._UseForTag(pyxb.namespace.ExpandedName(None, 'SELECTION-TABLE-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1133, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DYN_ID_DEF_MODE_INFO._Automaton = _BuildAutomaton_85()




DYN_ID_DEF_MODE_INFOS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DYN-ID-DEF-MODEINFO'), DYN_ID_DEF_MODE_INFO, scope=DYN_ID_DEF_MODE_INFOS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1139, 0)))

def _BuildAutomaton_86 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DYN_ID_DEF_MODE_INFOS._UseForTag(pyxb.namespace.ExpandedName(None, 'DYN-ID-DEF-MODEINFO')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1139, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DYN_ID_DEF_MODE_INFOS._Automaton = _BuildAutomaton_86()




ECU_GROUP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'GROUP-MEMBERS'), GROUP_MEMBERS, scope=ECU_GROUP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1159, 0)))

ECU_GROUP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=ECU_GROUP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

ECU_GROUP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=ECU_GROUP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

ECU_GROUP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=ECU_GROUP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_87 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ECU_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ECU_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ECU_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ECU_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'GROUP-MEMBERS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1159, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ECU_GROUP._Automaton = _BuildAutomaton_87()




ECU_GROUPS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ECU-GROUP'), ECU_GROUP, scope=ECU_GROUPS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1166, 0)))

def _BuildAutomaton_88 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ECU_GROUPS._UseForTag(pyxb.namespace.ExpandedName(None, 'ECU-GROUP')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1166, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ECU_GROUPS._Automaton = _BuildAutomaton_88()




ECU_MEM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), ADMIN_DATA, scope=ECU_MEM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1173, 0)))

ECU_MEM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MEM'), MEM, scope=ECU_MEM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1174, 0)))

ECU_MEM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PHYS-MEM'), PHYS_MEM, scope=ECU_MEM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1175, 0)))

ECU_MEM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDGS'), SDGS, scope=ECU_MEM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1176, 0)))

ECU_MEM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=ECU_MEM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

ECU_MEM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=ECU_MEM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

ECU_MEM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=ECU_MEM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_89 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1173, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1175, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1176, 0))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ECU_MEM._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ECU_MEM._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ECU_MEM._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ECU_MEM._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1173, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ECU_MEM._UseForTag(pyxb.namespace.ExpandedName(None, 'MEM')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1174, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ECU_MEM._UseForTag(pyxb.namespace.ExpandedName(None, 'PHYS-MEM')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1175, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ECU_MEM._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1176, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ECU_MEM._Automaton = _BuildAutomaton_89()




ECU_MEM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), ADMIN_DATA, scope=ECU_MEM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1185, 0)))

ECU_MEM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FLASH-CLASSS'), FLASH_CLASSS, scope=ECU_MEM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1186, 0)))

ECU_MEM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SESSION-DESCS'), SESSION_DESCS, scope=ECU_MEM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1187, 0)))

ECU_MEM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IDENT-DESCS'), IDENT_DESCS, scope=ECU_MEM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1188, 0)))

ECU_MEM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ECU-MEM-REF'), ODXLINK, scope=ECU_MEM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1189, 0)))

ECU_MEM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LAYER-REFS'), LAYER_REFS, scope=ECU_MEM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1190, 0)))

ECU_MEM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ALL-VARIANT-REFS'), ALL_VARIANT_REFS, scope=ECU_MEM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1191, 0)))

ECU_MEM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDGS'), SDGS, scope=ECU_MEM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1192, 0)))

ECU_MEM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=ECU_MEM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

ECU_MEM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=ECU_MEM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

ECU_MEM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=ECU_MEM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_90 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1185, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1186, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1187, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1188, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1190, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1191, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1192, 0))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ECU_MEM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ECU_MEM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ECU_MEM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ECU_MEM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1185, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ECU_MEM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'FLASH-CLASSS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1186, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ECU_MEM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'SESSION-DESCS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1187, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ECU_MEM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'IDENT-DESCS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1188, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ECU_MEM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'ECU-MEM-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1189, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ECU_MEM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'LAYER-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1190, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ECU_MEM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'ALL-VARIANT-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1191, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ECU_MEM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1192, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ECU_MEM_CONNECTOR._Automaton = _BuildAutomaton_90()




ECU_MEM_CONNECTORS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ECU-MEM-CONNECTOR'), ECU_MEM_CONNECTOR, scope=ECU_MEM_CONNECTORS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1200, 0)))

def _BuildAutomaton_91 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ECU_MEM_CONNECTORS._UseForTag(pyxb.namespace.ExpandedName(None, 'ECU-MEM-CONNECTOR')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1200, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ECU_MEM_CONNECTORS._Automaton = _BuildAutomaton_91()




ECU_MEMS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ECU-MEM'), ECU_MEM, scope=ECU_MEMS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1206, 0)))

def _BuildAutomaton_92 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ECU_MEMS._UseForTag(pyxb.namespace.ExpandedName(None, 'ECU-MEM')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1206, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ECU_MEMS._Automaton = _BuildAutomaton_92()




ECU_PROXY_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ECU-PROXY-REF'), ODXLINK, scope=ECU_PROXY_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1218, 0)))

def _BuildAutomaton_93 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ECU_PROXY_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'ECU-PROXY-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1218, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ECU_PROXY_REFS._Automaton = _BuildAutomaton_93()




ECU_SHARED_DATAS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ECU-SHARED-DATA'), ECU_SHARED_DATA, scope=ECU_SHARED_DATAS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1241, 0)))

def _BuildAutomaton_94 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_94
    del _BuildAutomaton_94
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ECU_SHARED_DATAS._UseForTag(pyxb.namespace.ExpandedName(None, 'ECU-SHARED-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1241, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ECU_SHARED_DATAS._Automaton = _BuildAutomaton_94()




ECU_VARIANT_PATTERN._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MATCHING-PARAMETERS'), MATCHING_PARAMETERS, scope=ECU_VARIANT_PATTERN, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1262, 0)))

def _BuildAutomaton_95 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_95
    del _BuildAutomaton_95
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANT_PATTERN._UseForTag(pyxb.namespace.ExpandedName(None, 'MATCHING-PARAMETERS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1262, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ECU_VARIANT_PATTERN._Automaton = _BuildAutomaton_95()




ECU_VARIANT_PATTERNS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ECU-VARIANT-PATTERN'), ECU_VARIANT_PATTERN, scope=ECU_VARIANT_PATTERNS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1268, 0)))

def _BuildAutomaton_96 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_96
    del _BuildAutomaton_96
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANT_PATTERNS._UseForTag(pyxb.namespace.ExpandedName(None, 'ECU-VARIANT-PATTERN')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1268, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ECU_VARIANT_PATTERNS._Automaton = _BuildAutomaton_96()




ECU_VARIANT_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ECU-VARIANT-REF'), ODXLINK, scope=ECU_VARIANT_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1274, 0)))

def _BuildAutomaton_97 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_97
    del _BuildAutomaton_97
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANT_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'ECU-VARIANT-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1274, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ECU_VARIANT_REFS._Automaton = _BuildAutomaton_97()




ECU_VARIANTS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ECU-VARIANT'), ECU_VARIANT, scope=ECU_VARIANTS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1280, 0)))

def _BuildAutomaton_98 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_98
    del _BuildAutomaton_98
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANTS._UseForTag(pyxb.namespace.ExpandedName(None, 'ECU-VARIANT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1280, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ECU_VARIANTS._Automaton = _BuildAutomaton_98()




ECU_VARIANT_SNREFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ECU-VARIANT-SNREF'), SNREF, scope=ECU_VARIANT_SNREFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1286, 0)))

def _BuildAutomaton_99 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_99
    del _BuildAutomaton_99
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANT_SNREFS._UseForTag(pyxb.namespace.ExpandedName(None, 'ECU-VARIANT-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1286, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ECU_VARIANT_SNREFS._Automaton = _BuildAutomaton_99()




ENABLED_AUDIENCE_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ENABLED-AUDIENCE-REF'), ODXLINK, scope=ENABLED_AUDIENCE_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1292, 0)))

def _BuildAutomaton_100 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_100
    del _BuildAutomaton_100
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ENABLED_AUDIENCE_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'ENABLED-AUDIENCE-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1292, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ENABLED_AUDIENCE_REFS._Automaton = _BuildAutomaton_100()




END_OF_PDU_FIELDS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'END-OF-PDU-FIELD'), END_OF_PDU_FIELD, scope=END_OF_PDU_FIELDS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1338, 0)))

def _BuildAutomaton_101 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_101
    del _BuildAutomaton_101
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(END_OF_PDU_FIELDS._UseForTag(pyxb.namespace.ExpandedName(None, 'END-OF-PDU-FIELD')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1338, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
END_OF_PDU_FIELDS._Automaton = _BuildAutomaton_101()




ENV_DATA_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ENV-DATA-DESC-REF'), ODXLINK, scope=ENV_DATA_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1356, 0)))

ENV_DATA_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ENV-DATA-SNREF'), SNREF, scope=ENV_DATA_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1357, 0)))

ENV_DATA_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=ENV_DATA_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

ENV_DATA_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=ENV_DATA_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

ENV_DATA_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=ENV_DATA_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_102 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_102
    del _BuildAutomaton_102
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ENV_DATA_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ENV_DATA_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ENV_DATA_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ENV_DATA_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'ENV-DATA-DESC-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1356, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ENV_DATA_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'ENV-DATA-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1357, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ENV_DATA_CONNECTOR._Automaton = _BuildAutomaton_102()




ENV_DATA_CONNECTORS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ENV-DATA-CONNECTOR'), ENV_DATA_CONNECTOR, scope=ENV_DATA_CONNECTORS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1363, 0)))

def _BuildAutomaton_103 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_103
    del _BuildAutomaton_103
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ENV_DATA_CONNECTORS._UseForTag(pyxb.namespace.ExpandedName(None, 'ENV-DATA-CONNECTOR')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1363, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ENV_DATA_CONNECTORS._Automaton = _BuildAutomaton_103()




ENV_DATA_DESCS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ENV-DATA-DESC'), ENV_DATA_DESC, scope=ENV_DATA_DESCS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1383, 0)))

def _BuildAutomaton_104 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_104
    del _BuildAutomaton_104
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ENV_DATA_DESCS._UseForTag(pyxb.namespace.ExpandedName(None, 'ENV-DATA-DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1383, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ENV_DATA_DESCS._Automaton = _BuildAutomaton_104()




ENV_DATA_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ENV-DATA-REF'), ODXLINK, scope=ENV_DATA_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1389, 0)))

def _BuildAutomaton_105 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_105
    del _BuildAutomaton_105
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ENV_DATA_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'ENV-DATA-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1389, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ENV_DATA_REFS._Automaton = _BuildAutomaton_105()




ENV_DATAS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ENV-DATA'), ENV_DATA, scope=ENV_DATAS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1395, 0)))

def _BuildAutomaton_106 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_106
    del _BuildAutomaton_106
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ENV_DATAS._UseForTag(pyxb.namespace.ExpandedName(None, 'ENV-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1395, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ENV_DATAS._Automaton = _BuildAutomaton_106()




EXPECTED_IDENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IDENT-VALUES'), IDENT_VALUES, scope=EXPECTED_IDENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1402, 0)))

EXPECTED_IDENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=EXPECTED_IDENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

EXPECTED_IDENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=EXPECTED_IDENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

EXPECTED_IDENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=EXPECTED_IDENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_107 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_107
    del _BuildAutomaton_107
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EXPECTED_IDENT._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EXPECTED_IDENT._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EXPECTED_IDENT._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EXPECTED_IDENT._UseForTag(pyxb.namespace.ExpandedName(None, 'IDENT-VALUES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1402, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EXPECTED_IDENT._Automaton = _BuildAutomaton_107()




EXPECTED_IDENTS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EXPECTED-IDENT'), EXPECTED_IDENT, scope=EXPECTED_IDENTS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1410, 0)))

def _BuildAutomaton_108 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_108
    del _BuildAutomaton_108
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EXPECTED_IDENTS._UseForTag(pyxb.namespace.ExpandedName(None, 'EXPECTED-IDENT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1410, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EXPECTED_IDENTS._Automaton = _BuildAutomaton_108()




EXTERNAL_ACCESS_METHOD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'METHOD'), pyxb.binding.datatypes.string, scope=EXTERNAL_ACCESS_METHOD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1417, 0)))

EXTERNAL_ACCESS_METHOD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=EXTERNAL_ACCESS_METHOD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

EXTERNAL_ACCESS_METHOD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=EXTERNAL_ACCESS_METHOD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

EXTERNAL_ACCESS_METHOD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=EXTERNAL_ACCESS_METHOD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_109 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_109
    del _BuildAutomaton_109
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EXTERNAL_ACCESS_METHOD._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EXTERNAL_ACCESS_METHOD._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EXTERNAL_ACCESS_METHOD._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EXTERNAL_ACCESS_METHOD._UseForTag(pyxb.namespace.ExpandedName(None, 'METHOD')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1417, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EXTERNAL_ACCESS_METHOD._Automaton = _BuildAutomaton_109()




EXTERNAL_DOCS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EXTERNAL-DOC'), EXTERNAL_DOC, scope=EXTERNAL_DOCS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1433, 0)))

def _BuildAutomaton_110 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_110
    del _BuildAutomaton_110
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EXTERNAL_DOCS._UseForTag(pyxb.namespace.ExpandedName(None, 'EXTERNAL-DOC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1433, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EXTERNAL_DOCS._Automaton = _BuildAutomaton_110()




FILTER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FILTER-START'), pyxb.binding.datatypes.hexBinary, scope=FILTER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1467, 0)))

def _BuildAutomaton_111 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_111
    del _BuildAutomaton_111
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FILTER._UseForTag(pyxb.namespace.ExpandedName(None, 'FILTER-START')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1467, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FILTER._Automaton = _BuildAutomaton_111()




FILTERS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FILTER'), FILTER, scope=FILTERS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1473, 0)))

def _BuildAutomaton_112 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_112
    del _BuildAutomaton_112
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FILTERS._UseForTag(pyxb.namespace.ExpandedName(None, 'FILTER')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1473, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FILTERS._Automaton = _BuildAutomaton_112()




FLASH_CLASS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=FLASH_CLASS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

FLASH_CLASS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=FLASH_CLASS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

FLASH_CLASS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=FLASH_CLASS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_113 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_113
    del _BuildAutomaton_113
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FLASH_CLASS._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(FLASH_CLASS._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(FLASH_CLASS._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FLASH_CLASS._Automaton = _BuildAutomaton_113()




FLASH_CLASS_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FLASH-CLASS-REF'), ODXLINK, scope=FLASH_CLASS_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1500, 0)))

def _BuildAutomaton_114 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_114
    del _BuildAutomaton_114
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FLASH_CLASS_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'FLASH-CLASS-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1500, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FLASH_CLASS_REFS._Automaton = _BuildAutomaton_114()




FLASH_CLASSS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FLASH-CLASS'), FLASH_CLASS, scope=FLASH_CLASSS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1506, 0)))

def _BuildAutomaton_115 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_115
    del _BuildAutomaton_115
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FLASH_CLASSS._UseForTag(pyxb.namespace.ExpandedName(None, 'FLASH-CLASS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1506, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FLASH_CLASSS._Automaton = _BuildAutomaton_115()




FLASHDATA._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SIZE-LENGTH'), pyxb.binding.datatypes.unsignedInt, scope=FLASHDATA, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1513, 0)))

FLASHDATA._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ADDRESS-LENGTH'), pyxb.binding.datatypes.unsignedInt, scope=FLASHDATA, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1514, 0)))

FLASHDATA._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DATAFORMAT'), DATAFORMAT, scope=FLASHDATA, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1515, 0)))

FLASHDATA._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ENCRYPT-COMPRESS-METHOD'), ENCRYPT_COMPRESS_METHOD, scope=FLASHDATA, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1516, 0)))

FLASHDATA._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=FLASHDATA, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

FLASHDATA._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=FLASHDATA, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

FLASHDATA._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=FLASHDATA, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_116 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_116
    del _BuildAutomaton_116
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1513, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1514, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1516, 0))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FLASHDATA._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FLASHDATA._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FLASHDATA._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FLASHDATA._UseForTag(pyxb.namespace.ExpandedName(None, 'SIZE-LENGTH')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1513, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FLASHDATA._UseForTag(pyxb.namespace.ExpandedName(None, 'ADDRESS-LENGTH')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1514, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FLASHDATA._UseForTag(pyxb.namespace.ExpandedName(None, 'DATAFORMAT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1515, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(FLASHDATA._UseForTag(pyxb.namespace.ExpandedName(None, 'ENCRYPT-COMPRESS-METHOD')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1516, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FLASHDATA._Automaton = _BuildAutomaton_116()




FLASHDATAS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FLASHDATA'), FLASHDATA, scope=FLASHDATAS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1524, 0)))

def _BuildAutomaton_117 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_117
    del _BuildAutomaton_117
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FLASHDATAS._UseForTag(pyxb.namespace.ExpandedName(None, 'FLASHDATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1524, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FLASHDATAS._Automaton = _BuildAutomaton_117()




FUNCT_CLASS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), ADMIN_DATA, scope=FUNCT_CLASS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1531, 0)))

FUNCT_CLASS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=FUNCT_CLASS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

FUNCT_CLASS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=FUNCT_CLASS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

FUNCT_CLASS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=FUNCT_CLASS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_118 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_118
    del _BuildAutomaton_118
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1531, 0))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FUNCT_CLASS._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(FUNCT_CLASS._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(FUNCT_CLASS._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(FUNCT_CLASS._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1531, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FUNCT_CLASS._Automaton = _BuildAutomaton_118()




FUNCT_CLASS_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASS-REF'), ODXLINK, scope=FUNCT_CLASS_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1539, 0)))

def _BuildAutomaton_119 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_119
    del _BuildAutomaton_119
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FUNCT_CLASS_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASS-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1539, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FUNCT_CLASS_REFS._Automaton = _BuildAutomaton_119()




FUNCT_CLASSS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASS'), FUNCT_CLASS, scope=FUNCT_CLASSS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1545, 0)))

def _BuildAutomaton_120 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_120
    del _BuildAutomaton_120
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FUNCT_CLASSS._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1545, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FUNCT_CLASSS._Automaton = _BuildAutomaton_120()




FUNCTIONAL_GROUPS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FUNCTIONAL-GROUP'), FUNCTIONAL_GROUP, scope=FUNCTIONAL_GROUPS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1569, 0)))

def _BuildAutomaton_121 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_121
    del _BuildAutomaton_121
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FUNCTIONAL_GROUPS._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCTIONAL-GROUP')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1569, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FUNCTIONAL_GROUPS._Automaton = _BuildAutomaton_121()




FUNCTION_DIAG_COMM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LOGICAL-LINK-REF'), ODXLINK, scope=FUNCTION_DIAG_COMM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1575, 0)))

FUNCTION_DIAG_COMM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-REF'), ODXLINK, scope=FUNCTION_DIAG_COMM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1576, 0)))

def _BuildAutomaton_122 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_122
    del _BuildAutomaton_122
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1575, 0))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FUNCTION_DIAG_COMM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'LOGICAL-LINK-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1575, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FUNCTION_DIAG_COMM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1576, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FUNCTION_DIAG_COMM_CONNECTOR._Automaton = _BuildAutomaton_122()




FUNCTION_DIAG_COMM_CONNECTORS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FUNCTIONDIAG-COMM-CONNECTOR'), FUNCTION_DIAG_COMM_CONNECTOR, scope=FUNCTION_DIAG_COMM_CONNECTORS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1582, 0)))

def _BuildAutomaton_123 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_123
    del _BuildAutomaton_123
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FUNCTION_DIAG_COMM_CONNECTORS._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCTIONDIAG-COMM-CONNECTOR')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1582, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FUNCTION_DIAG_COMM_CONNECTORS._Automaton = _BuildAutomaton_123()




FUNCTION_IN_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UNIT-REF'), ODXLINK, scope=FUNCTION_IN_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1603, 0)))

FUNCTION_IN_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PHYSICAL-TYPE'), PHYSICAL_TYPE, scope=FUNCTION_IN_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1604, 0)))

FUNCTION_IN_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNREF'), SNREF, scope=FUNCTION_IN_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1605, 0)))

FUNCTION_IN_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FUNCTION-DIAG-COMMCONNECTOR'), FUNCTION_DIAG_COMM_CONNECTOR, scope=FUNCTION_IN_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1606, 0)))

FUNCTION_IN_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=FUNCTION_IN_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

FUNCTION_IN_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=FUNCTION_IN_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

FUNCTION_IN_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=FUNCTION_IN_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_124 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_124
    del _BuildAutomaton_124
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1603, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1605, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1606, 0))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FUNCTION_IN_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FUNCTION_IN_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FUNCTION_IN_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FUNCTION_IN_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'UNIT-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1603, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FUNCTION_IN_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'PHYSICAL-TYPE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1604, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_IN_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1605, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_IN_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCTION-DIAG-COMMCONNECTOR')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1606, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FUNCTION_IN_PARAM._Automaton = _BuildAutomaton_124()




FUNCTION_IN_PARAMS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FUNCTION-IN-PARAM'), FUNCTION_IN_PARAM, scope=FUNCTION_IN_PARAMS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1612, 0)))

def _BuildAutomaton_125 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_125
    del _BuildAutomaton_125
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FUNCTION_IN_PARAMS._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCTION-IN-PARAM')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1612, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FUNCTION_IN_PARAMS._Automaton = _BuildAutomaton_125()




FUNCTION_NODE_GROUPS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FUNCTION-NODE-GROUP'), FUNCTION_NODE_GROUP, scope=FUNCTION_NODE_GROUPS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1640, 0)))

def _BuildAutomaton_126 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_126
    del _BuildAutomaton_126
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FUNCTION_NODE_GROUPS._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCTION-NODE-GROUP')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1640, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FUNCTION_NODE_GROUPS._Automaton = _BuildAutomaton_126()




FUNCTION_NODE_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FUNCTION-NODE-REF'), ODXLINK, scope=FUNCTION_NODE_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1646, 0)))

def _BuildAutomaton_127 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_127
    del _BuildAutomaton_127
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FUNCTION_NODE_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCTION-NODE-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1646, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FUNCTION_NODE_REFS._Automaton = _BuildAutomaton_127()




FUNCTION_NODES._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FUNCTION-NODE'), FUNCTION_NODE, scope=FUNCTION_NODES, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1652, 0)))

def _BuildAutomaton_128 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_128
    del _BuildAutomaton_128
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FUNCTION_NODES._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCTION-NODE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1652, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FUNCTION_NODES._Automaton = _BuildAutomaton_128()




FUNCTION_OUT_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UNIT-REF'), ODXLINK, scope=FUNCTION_OUT_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1659, 0)))

FUNCTION_OUT_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PHYSICAL-TYPE'), PHYSICAL_TYPE, scope=FUNCTION_OUT_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1660, 0)))

FUNCTION_OUT_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNREF'), SNREF, scope=FUNCTION_OUT_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1661, 0)))

FUNCTION_OUT_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FUNCTION-DIAG-COMMCONNECTOR'), FUNCTION_DIAG_COMM_CONNECTOR, scope=FUNCTION_OUT_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1662, 0)))

FUNCTION_OUT_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=FUNCTION_OUT_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

FUNCTION_OUT_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=FUNCTION_OUT_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

FUNCTION_OUT_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=FUNCTION_OUT_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_129 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_129
    del _BuildAutomaton_129
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1659, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1661, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1662, 0))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FUNCTION_OUT_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FUNCTION_OUT_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FUNCTION_OUT_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FUNCTION_OUT_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'UNIT-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1659, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FUNCTION_OUT_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'PHYSICAL-TYPE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1660, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_OUT_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1661, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_OUT_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCTION-DIAG-COMMCONNECTOR')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1662, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FUNCTION_OUT_PARAM._Automaton = _BuildAutomaton_129()




FUNCTION_OUT_PARAMS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FUNCTION-OUT-PARAM'), FUNCTION_OUT_PARAM, scope=FUNCTION_OUT_PARAMS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1668, 0)))

def _BuildAutomaton_130 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_130
    del _BuildAutomaton_130
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FUNCTION_OUT_PARAMS._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCTION-OUT-PARAM')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1668, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FUNCTION_OUT_PARAMS._Automaton = _BuildAutomaton_130()




GATEWAY_LOGICAL_LINK_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'GATEWAY-LOGICAL-LINK-REF'), ODXLINK, scope=GATEWAY_LOGICAL_LINK_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1700, 0)))

def _BuildAutomaton_131 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_131
    del _BuildAutomaton_131
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GATEWAY_LOGICAL_LINK_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'GATEWAY-LOGICAL-LINK-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1700, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GATEWAY_LOGICAL_LINK_REFS._Automaton = _BuildAutomaton_131()




GLOBAL_NEG_RESPONSES._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'GLOBAL-NEG-RESPONSE'), GLOBAL_NEG_RESPONSE, scope=GLOBAL_NEG_RESPONSES, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1712, 0)))

def _BuildAutomaton_132 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_132
    del _BuildAutomaton_132
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GLOBAL_NEG_RESPONSES._UseForTag(pyxb.namespace.ExpandedName(None, 'GLOBAL-NEG-RESPONSE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1712, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GLOBAL_NEG_RESPONSES._Automaton = _BuildAutomaton_132()




GROUP_MEMBER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BASE-VARIANT-REF'), ODXLINK, scope=GROUP_MEMBER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1718, 0)))

GROUP_MEMBER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FUNCT-RESOLUTION-LINK-REF'), ODXLINK, scope=GROUP_MEMBER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1719, 0)))

GROUP_MEMBER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PHYS-RESOLUTION-LINK-REF'), ODXLINK, scope=GROUP_MEMBER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1720, 0)))

def _BuildAutomaton_133 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_133
    del _BuildAutomaton_133
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1719, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1720, 0))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GROUP_MEMBER._UseForTag(pyxb.namespace.ExpandedName(None, 'BASE-VARIANT-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1718, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(GROUP_MEMBER._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCT-RESOLUTION-LINK-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1719, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(GROUP_MEMBER._UseForTag(pyxb.namespace.ExpandedName(None, 'PHYS-RESOLUTION-LINK-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1720, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GROUP_MEMBER._Automaton = _BuildAutomaton_133()




GROUP_MEMBERS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'GROUP-MEMBER'), GROUP_MEMBER, scope=GROUP_MEMBERS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1726, 0)))

def _BuildAutomaton_134 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_134
    del _BuildAutomaton_134
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GROUP_MEMBERS._UseForTag(pyxb.namespace.ExpandedName(None, 'GROUP-MEMBER')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1726, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GROUP_MEMBERS._Automaton = _BuildAutomaton_134()




IDENT_DESC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-SNREF'), SNREF, scope=IDENT_DESC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1742, 0)))

IDENT_DESC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IDENT-IF-SNREF'), SNREF, scope=IDENT_DESC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1743, 0)))

IDENT_DESC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNREF'), SNREF, scope=IDENT_DESC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1745, 0)))

IDENT_DESC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNPATHREF'), SNPATHREF, scope=IDENT_DESC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1746, 0)))

def _BuildAutomaton_135 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_135
    del _BuildAutomaton_135
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(IDENT_DESC._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1742, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(IDENT_DESC._UseForTag(pyxb.namespace.ExpandedName(None, 'IDENT-IF-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1743, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(IDENT_DESC._UseForTag(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1745, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(IDENT_DESC._UseForTag(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNPATHREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1746, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
IDENT_DESC._Automaton = _BuildAutomaton_135()




IDENT_DESCS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IDENT-DESC'), IDENT_DESC, scope=IDENT_DESCS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1753, 0)))

def _BuildAutomaton_136 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_136
    del _BuildAutomaton_136
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(IDENT_DESCS._UseForTag(pyxb.namespace.ExpandedName(None, 'IDENT-DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1753, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
IDENT_DESCS._Automaton = _BuildAutomaton_136()




IDENT_VALUES._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IDENT-VALUE'), IDENT_VALUE, scope=IDENT_VALUES, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1767, 0)))

def _BuildAutomaton_137 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_137
    del _BuildAutomaton_137
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(IDENT_VALUES._UseForTag(pyxb.namespace.ExpandedName(None, 'IDENT-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1767, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
IDENT_VALUES._Automaton = _BuildAutomaton_137()




IMPORT_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IMPORT-REF'), ODXLINK, scope=IMPORT_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1780, 0)))

def _BuildAutomaton_138 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_138
    del _BuildAutomaton_138
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(IMPORT_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'IMPORT-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1780, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
IMPORT_REFS._Automaton = _BuildAutomaton_138()




INFO_COMPONENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MATCHING-COMPONENTS'), MATCHING_COMPONENTS, scope=INFO_COMPONENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1787, 0)))

INFO_COMPONENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=INFO_COMPONENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

INFO_COMPONENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=INFO_COMPONENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

INFO_COMPONENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=INFO_COMPONENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_139 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_139
    del _BuildAutomaton_139
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1787, 0))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(INFO_COMPONENT._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(INFO_COMPONENT._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(INFO_COMPONENT._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(INFO_COMPONENT._UseForTag(pyxb.namespace.ExpandedName(None, 'MATCHING-COMPONENTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1787, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
INFO_COMPONENT._Automaton = _BuildAutomaton_139()




INFO_COMPONENT_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'INFO-COMPONENT-REF'), ODXLINK, scope=INFO_COMPONENT_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1795, 0)))

def _BuildAutomaton_140 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_140
    del _BuildAutomaton_140
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(INFO_COMPONENT_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'INFO-COMPONENT-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1795, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
INFO_COMPONENT_REFS._Automaton = _BuildAutomaton_140()




INFO_COMPONENTS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'INFO-COMPONENT'), INFO_COMPONENT, scope=INFO_COMPONENTS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1801, 0)))

def _BuildAutomaton_141 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_141
    del _BuildAutomaton_141
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(INFO_COMPONENTS._UseForTag(pyxb.namespace.ExpandedName(None, 'INFO-COMPONENT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1801, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
INFO_COMPONENTS._Automaton = _BuildAutomaton_141()




IN_PARAM_IF_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNREF'), SNREF, scope=IN_PARAM_IF_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1807, 0)))

IN_PARAM_IF_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNPATHREF'), SNPATHREF, scope=IN_PARAM_IF_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1808, 0)))

def _BuildAutomaton_142 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_142
    del _BuildAutomaton_142
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(IN_PARAM_IF_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1807, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(IN_PARAM_IF_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNPATHREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1808, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
IN_PARAM_IF_REFS._Automaton = _BuildAutomaton_142()




INPUT_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PHYSICAL-DEFAULT-VALUE'), pyxb.binding.datatypes.string, scope=INPUT_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1815, 0)))

INPUT_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DOP-BASE-REF'), ODXLINK, scope=INPUT_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1816, 0)))

INPUT_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=INPUT_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

INPUT_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=INPUT_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

INPUT_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=INPUT_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_143 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_143
    del _BuildAutomaton_143
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1815, 0))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(INPUT_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(INPUT_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(INPUT_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(INPUT_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'PHYSICAL-DEFAULT-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1815, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(INPUT_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'DOP-BASE-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1816, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
INPUT_PARAM._Automaton = _BuildAutomaton_143()




INPUT_PARAMS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'INPUT-PARAM'), INPUT_PARAM, scope=INPUT_PARAMS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1824, 0)))

def _BuildAutomaton_144 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_144
    del _BuildAutomaton_144
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(INPUT_PARAMS._UseForTag(pyxb.namespace.ExpandedName(None, 'INPUT-PARAM')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1824, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
INPUT_PARAMS._Automaton = _BuildAutomaton_144()




INTERNAL_CONSTR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LOWER-LIMIT'), LIMIT, scope=INTERNAL_CONSTR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1830, 0)))

INTERNAL_CONSTR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UPPER-LIMIT'), LIMIT, scope=INTERNAL_CONSTR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1831, 0)))

INTERNAL_CONSTR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SCALE-CONSTRS'), SCALE_CONSTRS, scope=INTERNAL_CONSTR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1832, 0)))

def _BuildAutomaton_145 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_145
    del _BuildAutomaton_145
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1830, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1831, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1832, 0))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(INTERNAL_CONSTR._UseForTag(pyxb.namespace.ExpandedName(None, 'LOWER-LIMIT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1830, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(INTERNAL_CONSTR._UseForTag(pyxb.namespace.ExpandedName(None, 'UPPER-LIMIT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1831, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(INTERNAL_CONSTR._UseForTag(pyxb.namespace.ExpandedName(None, 'SCALE-CONSTRS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1832, 0))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
INTERNAL_CONSTR._Automaton = _BuildAutomaton_145()




ITEM_VALUE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PHYS-CONSTANT-VALUE'), pyxb.binding.datatypes.string, scope=ITEM_VALUE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1855, 0)))

ITEM_VALUE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MEANING'), TEXT, scope=ITEM_VALUE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1856, 0)))

ITEM_VALUE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'KEY'), pyxb.binding.datatypes.string, scope=ITEM_VALUE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1857, 0)))

ITEM_VALUE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RULE'), pyxb.binding.datatypes.string, scope=ITEM_VALUE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1858, 0)))

ITEM_VALUE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESCRIPTION'), TEXT, scope=ITEM_VALUE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1859, 0)))

ITEM_VALUE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDGS'), SDGS, scope=ITEM_VALUE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1860, 0)))

ITEM_VALUE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AUDIENCE'), AUDIENCE, scope=ITEM_VALUE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1861, 0)))

def _BuildAutomaton_146 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_146
    del _BuildAutomaton_146
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1856, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1857, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1858, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1859, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1860, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1861, 0))
    counters.add(cc_5)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ITEM_VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'PHYS-CONSTANT-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1855, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ITEM_VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'MEANING')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1856, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ITEM_VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'KEY')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1857, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ITEM_VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'RULE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1858, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ITEM_VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'DESCRIPTION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1859, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ITEM_VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1860, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ITEM_VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'AUDIENCE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1861, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ITEM_VALUE._Automaton = _BuildAutomaton_146()




ITEM_VALUES._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ITEM-VALUE'), ITEM_VALUE, scope=ITEM_VALUES, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1867, 0)))

def _BuildAutomaton_147 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_147
    del _BuildAutomaton_147
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ITEM_VALUES._UseForTag(pyxb.namespace.ExpandedName(None, 'ITEM-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1867, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ITEM_VALUES._Automaton = _BuildAutomaton_147()




LAYER_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LAYER-REF'), ODXLINK, scope=LAYER_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1873, 0)))

def _BuildAutomaton_148 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_148
    del _BuildAutomaton_148
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(LAYER_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'LAYER-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1873, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
LAYER_REFS._Automaton = _BuildAutomaton_148()




LIBRARY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CODE-FILE'), pyxb.binding.datatypes.string, scope=LIBRARY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1908, 0)))

LIBRARY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ENCRYPTION'), pyxb.binding.datatypes.string, scope=LIBRARY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1909, 0)))

LIBRARY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SYNTAX'), pyxb.binding.datatypes.string, scope=LIBRARY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1910, 0)))

LIBRARY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'REVISION'), pyxb.binding.datatypes.string, scope=LIBRARY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1911, 0)))

LIBRARY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ENTRYPOINT'), pyxb.binding.datatypes.string, scope=LIBRARY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1912, 0)))

LIBRARY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=LIBRARY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

LIBRARY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=LIBRARY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

LIBRARY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=LIBRARY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_149 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_149
    del _BuildAutomaton_149
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1909, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1912, 0))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LIBRARY._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LIBRARY._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LIBRARY._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LIBRARY._UseForTag(pyxb.namespace.ExpandedName(None, 'CODE-FILE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1908, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LIBRARY._UseForTag(pyxb.namespace.ExpandedName(None, 'ENCRYPTION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1909, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LIBRARY._UseForTag(pyxb.namespace.ExpandedName(None, 'SYNTAX')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1910, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(LIBRARY._UseForTag(pyxb.namespace.ExpandedName(None, 'REVISION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1911, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(LIBRARY._UseForTag(pyxb.namespace.ExpandedName(None, 'ENTRYPOINT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1912, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
LIBRARY._Automaton = _BuildAutomaton_149()




LIBRARY_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LIBRARY-REF'), ODXLINK, scope=LIBRARY_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1920, 0)))

def _BuildAutomaton_150 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_150
    del _BuildAutomaton_150
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(LIBRARY_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'LIBRARY-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1920, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
LIBRARY_REFS._Automaton = _BuildAutomaton_150()




LIBRARYS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LIBRARY'), LIBRARY, scope=LIBRARYS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1926, 0)))

def _BuildAutomaton_151 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_151
    del _BuildAutomaton_151
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(LIBRARYS._UseForTag(pyxb.namespace.ExpandedName(None, 'LIBRARY')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1926, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
LIBRARYS._Automaton = _BuildAutomaton_151()




LINK_COMPARAM_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LINK-COMPARAM-REF'), LINK_COMPARAM_REF, scope=LINK_COMPARAM_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1951, 0)))

def _BuildAutomaton_152 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_152
    del _BuildAutomaton_152
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(LINK_COMPARAM_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'LINK-COMPARAM-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1951, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
LINK_COMPARAM_REFS._Automaton = _BuildAutomaton_152()




LINKED_DTC_DOP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-DTC-SNREFS'), NOT_INHERITED_DTC_SNREFS, scope=LINKED_DTC_DOP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1957, 0)))

LINKED_DTC_DOP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DTC-DOP-REF'), ODXLINK, scope=LINKED_DTC_DOP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1959, 0)))

def _BuildAutomaton_153 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_153
    del _BuildAutomaton_153
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1957, 0))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LINKED_DTC_DOP._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-DTC-SNREFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1957, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(LINKED_DTC_DOP._UseForTag(pyxb.namespace.ExpandedName(None, 'DTC-DOP-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1959, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
LINKED_DTC_DOP._Automaton = _BuildAutomaton_153()




LINKED_DTC_DOPS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LINKED-DTC-DOP'), LINKED_DTC_DOP, scope=LINKED_DTC_DOPS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1965, 0)))

def _BuildAutomaton_154 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_154
    del _BuildAutomaton_154
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(LINKED_DTC_DOPS._UseForTag(pyxb.namespace.ExpandedName(None, 'LINKED-DTC-DOP')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1965, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
LINKED_DTC_DOPS._Automaton = _BuildAutomaton_154()




LOGICAL_LINK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'GATEWAY-LOGICAL-LINK-REFS'), GATEWAY_LOGICAL_LINK_REFS, scope=LOGICAL_LINK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1972, 0)))

LOGICAL_LINK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PHYSICAL-VEHICLE-LINK-REF'), ODXLINK, scope=LOGICAL_LINK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1974, 0)))

LOGICAL_LINK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PROTOCOL-REF'), ODXLINK, scope=LOGICAL_LINK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1975, 0)))

LOGICAL_LINK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FUNCTIONAL-GROUP-REF'), ODXLINK, scope=LOGICAL_LINK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1976, 0)))

LOGICAL_LINK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BASE-VARIANT-REF'), ODXLINK, scope=LOGICAL_LINK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1977, 0)))

LOGICAL_LINK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ECU-PROXY-REFS'), ECU_PROXY_REFS, scope=LOGICAL_LINK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1978, 0)))

LOGICAL_LINK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LINK-COMPARAM-REFS'), LINK_COMPARAM_REFS, scope=LOGICAL_LINK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1979, 0)))

LOGICAL_LINK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PROT-STACK-SNREF'), SNREF, scope=LOGICAL_LINK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1980, 0)))

LOGICAL_LINK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=LOGICAL_LINK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

LOGICAL_LINK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=LOGICAL_LINK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

LOGICAL_LINK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=LOGICAL_LINK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_155 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_155
    del _BuildAutomaton_155
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1972, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1975, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1976, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1977, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1978, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1979, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1980, 0))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'GATEWAY-LOGICAL-LINK-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1972, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'PHYSICAL-VEHICLE-LINK-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1974, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'PROTOCOL-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1975, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCTIONAL-GROUP-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1976, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'BASE-VARIANT-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1977, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'ECU-PROXY-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1978, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'LINK-COMPARAM-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1979, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'PROT-STACK-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1980, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
LOGICAL_LINK._Automaton = _BuildAutomaton_155()




LOGICAL_LINKS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LOGICAL-LINK'), LOGICAL_LINK, scope=LOGICAL_LINKS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1988, 0)))

def _BuildAutomaton_156 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_156
    del _BuildAutomaton_156
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(LOGICAL_LINKS._UseForTag(pyxb.namespace.ExpandedName(None, 'LOGICAL-LINK')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1988, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
LOGICAL_LINKS._Automaton = _BuildAutomaton_156()




MATCHING_BASE_VARIANT_PARAMETER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EXPECTED-VALUE'), pyxb.binding.datatypes.string, scope=MATCHING_BASE_VARIANT_PARAMETER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2002, 0)))

MATCHING_BASE_VARIANT_PARAMETER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'USE-PHYSICAL-ADDRESSING'), pyxb.binding.datatypes.boolean, scope=MATCHING_BASE_VARIANT_PARAMETER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2003, 0)))

MATCHING_BASE_VARIANT_PARAMETER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-SNREF'), SNREF, scope=MATCHING_BASE_VARIANT_PARAMETER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2004, 0)))

MATCHING_BASE_VARIANT_PARAMETER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNREF'), SNREF, scope=MATCHING_BASE_VARIANT_PARAMETER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2006, 0)))

MATCHING_BASE_VARIANT_PARAMETER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNPATHREF'), SNPATHREF, scope=MATCHING_BASE_VARIANT_PARAMETER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2007, 0)))

def _BuildAutomaton_157 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_157
    del _BuildAutomaton_157
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2003, 0))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MATCHING_BASE_VARIANT_PARAMETER._UseForTag(pyxb.namespace.ExpandedName(None, 'EXPECTED-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2002, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MATCHING_BASE_VARIANT_PARAMETER._UseForTag(pyxb.namespace.ExpandedName(None, 'USE-PHYSICAL-ADDRESSING')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2003, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MATCHING_BASE_VARIANT_PARAMETER._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2004, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MATCHING_BASE_VARIANT_PARAMETER._UseForTag(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2006, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MATCHING_BASE_VARIANT_PARAMETER._UseForTag(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNPATHREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2007, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MATCHING_BASE_VARIANT_PARAMETER._Automaton = _BuildAutomaton_157()




MATCHING_BASE_VARIANT_PARAMETERS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MATCHINGBASE-VARIANT-PARAMETER'), MATCHING_BASE_VARIANT_PARAMETER, scope=MATCHING_BASE_VARIANT_PARAMETERS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2014, 0)))

def _BuildAutomaton_158 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_158
    del _BuildAutomaton_158
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MATCHING_BASE_VARIANT_PARAMETERS._UseForTag(pyxb.namespace.ExpandedName(None, 'MATCHINGBASE-VARIANT-PARAMETER')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2014, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MATCHING_BASE_VARIANT_PARAMETERS._Automaton = _BuildAutomaton_158()




MATCHING_COMPONENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EXPECTED-VALUE'), pyxb.binding.datatypes.string, scope=MATCHING_COMPONENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2020, 0)))

MATCHING_COMPONENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNREF'), SNREF, scope=MATCHING_COMPONENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2022, 0)))

MATCHING_COMPONENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNPATHREF'), SNPATHREF, scope=MATCHING_COMPONENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2023, 0)))

MATCHING_COMPONENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MULTIPLE-ECU-JOB-REF'), ODXLINK, scope=MATCHING_COMPONENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2026, 0)))

MATCHING_COMPONENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-REF'), ODXLINK, scope=MATCHING_COMPONENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2027, 0)))

def _BuildAutomaton_159 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_159
    del _BuildAutomaton_159
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MATCHING_COMPONENT._UseForTag(pyxb.namespace.ExpandedName(None, 'EXPECTED-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2020, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MATCHING_COMPONENT._UseForTag(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2022, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MATCHING_COMPONENT._UseForTag(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNPATHREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2023, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MATCHING_COMPONENT._UseForTag(pyxb.namespace.ExpandedName(None, 'MULTIPLE-ECU-JOB-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2026, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MATCHING_COMPONENT._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2027, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MATCHING_COMPONENT._Automaton = _BuildAutomaton_159()




MATCHING_COMPONENTS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MATCHING-COMPONENT'), MATCHING_COMPONENT, scope=MATCHING_COMPONENTS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2034, 0)))

def _BuildAutomaton_160 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_160
    del _BuildAutomaton_160
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MATCHING_COMPONENTS._UseForTag(pyxb.namespace.ExpandedName(None, 'MATCHING-COMPONENT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2034, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MATCHING_COMPONENTS._Automaton = _BuildAutomaton_160()




MATCHING_PARAMETER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EXPECTED-VALUE'), pyxb.binding.datatypes.string, scope=MATCHING_PARAMETER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2040, 0)))

MATCHING_PARAMETER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-SNREF'), SNREF, scope=MATCHING_PARAMETER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2041, 0)))

MATCHING_PARAMETER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNREF'), SNREF, scope=MATCHING_PARAMETER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2043, 0)))

MATCHING_PARAMETER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNPATHREF'), SNPATHREF, scope=MATCHING_PARAMETER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2044, 0)))

def _BuildAutomaton_161 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_161
    del _BuildAutomaton_161
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MATCHING_PARAMETER._UseForTag(pyxb.namespace.ExpandedName(None, 'EXPECTED-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2040, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MATCHING_PARAMETER._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2041, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MATCHING_PARAMETER._UseForTag(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2043, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MATCHING_PARAMETER._UseForTag(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNPATHREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2044, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MATCHING_PARAMETER._Automaton = _BuildAutomaton_161()




MATCHING_PARAMETERS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MATCHING-PARAMETER'), MATCHING_PARAMETER, scope=MATCHING_PARAMETERS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2051, 0)))

def _BuildAutomaton_162 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_162
    del _BuildAutomaton_162
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MATCHING_PARAMETERS._UseForTag(pyxb.namespace.ExpandedName(None, 'MATCHING-PARAMETER')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2051, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MATCHING_PARAMETERS._Automaton = _BuildAutomaton_162()




MEM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SESSIONS'), SESSIONS, scope=MEM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2068, 0)))

MEM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DATABLOCKS'), DATABLOCKS, scope=MEM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2069, 0)))

MEM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FLASHDATAS'), FLASHDATAS, scope=MEM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2070, 0)))

def _BuildAutomaton_163 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_163
    del _BuildAutomaton_163
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MEM._UseForTag(pyxb.namespace.ExpandedName(None, 'SESSIONS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2068, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MEM._UseForTag(pyxb.namespace.ExpandedName(None, 'DATABLOCKS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2069, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MEM._UseForTag(pyxb.namespace.ExpandedName(None, 'FLASHDATAS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2070, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MEM._Automaton = _BuildAutomaton_163()




MODIFICATION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CHANGE'), pyxb.binding.datatypes.string, scope=MODIFICATION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2100, 0)))

MODIFICATION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'REASON'), pyxb.binding.datatypes.string, scope=MODIFICATION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2101, 0)))

def _BuildAutomaton_164 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_164
    del _BuildAutomaton_164
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2101, 0))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MODIFICATION._UseForTag(pyxb.namespace.ExpandedName(None, 'CHANGE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2100, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MODIFICATION._UseForTag(pyxb.namespace.ExpandedName(None, 'REASON')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2101, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MODIFICATION._Automaton = _BuildAutomaton_164()




MODIFICATIONS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MODIFICATION'), MODIFICATION, scope=MODIFICATIONS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2107, 0)))

def _BuildAutomaton_165 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_165
    del _BuildAutomaton_165
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MODIFICATIONS._UseForTag(pyxb.namespace.ExpandedName(None, 'MODIFICATION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2107, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MODIFICATIONS._Automaton = _BuildAutomaton_165()




MULTIPLE_ECU_JOB._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), ADMIN_DATA, scope=MULTIPLE_ECU_JOB, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2114, 0)))

MULTIPLE_ECU_JOB._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDGS'), SDGS, scope=MULTIPLE_ECU_JOB, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2115, 0)))

MULTIPLE_ECU_JOB._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASS-REFS'), FUNCT_CLASS_REFS, scope=MULTIPLE_ECU_JOB, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2116, 0)))

MULTIPLE_ECU_JOB._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PROG-CODES'), PROG_CODES, scope=MULTIPLE_ECU_JOB, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2117, 0)))

MULTIPLE_ECU_JOB._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'INPUT-PARAMS'), INPUT_PARAMS, scope=MULTIPLE_ECU_JOB, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2118, 0)))

MULTIPLE_ECU_JOB._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OUTPUT-PARAMS'), OUTPUT_PARAMS, scope=MULTIPLE_ECU_JOB, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2119, 0)))

MULTIPLE_ECU_JOB._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NEG-OUTPUT-PARAMS'), NEG_OUTPUT_PARAMS, scope=MULTIPLE_ECU_JOB, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2120, 0)))

MULTIPLE_ECU_JOB._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-LAYER-REFS'), DIAG_LAYER_REFS, scope=MULTIPLE_ECU_JOB, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2121, 0)))

MULTIPLE_ECU_JOB._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AUDIENCE'), AUDIENCE, scope=MULTIPLE_ECU_JOB, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2122, 0)))

MULTIPLE_ECU_JOB._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=MULTIPLE_ECU_JOB, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

MULTIPLE_ECU_JOB._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=MULTIPLE_ECU_JOB, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

MULTIPLE_ECU_JOB._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=MULTIPLE_ECU_JOB, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_166 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_166
    del _BuildAutomaton_166
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2114, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2115, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2116, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2118, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2119, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2120, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2121, 0))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2122, 0))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MULTIPLE_ECU_JOB._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MULTIPLE_ECU_JOB._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MULTIPLE_ECU_JOB._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MULTIPLE_ECU_JOB._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2114, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MULTIPLE_ECU_JOB._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2115, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MULTIPLE_ECU_JOB._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASS-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2116, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MULTIPLE_ECU_JOB._UseForTag(pyxb.namespace.ExpandedName(None, 'PROG-CODES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2117, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MULTIPLE_ECU_JOB._UseForTag(pyxb.namespace.ExpandedName(None, 'INPUT-PARAMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2118, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(MULTIPLE_ECU_JOB._UseForTag(pyxb.namespace.ExpandedName(None, 'OUTPUT-PARAMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2119, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(MULTIPLE_ECU_JOB._UseForTag(pyxb.namespace.ExpandedName(None, 'NEG-OUTPUT-PARAMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2120, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(MULTIPLE_ECU_JOB._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-LAYER-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2121, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(MULTIPLE_ECU_JOB._UseForTag(pyxb.namespace.ExpandedName(None, 'AUDIENCE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2122, 0))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MULTIPLE_ECU_JOB._Automaton = _BuildAutomaton_166()




MULTIPLE_ECU_JOB_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MULTIPLE-ECU-JOB-REF'), ODXLINK, scope=MULTIPLE_ECU_JOB_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2132, 0)))

def _BuildAutomaton_167 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_167
    del _BuildAutomaton_167
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MULTIPLE_ECU_JOB_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'MULTIPLE-ECU-JOB-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2132, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MULTIPLE_ECU_JOB_REFS._Automaton = _BuildAutomaton_167()




MULTIPLE_ECU_JOBS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MULTIPLE-ECU-JOB'), MULTIPLE_ECU_JOB, scope=MULTIPLE_ECU_JOBS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2138, 0)))

def _BuildAutomaton_168 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_168
    del _BuildAutomaton_168
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MULTIPLE_ECU_JOBS._UseForTag(pyxb.namespace.ExpandedName(None, 'MULTIPLE-ECU-JOB')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2138, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MULTIPLE_ECU_JOBS._Automaton = _BuildAutomaton_168()




MUXS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MUX'), MUX, scope=MUXS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2172, 0)))

def _BuildAutomaton_169 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_169
    del _BuildAutomaton_169
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MUXS._UseForTag(pyxb.namespace.ExpandedName(None, 'MUX')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2172, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MUXS._Automaton = _BuildAutomaton_169()




NEG_OUTPUT_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DOP-BASE-REF'), ODXLINK, scope=NEG_OUTPUT_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2189, 0)))

NEG_OUTPUT_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=NEG_OUTPUT_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

NEG_OUTPUT_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=NEG_OUTPUT_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

NEG_OUTPUT_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=NEG_OUTPUT_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_170 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_170
    del _BuildAutomaton_170
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NEG_OUTPUT_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NEG_OUTPUT_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NEG_OUTPUT_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NEG_OUTPUT_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'DOP-BASE-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2189, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
NEG_OUTPUT_PARAM._Automaton = _BuildAutomaton_170()




NEG_OUTPUT_PARAMS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NEG-OUTPUT-PARAM'), NEG_OUTPUT_PARAM, scope=NEG_OUTPUT_PARAMS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2195, 0)))

def _BuildAutomaton_171 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_171
    del _BuildAutomaton_171
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NEG_OUTPUT_PARAMS._UseForTag(pyxb.namespace.ExpandedName(None, 'NEG-OUTPUT-PARAM')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2195, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
NEG_OUTPUT_PARAMS._Automaton = _BuildAutomaton_171()




NEG_RESPONSE_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NEG-RESPONSE-REF'), ODXLINK, scope=NEG_RESPONSE_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2207, 0)))

def _BuildAutomaton_172 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_172
    del _BuildAutomaton_172
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NEG_RESPONSE_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'NEG-RESPONSE-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2207, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
NEG_RESPONSE_REFS._Automaton = _BuildAutomaton_172()




NEG_RESPONSES._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NEG-RESPONSE'), NEG_RESPONSE, scope=NEG_RESPONSES, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2213, 0)))

def _BuildAutomaton_173 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_173
    del _BuildAutomaton_173
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NEG_RESPONSES._UseForTag(pyxb.namespace.ExpandedName(None, 'NEG-RESPONSE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2213, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
NEG_RESPONSES._Automaton = _BuildAutomaton_173()




NOT_INHERITED_DIAG_COMM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-SNREF'), SNREF, scope=NOT_INHERITED_DIAG_COMM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2219, 0)))

def _BuildAutomaton_174 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_174
    del _BuildAutomaton_174
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NOT_INHERITED_DIAG_COMM._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2219, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
NOT_INHERITED_DIAG_COMM._Automaton = _BuildAutomaton_174()




NOT_INHERITED_DIAG_COMMS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NOT-INHERITEDDIAG-COMM'), NOT_INHERITED_DIAG_COMM, scope=NOT_INHERITED_DIAG_COMMS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2225, 0)))

def _BuildAutomaton_175 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_175
    del _BuildAutomaton_175
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NOT_INHERITED_DIAG_COMMS._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITEDDIAG-COMM')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2225, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
NOT_INHERITED_DIAG_COMMS._Automaton = _BuildAutomaton_175()




NOT_INHERITED_DOP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DOP-BASE-SNREF'), SNREF, scope=NOT_INHERITED_DOP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2231, 0)))

def _BuildAutomaton_176 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_176
    del _BuildAutomaton_176
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NOT_INHERITED_DOP._UseForTag(pyxb.namespace.ExpandedName(None, 'DOP-BASE-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2231, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
NOT_INHERITED_DOP._Automaton = _BuildAutomaton_176()




NOT_INHERITED_DOPS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-DOP'), NOT_INHERITED_DOP, scope=NOT_INHERITED_DOPS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2237, 0)))

def _BuildAutomaton_177 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_177
    del _BuildAutomaton_177
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NOT_INHERITED_DOPS._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-DOP')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2237, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
NOT_INHERITED_DOPS._Automaton = _BuildAutomaton_177()




NOT_INHERITED_DTC_SNREFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-DTC-SNREF'), SNREF, scope=NOT_INHERITED_DTC_SNREFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2243, 0)))

def _BuildAutomaton_178 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_178
    del _BuildAutomaton_178
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NOT_INHERITED_DTC_SNREFS._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-DTC-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2243, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
NOT_INHERITED_DTC_SNREFS._Automaton = _BuildAutomaton_178()




NOT_INHERITED_GLOBAL_NEG_RESPONSE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'GLOBAL-NEG-RESPONSE-SNREF'), SNREF, scope=NOT_INHERITED_GLOBAL_NEG_RESPONSE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2249, 0)))

def _BuildAutomaton_179 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_179
    del _BuildAutomaton_179
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NOT_INHERITED_GLOBAL_NEG_RESPONSE._UseForTag(pyxb.namespace.ExpandedName(None, 'GLOBAL-NEG-RESPONSE-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2249, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
NOT_INHERITED_GLOBAL_NEG_RESPONSE._Automaton = _BuildAutomaton_179()




NOT_INHERITED_GLOBAL_NEG_RESPONSES._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NOTINHERITED-GLOBAL-NEG-RESPONSE'), NOT_INHERITED_GLOBAL_NEG_RESPONSE, scope=NOT_INHERITED_GLOBAL_NEG_RESPONSES, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2255, 0)))

def _BuildAutomaton_180 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_180
    del _BuildAutomaton_180
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NOT_INHERITED_GLOBAL_NEG_RESPONSES._UseForTag(pyxb.namespace.ExpandedName(None, 'NOTINHERITED-GLOBAL-NEG-RESPONSE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2255, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
NOT_INHERITED_GLOBAL_NEG_RESPONSES._Automaton = _BuildAutomaton_180()




NOT_INHERITED_TABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TABLE-SNREF'), SNREF, scope=NOT_INHERITED_TABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2261, 0)))

def _BuildAutomaton_181 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_181
    del _BuildAutomaton_181
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NOT_INHERITED_TABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'TABLE-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2261, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
NOT_INHERITED_TABLE._Automaton = _BuildAutomaton_181()




NOT_INHERITED_TABLES._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-TABLE'), NOT_INHERITED_TABLE, scope=NOT_INHERITED_TABLES, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2267, 0)))

def _BuildAutomaton_182 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_182
    del _BuildAutomaton_182
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NOT_INHERITED_TABLES._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-TABLE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2267, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
NOT_INHERITED_TABLES._Automaton = _BuildAutomaton_182()




NOT_INHERITED_VARIABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-VARIABLE-SNREF'), SNREF, scope=NOT_INHERITED_VARIABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2273, 0)))

def _BuildAutomaton_183 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_183
    del _BuildAutomaton_183
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NOT_INHERITED_VARIABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-VARIABLE-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2273, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
NOT_INHERITED_VARIABLE._Automaton = _BuildAutomaton_183()




NOT_INHERITED_VARIABLES._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NOT-INHERITEDVARIABLE'), NOT_INHERITED_VARIABLE, scope=NOT_INHERITED_VARIABLES, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2279, 0)))

def _BuildAutomaton_184 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_184
    del _BuildAutomaton_184
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NOT_INHERITED_VARIABLES._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITEDVARIABLE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2279, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
NOT_INHERITED_VARIABLES._Automaton = _BuildAutomaton_184()




ODX_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-LAYER-CONTAINER'), DIAG_LAYER_CONTAINER, scope=ODX_, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2296, 0)))

ODX_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPARAM-SPEC'), COMPARAM_SPEC, scope=ODX_, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2297, 0)))

ODX_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VEHICLE-INFO-SPEC'), VEHICLE_INFO_SPEC, scope=ODX_, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2298, 0)))

ODX_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FLASH'), FLASH, scope=ODX_, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2299, 0)))

ODX_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ECU-CONFIG'), ECU_CONFIG, scope=ODX_, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2300, 0)))

ODX_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MULTIPLE-ECU-JOB-SPEC'), MULTIPLE_ECU_JOB_SPEC, scope=ODX_, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2301, 0)))

ODX_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPARAM-SUBSET'), COMPARAM_SUBSET, scope=ODX_, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2302, 0)))

ODX_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FUNCTION-DICTIONARY'), FUNCTION_DICTIONARY, scope=ODX_, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2303, 0)))

def _BuildAutomaton_185 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_185
    del _BuildAutomaton_185
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ODX_._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-LAYER-CONTAINER')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2296, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ODX_._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPARAM-SPEC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2297, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ODX_._UseForTag(pyxb.namespace.ExpandedName(None, 'VEHICLE-INFO-SPEC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2298, 0))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ODX_._UseForTag(pyxb.namespace.ExpandedName(None, 'FLASH')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2299, 0))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ODX_._UseForTag(pyxb.namespace.ExpandedName(None, 'ECU-CONFIG')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2300, 0))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ODX_._UseForTag(pyxb.namespace.ExpandedName(None, 'MULTIPLE-ECU-JOB-SPEC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2301, 0))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ODX_._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPARAM-SUBSET')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2302, 0))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ODX_._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCTION-DICTIONARY')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2303, 0))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ODX_._Automaton = _BuildAutomaton_185()




ODX_CATEGORY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), ADMIN_DATA, scope=ODX_CATEGORY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2311, 0)))

ODX_CATEGORY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPANY-DATAS'), COMPANY_DATAS, scope=ODX_CATEGORY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2312, 0)))

ODX_CATEGORY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDGS'), SDGS, scope=ODX_CATEGORY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2313, 0)))

ODX_CATEGORY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=ODX_CATEGORY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

ODX_CATEGORY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=ODX_CATEGORY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

ODX_CATEGORY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=ODX_CATEGORY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_186 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_186
    del _BuildAutomaton_186
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2311, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2312, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2313, 0))
    counters.add(cc_4)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ODX_CATEGORY._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ODX_CATEGORY._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ODX_CATEGORY._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ODX_CATEGORY._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2311, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ODX_CATEGORY._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPANY-DATAS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2312, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ODX_CATEGORY._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2313, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ODX_CATEGORY._Automaton = _BuildAutomaton_186()




OPTION_ITEMS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OPTION-ITEM'), OPTION_ITEM, scope=OPTION_ITEMS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2343, 0)))

def _BuildAutomaton_187 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_187
    del _BuildAutomaton_187
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OPTION_ITEMS._UseForTag(pyxb.namespace.ExpandedName(None, 'OPTION-ITEM')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2343, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
OPTION_ITEMS._Automaton = _BuildAutomaton_187()




OUT_PARAM_IF_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNREF'), SNREF, scope=OUT_PARAM_IF_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2349, 0)))

OUT_PARAM_IF_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNPATHREF'), SNPATHREF, scope=OUT_PARAM_IF_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2350, 0)))

def _BuildAutomaton_188 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_188
    del _BuildAutomaton_188
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OUT_PARAM_IF_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2349, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OUT_PARAM_IF_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNPATHREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2350, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
OUT_PARAM_IF_REFS._Automaton = _BuildAutomaton_188()




OUTPUT_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DOP-BASE-REF'), ODXLINK, scope=OUTPUT_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2357, 0)))

OUTPUT_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=OUTPUT_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

OUTPUT_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=OUTPUT_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

OUTPUT_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=OUTPUT_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_189 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_189
    del _BuildAutomaton_189
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OUTPUT_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OUTPUT_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OUTPUT_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OUTPUT_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'DOP-BASE-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2357, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
OUTPUT_PARAM._Automaton = _BuildAutomaton_189()




OUTPUT_PARAMS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OUTPUT-PARAM'), OUTPUT_PARAM, scope=OUTPUT_PARAMS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2366, 0)))

def _BuildAutomaton_190 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_190
    del _BuildAutomaton_190
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OUTPUT_PARAMS._UseForTag(pyxb.namespace.ExpandedName(None, 'OUTPUT-PARAM')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2366, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
OUTPUT_PARAMS._Automaton = _BuildAutomaton_190()




OWN_IDENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IDENT-VALUE'), IDENT_VALUE, scope=OWN_IDENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2373, 0)))

OWN_IDENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=OWN_IDENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

OWN_IDENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=OWN_IDENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

OWN_IDENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=OWN_IDENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_191 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_191
    del _BuildAutomaton_191
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OWN_IDENT._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OWN_IDENT._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OWN_IDENT._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OWN_IDENT._UseForTag(pyxb.namespace.ExpandedName(None, 'IDENT-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2373, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
OWN_IDENT._Automaton = _BuildAutomaton_191()




OWN_IDENTS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OWN-IDENT'), OWN_IDENT, scope=OWN_IDENTS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2381, 0)))

def _BuildAutomaton_192 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_192
    del _BuildAutomaton_192
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OWN_IDENTS._UseForTag(pyxb.namespace.ExpandedName(None, 'OWN-IDENT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2381, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
OWN_IDENTS._Automaton = _BuildAutomaton_192()




PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDGS'), SDGS, scope=PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0)))

PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_193 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_193
    del _BuildAutomaton_193
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PARAM._Automaton = _BuildAutomaton_193()




PARAMS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PARAM'), PARAM, scope=PARAMS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2406, 0)))

def _BuildAutomaton_194 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_194
    del _BuildAutomaton_194
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PARAMS._UseForTag(pyxb.namespace.ExpandedName(None, 'PARAM')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2406, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PARAMS._Automaton = _BuildAutomaton_194()




PARENT_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PARENT-REF'), PARENT_REF, scope=PARENT_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2424, 0)))

def _BuildAutomaton_195 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_195
    del _BuildAutomaton_195
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PARENT_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'PARENT-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2424, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PARENT_REFS._Automaton = _BuildAutomaton_195()




PHYSICAL_DIMENSION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LENGTH-EXP'), pyxb.binding.datatypes.int, scope=PHYSICAL_DIMENSION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2455, 0)))

PHYSICAL_DIMENSION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MASS-EXP'), pyxb.binding.datatypes.int, scope=PHYSICAL_DIMENSION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2456, 0)))

PHYSICAL_DIMENSION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TIME-EXP'), pyxb.binding.datatypes.int, scope=PHYSICAL_DIMENSION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2457, 0)))

PHYSICAL_DIMENSION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CURRENT-EXP'), pyxb.binding.datatypes.int, scope=PHYSICAL_DIMENSION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2458, 0)))

PHYSICAL_DIMENSION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TEMPERATURE-EXP'), pyxb.binding.datatypes.int, scope=PHYSICAL_DIMENSION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2459, 0)))

PHYSICAL_DIMENSION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MOLAR-AMOUNT-EXP'), pyxb.binding.datatypes.int, scope=PHYSICAL_DIMENSION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2460, 0)))

PHYSICAL_DIMENSION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LUMINOUS-INTENSITY-EXP'), pyxb.binding.datatypes.int, scope=PHYSICAL_DIMENSION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2461, 0)))

PHYSICAL_DIMENSION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=PHYSICAL_DIMENSION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

PHYSICAL_DIMENSION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=PHYSICAL_DIMENSION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

PHYSICAL_DIMENSION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=PHYSICAL_DIMENSION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_196 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_196
    del _BuildAutomaton_196
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2455, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2456, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2457, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2458, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2459, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2460, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2461, 0))
    counters.add(cc_8)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PHYSICAL_DIMENSION._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PHYSICAL_DIMENSION._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PHYSICAL_DIMENSION._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PHYSICAL_DIMENSION._UseForTag(pyxb.namespace.ExpandedName(None, 'LENGTH-EXP')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2455, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PHYSICAL_DIMENSION._UseForTag(pyxb.namespace.ExpandedName(None, 'MASS-EXP')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2456, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(PHYSICAL_DIMENSION._UseForTag(pyxb.namespace.ExpandedName(None, 'TIME-EXP')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2457, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(PHYSICAL_DIMENSION._UseForTag(pyxb.namespace.ExpandedName(None, 'CURRENT-EXP')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2458, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(PHYSICAL_DIMENSION._UseForTag(pyxb.namespace.ExpandedName(None, 'TEMPERATURE-EXP')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2459, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(PHYSICAL_DIMENSION._UseForTag(pyxb.namespace.ExpandedName(None, 'MOLAR-AMOUNT-EXP')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2460, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(PHYSICAL_DIMENSION._UseForTag(pyxb.namespace.ExpandedName(None, 'LUMINOUS-INTENSITY-EXP')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2461, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PHYSICAL_DIMENSION._Automaton = _BuildAutomaton_196()




PHYSICAL_DIMENSIONS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PHYSICAL-DIMENSION'), PHYSICAL_DIMENSION, scope=PHYSICAL_DIMENSIONS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2469, 0)))

def _BuildAutomaton_197 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_197
    del _BuildAutomaton_197
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PHYSICAL_DIMENSIONS._UseForTag(pyxb.namespace.ExpandedName(None, 'PHYSICAL-DIMENSION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2469, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PHYSICAL_DIMENSIONS._Automaton = _BuildAutomaton_197()




PHYSICAL_VEHICLE_LINK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VEHICLE-CONNECTOR-PIN-REFS'), VEHICLE_CONNECTOR_PIN_REFS, scope=PHYSICAL_VEHICLE_LINK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2484, 0)))

PHYSICAL_VEHICLE_LINK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LINK-COMPARAM-REFS'), LINK_COMPARAM_REFS, scope=PHYSICAL_VEHICLE_LINK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2486, 0)))

PHYSICAL_VEHICLE_LINK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=PHYSICAL_VEHICLE_LINK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

PHYSICAL_VEHICLE_LINK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=PHYSICAL_VEHICLE_LINK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

PHYSICAL_VEHICLE_LINK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=PHYSICAL_VEHICLE_LINK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_198 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_198
    del _BuildAutomaton_198
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2486, 0))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PHYSICAL_VEHICLE_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PHYSICAL_VEHICLE_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PHYSICAL_VEHICLE_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PHYSICAL_VEHICLE_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'VEHICLE-CONNECTOR-PIN-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2484, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PHYSICAL_VEHICLE_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'LINK-COMPARAM-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2486, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PHYSICAL_VEHICLE_LINK._Automaton = _BuildAutomaton_198()




PHYSICAL_VEHICLE_LINKS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PHYSICAL-VEHICLELINK'), PHYSICAL_VEHICLE_LINK, scope=PHYSICAL_VEHICLE_LINKS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2495, 0)))

def _BuildAutomaton_199 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_199
    del _BuildAutomaton_199
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PHYSICAL_VEHICLE_LINKS._UseForTag(pyxb.namespace.ExpandedName(None, 'PHYSICAL-VEHICLELINK')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2495, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PHYSICAL_VEHICLE_LINKS._Automaton = _BuildAutomaton_199()




PHYS_MEM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PHYS-SEGMENTS'), PHYS_SEGMENTS, scope=PHYS_MEM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2502, 0)))

PHYS_MEM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=PHYS_MEM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

PHYS_MEM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=PHYS_MEM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

PHYS_MEM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=PHYS_MEM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_200 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_200
    del _BuildAutomaton_200
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PHYS_MEM._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PHYS_MEM._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PHYS_MEM._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PHYS_MEM._UseForTag(pyxb.namespace.ExpandedName(None, 'PHYS-SEGMENTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2502, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PHYS_MEM._Automaton = _BuildAutomaton_200()




PHYS_SEGMENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FILLBYTE'), pyxb.binding.datatypes.hexBinary, scope=PHYS_SEGMENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2511, 0)))

PHYS_SEGMENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BLOCK-SIZE'), pyxb.binding.datatypes.unsignedInt, scope=PHYS_SEGMENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2512, 0)))

PHYS_SEGMENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'START-ADDRESS'), pyxb.binding.datatypes.hexBinary, scope=PHYS_SEGMENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2513, 0)))

PHYS_SEGMENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=PHYS_SEGMENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

PHYS_SEGMENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=PHYS_SEGMENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

PHYS_SEGMENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=PHYS_SEGMENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_201 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_201
    del _BuildAutomaton_201
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2511, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2512, 0))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PHYS_SEGMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PHYS_SEGMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PHYS_SEGMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PHYS_SEGMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'FILLBYTE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2511, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PHYS_SEGMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'BLOCK-SIZE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2512, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PHYS_SEGMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'START-ADDRESS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2513, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PHYS_SEGMENT._Automaton = _BuildAutomaton_201()




PHYS_SEGMENTS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PHYS-SEGMENT'), PHYS_SEGMENT, scope=PHYS_SEGMENTS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2521, 0)))

def _BuildAutomaton_202 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_202
    del _BuildAutomaton_202
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PHYS_SEGMENTS._UseForTag(pyxb.namespace.ExpandedName(None, 'PHYS-SEGMENT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2521, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PHYS_SEGMENTS._Automaton = _BuildAutomaton_202()




POS_RESPONSE_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'POS-RESPONSE-REF'), ODXLINK, scope=POS_RESPONSE_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2573, 0)))

def _BuildAutomaton_203 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_203
    del _BuildAutomaton_203
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(POS_RESPONSE_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'POS-RESPONSE-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2573, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
POS_RESPONSE_REFS._Automaton = _BuildAutomaton_203()




POS_RESPONSES._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'POS-RESPONSE'), POS_RESPONSE, scope=POS_RESPONSES, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2579, 0)))

def _BuildAutomaton_204 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_204
    del _BuildAutomaton_204
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(POS_RESPONSES._UseForTag(pyxb.namespace.ExpandedName(None, 'POS-RESPONSE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2579, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
POS_RESPONSES._Automaton = _BuildAutomaton_204()




POS_RESPONSE_SUPPRESSABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BIT-MASK'), pyxb.binding.datatypes.hexBinary, scope=POS_RESPONSE_SUPPRESSABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2585, 0)))

POS_RESPONSE_SUPPRESSABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CODED-CONST-SNREF'), SNREF, scope=POS_RESPONSE_SUPPRESSABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2588, 0)))

POS_RESPONSE_SUPPRESSABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CODED-CONST-SNPATHREF'), SNPATHREF, scope=POS_RESPONSE_SUPPRESSABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2589, 0)))

POS_RESPONSE_SUPPRESSABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VALUE-SNREF'), SNREF, scope=POS_RESPONSE_SUPPRESSABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2592, 0)))

POS_RESPONSE_SUPPRESSABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VALUE-SNPATHREF'), SNPATHREF, scope=POS_RESPONSE_SUPPRESSABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2593, 0)))

POS_RESPONSE_SUPPRESSABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PHYS-CONST-SNREF'), SNREF, scope=POS_RESPONSE_SUPPRESSABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2596, 0)))

POS_RESPONSE_SUPPRESSABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PHYS-CONST-SNPATHREF'), SNPATHREF, scope=POS_RESPONSE_SUPPRESSABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2597, 0)))

POS_RESPONSE_SUPPRESSABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TABLE-KEY-SNREF'), SNREF, scope=POS_RESPONSE_SUPPRESSABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2600, 0)))

POS_RESPONSE_SUPPRESSABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TABLE-KEY-SNPATHREF'), SNPATHREF, scope=POS_RESPONSE_SUPPRESSABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2601, 0)))

def _BuildAutomaton_205 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_205
    del _BuildAutomaton_205
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(POS_RESPONSE_SUPPRESSABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'BIT-MASK')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2585, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(POS_RESPONSE_SUPPRESSABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'CODED-CONST-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2588, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(POS_RESPONSE_SUPPRESSABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'CODED-CONST-SNPATHREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2589, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(POS_RESPONSE_SUPPRESSABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'VALUE-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2592, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(POS_RESPONSE_SUPPRESSABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'VALUE-SNPATHREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2593, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(POS_RESPONSE_SUPPRESSABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'PHYS-CONST-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2596, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(POS_RESPONSE_SUPPRESSABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'PHYS-CONST-SNPATHREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2597, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(POS_RESPONSE_SUPPRESSABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'TABLE-KEY-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2600, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(POS_RESPONSE_SUPPRESSABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'TABLE-KEY-SNPATHREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2601, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
POS_RESPONSE_SUPPRESSABLE._Automaton = _BuildAutomaton_205()




PRE_CONDITION_STATE_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PRE-CONDITION-STATE-REF'), PRE_CONDITION_STATE_REF, scope=PRE_CONDITION_STATE_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2620, 0)))

def _BuildAutomaton_206 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_206
    del _BuildAutomaton_206
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PRE_CONDITION_STATE_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'PRE-CONDITION-STATE-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2620, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PRE_CONDITION_STATE_REFS._Automaton = _BuildAutomaton_206()




PROG_CODE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CODE-FILE'), pyxb.binding.datatypes.string, scope=PROG_CODE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2626, 0)))

PROG_CODE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ENCRYPTION'), pyxb.binding.datatypes.string, scope=PROG_CODE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2627, 0)))

PROG_CODE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SYNTAX'), pyxb.binding.datatypes.string, scope=PROG_CODE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2628, 0)))

PROG_CODE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'REVISION'), pyxb.binding.datatypes.string, scope=PROG_CODE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2629, 0)))

PROG_CODE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ENTRYPOINT'), pyxb.binding.datatypes.string, scope=PROG_CODE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2630, 0)))

PROG_CODE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LIBRARY-REFS'), LIBRARY_REFS, scope=PROG_CODE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2631, 0)))

def _BuildAutomaton_207 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_207
    del _BuildAutomaton_207
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2627, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2630, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2631, 0))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PROG_CODE._UseForTag(pyxb.namespace.ExpandedName(None, 'CODE-FILE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2626, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PROG_CODE._UseForTag(pyxb.namespace.ExpandedName(None, 'ENCRYPTION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2627, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PROG_CODE._UseForTag(pyxb.namespace.ExpandedName(None, 'SYNTAX')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2628, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PROG_CODE._UseForTag(pyxb.namespace.ExpandedName(None, 'REVISION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2629, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PROG_CODE._UseForTag(pyxb.namespace.ExpandedName(None, 'ENTRYPOINT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2630, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PROG_CODE._UseForTag(pyxb.namespace.ExpandedName(None, 'LIBRARY-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2631, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PROG_CODE._Automaton = _BuildAutomaton_207()




PROG_CODES._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PROG-CODE'), PROG_CODE, scope=PROG_CODES, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2637, 0)))

def _BuildAutomaton_208 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_208
    del _BuildAutomaton_208
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PROG_CODES._UseForTag(pyxb.namespace.ExpandedName(None, 'PROG-CODE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2637, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PROG_CODES._Automaton = _BuildAutomaton_208()




PROTOCOLS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PROTOCOL'), PROTOCOL, scope=PROTOCOLS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2661, 0)))

def _BuildAutomaton_209 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_209
    del _BuildAutomaton_209
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PROTOCOLS._UseForTag(pyxb.namespace.ExpandedName(None, 'PROTOCOL')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2661, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PROTOCOLS._Automaton = _BuildAutomaton_209()




PROTOCOL_SNREFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PROTOCOL-SNREF'), SNREF, scope=PROTOCOL_SNREFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2667, 0)))

def _BuildAutomaton_210 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_210
    del _BuildAutomaton_210
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PROTOCOL_SNREFS._UseForTag(pyxb.namespace.ExpandedName(None, 'PROTOCOL-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2667, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PROTOCOL_SNREFS._Automaton = _BuildAutomaton_210()




PROT_STACK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PDU-PROTOCOL-TYPE'), pyxb.binding.datatypes.string, scope=PROT_STACK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2674, 0)))

PROT_STACK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PHYSICAL-LINK-TYPE'), pyxb.binding.datatypes.string, scope=PROT_STACK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2675, 0)))

PROT_STACK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPARAM-SUBSET-REFS'), COMPARAM_SUBSET_REFS, scope=PROT_STACK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2676, 0)))

PROT_STACK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=PROT_STACK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

PROT_STACK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=PROT_STACK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

PROT_STACK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=PROT_STACK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_211 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_211
    del _BuildAutomaton_211
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2676, 0))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PROT_STACK._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PROT_STACK._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PROT_STACK._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PROT_STACK._UseForTag(pyxb.namespace.ExpandedName(None, 'PDU-PROTOCOL-TYPE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2674, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PROT_STACK._UseForTag(pyxb.namespace.ExpandedName(None, 'PHYSICAL-LINK-TYPE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2675, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PROT_STACK._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPARAM-SUBSET-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2676, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PROT_STACK._Automaton = _BuildAutomaton_211()




PROT_STACKS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PROT-STACK'), PROT_STACK, scope=PROT_STACKS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2684, 0)))

def _BuildAutomaton_212 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_212
    del _BuildAutomaton_212
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PROT_STACKS._UseForTag(pyxb.namespace.ExpandedName(None, 'PROT-STACK')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2684, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PROT_STACKS._Automaton = _BuildAutomaton_212()




READ_DIAG_COMM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'READ-PARAM-VALUES'), READ_PARAM_VALUES, scope=READ_DIAG_COMM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2698, 0)))

READ_DIAG_COMM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'READ-DIAG-COMM-REF'), ODXLINK, scope=READ_DIAG_COMM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2700, 0)))

READ_DIAG_COMM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'READ-DIAG-COMM-SNREF'), SNREF, scope=READ_DIAG_COMM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2701, 0)))

READ_DIAG_COMM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'READ-DATA-SNREF'), SNREF, scope=READ_DIAG_COMM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2704, 0)))

READ_DIAG_COMM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'READ-DATA-SNPATHREF'), SNPATHREF, scope=READ_DIAG_COMM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2705, 0)))

def _BuildAutomaton_213 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_213
    del _BuildAutomaton_213
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2698, 0))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(READ_DIAG_COMM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'READ-PARAM-VALUES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2698, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(READ_DIAG_COMM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'READ-DIAG-COMM-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2700, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(READ_DIAG_COMM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'READ-DIAG-COMM-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2701, 0))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(READ_DIAG_COMM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'READ-DATA-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2704, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(READ_DIAG_COMM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'READ-DATA-SNPATHREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2705, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
READ_DIAG_COMM_CONNECTOR._Automaton = _BuildAutomaton_213()




READ_PARAM_VALUE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PHYS-CONSTANT-VALUE'), pyxb.binding.datatypes.string, scope=READ_PARAM_VALUE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2712, 0)))

READ_PARAM_VALUE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNREF'), SNREF, scope=READ_PARAM_VALUE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2714, 0)))

READ_PARAM_VALUE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNPATHREF'), SNPATHREF, scope=READ_PARAM_VALUE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2715, 0)))

def _BuildAutomaton_214 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_214
    del _BuildAutomaton_214
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(READ_PARAM_VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'PHYS-CONSTANT-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2712, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(READ_PARAM_VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2714, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(READ_PARAM_VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNPATHREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2715, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
READ_PARAM_VALUE._Automaton = _BuildAutomaton_214()




READ_PARAM_VALUES._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'READ-PARAM-VALUE'), READ_PARAM_VALUE, scope=READ_PARAM_VALUES, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2723, 0)))

def _BuildAutomaton_215 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_215
    del _BuildAutomaton_215
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(READ_PARAM_VALUES._UseForTag(pyxb.namespace.ExpandedName(None, 'READ-PARAM-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2723, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
READ_PARAM_VALUES._Automaton = _BuildAutomaton_215()




RELATED_DIAG_COMM_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RELATED-DIAG-COMMREF'), RELATED_DIAG_COMM_REF, scope=RELATED_DIAG_COMM_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2736, 0)))

def _BuildAutomaton_216 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_216
    del _BuildAutomaton_216
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RELATED_DIAG_COMM_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'RELATED-DIAG-COMMREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2736, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RELATED_DIAG_COMM_REFS._Automaton = _BuildAutomaton_216()




RELATED_DOC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'XDOC'), XDOC, scope=RELATED_DOC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2742, 0)))

RELATED_DOC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=RELATED_DOC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2743, 0)))

def _BuildAutomaton_217 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_217
    del _BuildAutomaton_217
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2743, 0))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RELATED_DOC._UseForTag(pyxb.namespace.ExpandedName(None, 'XDOC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2742, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(RELATED_DOC._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2743, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RELATED_DOC._Automaton = _BuildAutomaton_217()




RELATED_DOCS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RELATED-DOC'), RELATED_DOC, scope=RELATED_DOCS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2749, 0)))

def _BuildAutomaton_218 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_218
    del _BuildAutomaton_218
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RELATED_DOCS._UseForTag(pyxb.namespace.ExpandedName(None, 'RELATED-DOC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2749, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RELATED_DOCS._Automaton = _BuildAutomaton_218()




REQUEST._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), ADMIN_DATA, scope=REQUEST, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2756, 0)))

REQUEST._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PARAMS'), PARAMS, scope=REQUEST, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2757, 0)))

REQUEST._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDGS'), SDGS, scope=REQUEST, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2758, 0)))

REQUEST._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=REQUEST, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

REQUEST._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=REQUEST, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

REQUEST._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=REQUEST, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_219 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_219
    del _BuildAutomaton_219
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2756, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2758, 0))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(REQUEST._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(REQUEST._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(REQUEST._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(REQUEST._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2756, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(REQUEST._UseForTag(pyxb.namespace.ExpandedName(None, 'PARAMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2757, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(REQUEST._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2758, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
REQUEST._Automaton = _BuildAutomaton_219()




REQUESTS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'REQUEST'), REQUEST, scope=REQUESTS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2766, 0)))

def _BuildAutomaton_220 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_220
    del _BuildAutomaton_220
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(REQUESTS._UseForTag(pyxb.namespace.ExpandedName(None, 'REQUEST')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2766, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
REQUESTS._Automaton = _BuildAutomaton_220()




RESPONSE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), ADMIN_DATA, scope=RESPONSE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2789, 0)))

RESPONSE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PARAMS'), PARAMS, scope=RESPONSE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2790, 0)))

RESPONSE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDGS'), SDGS, scope=RESPONSE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2791, 0)))

RESPONSE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=RESPONSE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

RESPONSE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=RESPONSE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

RESPONSE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=RESPONSE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_221 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_221
    del _BuildAutomaton_221
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2789, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2791, 0))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RESPONSE._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RESPONSE._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RESPONSE._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RESPONSE._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2789, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RESPONSE._UseForTag(pyxb.namespace.ExpandedName(None, 'PARAMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2790, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(RESPONSE._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2791, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RESPONSE._Automaton = _BuildAutomaton_221()




ROLES._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ROLE'), pyxb.binding.datatypes.string, scope=ROLES, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2799, 0)))

def _BuildAutomaton_222 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_222
    del _BuildAutomaton_222
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2799, 0))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ROLES._UseForTag(pyxb.namespace.ExpandedName(None, 'ROLE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2799, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ROLES._Automaton = _BuildAutomaton_222()




SCALE_CONSTRS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SCALE-CONSTR'), SCALE_CONSTR, scope=SCALE_CONSTRS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2821, 0)))

def _BuildAutomaton_223 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_223
    del _BuildAutomaton_223
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SCALE_CONSTRS._UseForTag(pyxb.namespace.ExpandedName(None, 'SCALE-CONSTR')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2821, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SCALE_CONSTRS._Automaton = _BuildAutomaton_223()




SDG_CAPTION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=SDG_CAPTION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

SDG_CAPTION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=SDG_CAPTION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

SDG_CAPTION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=SDG_CAPTION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_224 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_224
    del _BuildAutomaton_224
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SDG_CAPTION._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SDG_CAPTION._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SDG_CAPTION._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SDG_CAPTION._Automaton = _BuildAutomaton_224()




SDGS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDG'), SDG, scope=SDGS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2862, 0)))

def _BuildAutomaton_225 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_225
    del _BuildAutomaton_225
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SDGS._UseForTag(pyxb.namespace.ExpandedName(None, 'SDG')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2862, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SDGS._Automaton = _BuildAutomaton_225()




SECURITY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SECURITY-METHOD'), SECURITY_METHOD, scope=SECURITY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2868, 0)))

SECURITY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FW-SIGNATURE'), FW_SIGNATURE, scope=SECURITY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2869, 0)))

SECURITY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FW-CHECKSUM'), FW_CHECKSUM, scope=SECURITY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2870, 0)))

SECURITY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VALIDITY-FOR'), VALIDITY_FOR, scope=SECURITY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2871, 0)))

def _BuildAutomaton_226 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_226
    del _BuildAutomaton_226
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2868, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2869, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2870, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2871, 0))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SECURITY._UseForTag(pyxb.namespace.ExpandedName(None, 'SECURITY-METHOD')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2868, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SECURITY._UseForTag(pyxb.namespace.ExpandedName(None, 'FW-SIGNATURE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2869, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SECURITY._UseForTag(pyxb.namespace.ExpandedName(None, 'FW-CHECKSUM')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2870, 0))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SECURITY._UseForTag(pyxb.namespace.ExpandedName(None, 'VALIDITY-FOR')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2871, 0))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SECURITY._Automaton = _BuildAutomaton_226()




SECURITYS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SECURITY'), SECURITY, scope=SECURITYS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2885, 0)))

def _BuildAutomaton_227 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_227
    del _BuildAutomaton_227
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SECURITYS._UseForTag(pyxb.namespace.ExpandedName(None, 'SECURITY')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2885, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SECURITYS._Automaton = _BuildAutomaton_227()




SEGMENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SOURCE-START-ADDRESS'), pyxb.binding.datatypes.hexBinary, scope=SEGMENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2892, 0)))

SEGMENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPRESSED-SIZE'), pyxb.binding.datatypes.unsignedInt, scope=SEGMENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2893, 0)))

SEGMENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UNCOMPRESSED-SIZE'), UNCOMPRESSED_SIZE, scope=SEGMENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2895, 0)))

SEGMENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SOURCE-END-ADDRESS'), SOURCE_END_ADDRESS, scope=SEGMENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2896, 0)))

SEGMENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ENCRYPT-COMPRESS-METHOD'), ENCRYPT_COMPRESS_METHOD, scope=SEGMENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2898, 0)))

SEGMENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=SEGMENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

SEGMENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=SEGMENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

SEGMENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=SEGMENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_228 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_228
    del _BuildAutomaton_228
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2893, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2898, 0))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SEGMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SEGMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SEGMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SEGMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'SOURCE-START-ADDRESS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2892, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SEGMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPRESSED-SIZE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2893, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SEGMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'UNCOMPRESSED-SIZE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2895, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SEGMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'SOURCE-END-ADDRESS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2896, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SEGMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'ENCRYPT-COMPRESS-METHOD')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2898, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SEGMENT._Automaton = _BuildAutomaton_228()




SEGMENTS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SEGMENT'), SEGMENT, scope=SEGMENTS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2906, 0)))

def _BuildAutomaton_229 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_229
    del _BuildAutomaton_229
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SEGMENTS._UseForTag(pyxb.namespace.ExpandedName(None, 'SEGMENT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2906, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SEGMENTS._Automaton = _BuildAutomaton_229()




SELECTION_TABLE_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SELECTION-TABLE-REF'), ODXLINK, scope=SELECTION_TABLE_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2912, 0)))

SELECTION_TABLE_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SELECTION-TABLE-SNREF'), SNREF, scope=SELECTION_TABLE_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2913, 0)))

def _BuildAutomaton_230 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_230
    del _BuildAutomaton_230
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SELECTION_TABLE_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'SELECTION-TABLE-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2912, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SELECTION_TABLE_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'SELECTION-TABLE-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2913, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SELECTION_TABLE_REFS._Automaton = _BuildAutomaton_230()




SESSION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EXPECTED-IDENTS'), EXPECTED_IDENTS, scope=SESSION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2920, 0)))

SESSION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CHECKSUMS'), CHECKSUMS, scope=SESSION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2921, 0)))

SESSION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SECURITYS'), SECURITYS, scope=SESSION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2922, 0)))

SESSION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DATABLOCK-REFS'), DATABLOCK_REFS, scope=SESSION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2923, 0)))

SESSION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDGS'), SDGS, scope=SESSION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2924, 0)))

SESSION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=SESSION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

SESSION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=SESSION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

SESSION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=SESSION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_231 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_231
    del _BuildAutomaton_231
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2920, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2921, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2922, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2924, 0))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SESSION._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SESSION._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SESSION._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SESSION._UseForTag(pyxb.namespace.ExpandedName(None, 'EXPECTED-IDENTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2920, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SESSION._UseForTag(pyxb.namespace.ExpandedName(None, 'CHECKSUMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2921, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SESSION._UseForTag(pyxb.namespace.ExpandedName(None, 'SECURITYS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2922, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SESSION._UseForTag(pyxb.namespace.ExpandedName(None, 'DATABLOCK-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2923, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(SESSION._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2924, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SESSION._Automaton = _BuildAutomaton_231()




SESSION_DESCS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SESSION-DESC'), SESSION_DESC, scope=SESSION_DESCS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2948, 0)))

def _BuildAutomaton_232 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_232
    del _BuildAutomaton_232
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SESSION_DESCS._UseForTag(pyxb.namespace.ExpandedName(None, 'SESSION-DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2948, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SESSION_DESCS._Automaton = _BuildAutomaton_232()




SESSIONS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SESSION'), SESSION, scope=SESSIONS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2954, 0)))

def _BuildAutomaton_233 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_233
    del _BuildAutomaton_233
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SESSIONS._UseForTag(pyxb.namespace.ExpandedName(None, 'SESSION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2954, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SESSIONS._Automaton = _BuildAutomaton_233()




SNREF_TO_TABLEROW._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TABLE-SNREF'), SNREF, scope=SNREF_TO_TABLEROW, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3036, 0)))

SNREF_TO_TABLEROW._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TABLE-ROW-SNREF'), SNREF, scope=SNREF_TO_TABLEROW, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3037, 0)))

def _BuildAutomaton_234 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_234
    del _BuildAutomaton_234
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SNREF_TO_TABLEROW._UseForTag(pyxb.namespace.ExpandedName(None, 'TABLE-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3036, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SNREF_TO_TABLEROW._UseForTag(pyxb.namespace.ExpandedName(None, 'TABLE-ROW-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3037, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SNREF_TO_TABLEROW._Automaton = _BuildAutomaton_234()




STATE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=STATE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

STATE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=STATE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

STATE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=STATE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_235 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_235
    del _BuildAutomaton_235
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(STATE._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(STATE._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(STATE._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
STATE._Automaton = _BuildAutomaton_235()




STATE_CHART._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SEMANTIC'), pyxb.binding.datatypes.string, scope=STATE_CHART, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3087, 0)))

STATE_CHART._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'STATE-TRANSITIONS'), STATE_TRANSITIONS, scope=STATE_CHART, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3088, 0)))

STATE_CHART._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'START-STATE-SNREF'), SNREF, scope=STATE_CHART, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3089, 0)))

STATE_CHART._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'STATES'), STATES, scope=STATE_CHART, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3090, 0)))

STATE_CHART._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=STATE_CHART, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

STATE_CHART._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=STATE_CHART, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

STATE_CHART._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=STATE_CHART, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_236 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_236
    del _BuildAutomaton_236
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3088, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3090, 0))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(STATE_CHART._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(STATE_CHART._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(STATE_CHART._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(STATE_CHART._UseForTag(pyxb.namespace.ExpandedName(None, 'SEMANTIC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3087, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(STATE_CHART._UseForTag(pyxb.namespace.ExpandedName(None, 'STATE-TRANSITIONS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3088, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(STATE_CHART._UseForTag(pyxb.namespace.ExpandedName(None, 'START-STATE-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3089, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(STATE_CHART._UseForTag(pyxb.namespace.ExpandedName(None, 'STATES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3090, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
STATE_CHART._Automaton = _BuildAutomaton_236()




STATE_CHARTS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'STATE-CHART'), STATE_CHART, scope=STATE_CHARTS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3098, 0)))

def _BuildAutomaton_237 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_237
    del _BuildAutomaton_237
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(STATE_CHARTS._UseForTag(pyxb.namespace.ExpandedName(None, 'STATE-CHART')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3098, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
STATE_CHARTS._Automaton = _BuildAutomaton_237()




STATES._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'STATE'), STATE, scope=STATES, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3104, 0)))

def _BuildAutomaton_238 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_238
    del _BuildAutomaton_238
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(STATES._UseForTag(pyxb.namespace.ExpandedName(None, 'STATE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3104, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
STATES._Automaton = _BuildAutomaton_238()




STATE_TRANSITION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SOURCE-SNREF'), SNREF, scope=STATE_TRANSITION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3111, 0)))

STATE_TRANSITION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TARGET-SNREF'), SNREF, scope=STATE_TRANSITION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3112, 0)))

STATE_TRANSITION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EXTERNAL-ACCESS-METHOD'), EXTERNAL_ACCESS_METHOD, scope=STATE_TRANSITION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3113, 0)))

STATE_TRANSITION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=STATE_TRANSITION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

STATE_TRANSITION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=STATE_TRANSITION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

STATE_TRANSITION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=STATE_TRANSITION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_239 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_239
    del _BuildAutomaton_239
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3113, 0))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(STATE_TRANSITION._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(STATE_TRANSITION._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(STATE_TRANSITION._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(STATE_TRANSITION._UseForTag(pyxb.namespace.ExpandedName(None, 'SOURCE-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3111, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(STATE_TRANSITION._UseForTag(pyxb.namespace.ExpandedName(None, 'TARGET-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3112, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(STATE_TRANSITION._UseForTag(pyxb.namespace.ExpandedName(None, 'EXTERNAL-ACCESS-METHOD')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3113, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
STATE_TRANSITION._Automaton = _BuildAutomaton_239()




STATE_TRANSITION_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'STATE-TRANSITION-REF'), STATE_TRANSITION_REF, scope=STATE_TRANSITION_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3132, 0)))

def _BuildAutomaton_240 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_240
    del _BuildAutomaton_240
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(STATE_TRANSITION_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'STATE-TRANSITION-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3132, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
STATE_TRANSITION_REFS._Automaton = _BuildAutomaton_240()




STATE_TRANSITIONS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'STATE-TRANSITION'), STATE_TRANSITION, scope=STATE_TRANSITIONS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3138, 0)))

def _BuildAutomaton_241 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_241
    del _BuildAutomaton_241
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(STATE_TRANSITIONS._UseForTag(pyxb.namespace.ExpandedName(None, 'STATE-TRANSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3138, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
STATE_TRANSITIONS._Automaton = _BuildAutomaton_241()




STATIC_FIELDS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'STATIC-FIELD'), STATIC_FIELD, scope=STATIC_FIELDS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3155, 0)))

def _BuildAutomaton_242 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_242
    del _BuildAutomaton_242
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(STATIC_FIELDS._UseForTag(pyxb.namespace.ExpandedName(None, 'STATIC-FIELD')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3155, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
STATIC_FIELDS._Automaton = _BuildAutomaton_242()




STRUCTURES._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'STRUCTURE'), STRUCTURE, scope=STRUCTURES, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3169, 0)))

def _BuildAutomaton_243 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_243
    del _BuildAutomaton_243
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(STRUCTURES._UseForTag(pyxb.namespace.ExpandedName(None, 'STRUCTURE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3169, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
STRUCTURES._Automaton = _BuildAutomaton_243()




SUB_COMPONENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SUB-COMPONENT-PATTERNS'), SUB_COMPONENT_PATTERNS, scope=SUB_COMPONENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3176, 0)))

SUB_COMPONENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SUB-COMPONENT-PARAM-CONNECTORS'), SUB_COMPONENT_PARAM_CONNECTORS, scope=SUB_COMPONENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3177, 0)))

SUB_COMPONENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TABLE-ROW-CONNECTORS'), TABLE_ROW_CONNECTORS, scope=SUB_COMPONENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3179, 0)))

SUB_COMPONENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ENV-DATA-CONNECTORS'), ENV_DATA_CONNECTORS, scope=SUB_COMPONENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3180, 0)))

SUB_COMPONENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DTC-CONNECTORS'), DTC_CONNECTORS, scope=SUB_COMPONENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3181, 0)))

SUB_COMPONENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=SUB_COMPONENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

SUB_COMPONENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=SUB_COMPONENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

SUB_COMPONENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=SUB_COMPONENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_244 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_244
    del _BuildAutomaton_244
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3176, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3177, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3179, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3180, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3181, 0))
    counters.add(cc_6)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SUB_COMPONENT._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SUB_COMPONENT._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SUB_COMPONENT._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SUB_COMPONENT._UseForTag(pyxb.namespace.ExpandedName(None, 'SUB-COMPONENT-PATTERNS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3176, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SUB_COMPONENT._UseForTag(pyxb.namespace.ExpandedName(None, 'SUB-COMPONENT-PARAM-CONNECTORS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3177, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(SUB_COMPONENT._UseForTag(pyxb.namespace.ExpandedName(None, 'TABLE-ROW-CONNECTORS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3179, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(SUB_COMPONENT._UseForTag(pyxb.namespace.ExpandedName(None, 'ENV-DATA-CONNECTORS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3180, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(SUB_COMPONENT._UseForTag(pyxb.namespace.ExpandedName(None, 'DTC-CONNECTORS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3181, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SUB_COMPONENT._Automaton = _BuildAutomaton_244()




SUB_COMPONENT_PARAM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-SNREF'), SNREF, scope=SUB_COMPONENT_PARAM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3191, 0)))

SUB_COMPONENT_PARAM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-REFS'), OUT_PARAM_IF_REFS, scope=SUB_COMPONENT_PARAM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3192, 0)))

SUB_COMPONENT_PARAM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-REFS'), IN_PARAM_IF_REFS, scope=SUB_COMPONENT_PARAM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3193, 0)))

SUB_COMPONENT_PARAM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=SUB_COMPONENT_PARAM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

SUB_COMPONENT_PARAM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=SUB_COMPONENT_PARAM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

SUB_COMPONENT_PARAM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=SUB_COMPONENT_PARAM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_245 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_245
    del _BuildAutomaton_245
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3192, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3193, 0))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SUB_COMPONENT_PARAM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SUB_COMPONENT_PARAM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SUB_COMPONENT_PARAM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SUB_COMPONENT_PARAM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3191, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SUB_COMPONENT_PARAM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3192, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SUB_COMPONENT_PARAM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3193, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SUB_COMPONENT_PARAM_CONNECTOR._Automaton = _BuildAutomaton_245()




SUB_COMPONENT_PARAM_CONNECTORS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SUBCOMPONENT-PARAM-CONNECTOR'), SUB_COMPONENT_PARAM_CONNECTOR, scope=SUB_COMPONENT_PARAM_CONNECTORS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3201, 0)))

def _BuildAutomaton_246 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_246
    del _BuildAutomaton_246
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SUB_COMPONENT_PARAM_CONNECTORS._UseForTag(pyxb.namespace.ExpandedName(None, 'SUBCOMPONENT-PARAM-CONNECTOR')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3201, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SUB_COMPONENT_PARAM_CONNECTORS._Automaton = _BuildAutomaton_246()




SUB_COMPONENT_PATTERN._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MATCHING-PARAMETERS'), MATCHING_PARAMETERS, scope=SUB_COMPONENT_PATTERN, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3207, 0)))

def _BuildAutomaton_247 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_247
    del _BuildAutomaton_247
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SUB_COMPONENT_PATTERN._UseForTag(pyxb.namespace.ExpandedName(None, 'MATCHING-PARAMETERS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3207, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SUB_COMPONENT_PATTERN._Automaton = _BuildAutomaton_247()




SUB_COMPONENT_PATTERNS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SUB-COMPONENTPATTERN'), SUB_COMPONENT_PATTERN, scope=SUB_COMPONENT_PATTERNS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3213, 0)))

def _BuildAutomaton_248 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_248
    del _BuildAutomaton_248
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SUB_COMPONENT_PATTERNS._UseForTag(pyxb.namespace.ExpandedName(None, 'SUB-COMPONENTPATTERN')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3213, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SUB_COMPONENT_PATTERNS._Automaton = _BuildAutomaton_248()




SUB_COMPONENTS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SUB-COMPONENT'), SUB_COMPONENT, scope=SUB_COMPONENTS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3219, 0)))

def _BuildAutomaton_249 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_249
    del _BuildAutomaton_249
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SUB_COMPONENTS._UseForTag(pyxb.namespace.ExpandedName(None, 'SUB-COMPONENT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3219, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SUB_COMPONENTS._Automaton = _BuildAutomaton_249()




SUPPORTED_DYN_IDS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SUPPORTED-DYN-ID'), SUPPORTED_DYN_ID, scope=SUPPORTED_DYN_IDS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3231, 0)))

def _BuildAutomaton_250 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_250
    del _BuildAutomaton_250
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SUPPORTED_DYN_IDS._UseForTag(pyxb.namespace.ExpandedName(None, 'SUPPORTED-DYN-ID')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3231, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SUPPORTED_DYN_IDS._Automaton = _BuildAutomaton_250()




SWITCH_KEY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION'), pyxb.binding.datatypes.unsignedInt, scope=SWITCH_KEY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3237, 0)))

SWITCH_KEY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BIT-POSITION'), STD_ANON_12, scope=SWITCH_KEY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3238, 0)))

SWITCH_KEY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-REF'), ODXLINK, scope=SWITCH_KEY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3245, 0)))

def _BuildAutomaton_251 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_251
    del _BuildAutomaton_251
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3238, 0))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SWITCH_KEY._UseForTag(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3237, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SWITCH_KEY._UseForTag(pyxb.namespace.ExpandedName(None, 'BIT-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3238, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SWITCH_KEY._UseForTag(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3245, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SWITCH_KEY._Automaton = _BuildAutomaton_251()




SW_VARIABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ORIGIN'), pyxb.binding.datatypes.string, scope=SW_VARIABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3252, 0)))

SW_VARIABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=SW_VARIABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

SW_VARIABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=SW_VARIABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

SW_VARIABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=SW_VARIABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_252 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_252
    del _BuildAutomaton_252
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3252, 0))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SW_VARIABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SW_VARIABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SW_VARIABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SW_VARIABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'ORIGIN')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3252, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SW_VARIABLE._Automaton = _BuildAutomaton_252()




SW_VARIABLES._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SW-VARIABLE'), SW_VARIABLE, scope=SW_VARIABLES, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3259, 0)))

def _BuildAutomaton_253 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_253
    del _BuildAutomaton_253
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SW_VARIABLES._UseForTag(pyxb.namespace.ExpandedName(None, 'SW-VARIABLE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3259, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SW_VARIABLES._Automaton = _BuildAutomaton_253()




SYSTEM_ITEMS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SYSTEM-ITEM'), SYSTEM_ITEM, scope=SYSTEM_ITEMS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3285, 0)))

def _BuildAutomaton_254 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_254
    del _BuildAutomaton_254
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SYSTEM_ITEMS._UseForTag(pyxb.namespace.ExpandedName(None, 'SYSTEM-ITEM')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3285, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SYSTEM_ITEMS._Automaton = _BuildAutomaton_254()




TABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'KEY-LABEL'), pyxb.binding.datatypes.string, scope=TABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3292, 0)))

TABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'STRUCT-LABEL'), pyxb.binding.datatypes.string, scope=TABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3293, 0)))

TABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), ADMIN_DATA, scope=TABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3294, 0)))

TABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'KEY-DOP-REF'), ODXLINK, scope=TABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3295, 0)))

TABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TABLE-DIAG-COMM-CONNECTORS'), TABLE_DIAG_COMM_CONNECTORS, scope=TABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3297, 0)))

TABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDGS'), SDGS, scope=TABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3299, 0)))

TABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=TABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

TABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=TABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

TABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=TABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

TABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TABLE-ROW-REF'), ODXLINK, scope=TABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3760, 0)))

TABLE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TABLE-ROW'), TABLE_ROW, scope=TABLE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3761, 0)))

def _BuildAutomaton_255 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_255
    del _BuildAutomaton_255
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3292, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3293, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3294, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3295, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3297, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3299, 0))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'KEY-LABEL')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3292, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'STRUCT-LABEL')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3293, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3294, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'KEY-DOP-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3295, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'TABLE-ROW-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3760, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'TABLE-ROW')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3761, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'TABLE-DIAG-COMM-CONNECTORS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3297, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TABLE._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3299, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TABLE._Automaton = _BuildAutomaton_255()




TABLE_DIAG_COMM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SEMANTIC'), pyxb.binding.datatypes.string, scope=TABLE_DIAG_COMM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3308, 0)))

TABLE_DIAG_COMM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-REF'), ODXLINK, scope=TABLE_DIAG_COMM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3310, 0)))

TABLE_DIAG_COMM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-SNREF'), SNREF, scope=TABLE_DIAG_COMM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3311, 0)))

def _BuildAutomaton_256 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_256
    del _BuildAutomaton_256
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE_DIAG_COMM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'SEMANTIC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3308, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TABLE_DIAG_COMM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3310, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TABLE_DIAG_COMM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3311, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TABLE_DIAG_COMM_CONNECTOR._Automaton = _BuildAutomaton_256()




TABLE_DIAG_COMM_CONNECTORS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TABLE-DIAG-COMMCONNECTOR'), TABLE_DIAG_COMM_CONNECTOR, scope=TABLE_DIAG_COMM_CONNECTORS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3318, 0)))

def _BuildAutomaton_257 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_257
    del _BuildAutomaton_257
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TABLE_DIAG_COMM_CONNECTORS._UseForTag(pyxb.namespace.ExpandedName(None, 'TABLE-DIAG-COMMCONNECTOR')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3318, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TABLE_DIAG_COMM_CONNECTORS._Automaton = _BuildAutomaton_257()




TABLE_ROW._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'KEY'), pyxb.binding.datatypes.string, scope=TABLE_ROW, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3349, 0)))

TABLE_ROW._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-REF'), ODXLINK, scope=TABLE_ROW, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3352, 0)))

TABLE_ROW._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-SNREF'), SNREF, scope=TABLE_ROW, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3353, 0)))

TABLE_ROW._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'STRUCTURE-REF'), ODXLINK, scope=TABLE_ROW, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3356, 0)))

TABLE_ROW._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'STRUCTURE-SNREF'), SNREF, scope=TABLE_ROW, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3357, 0)))

TABLE_ROW._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDGS'), SDGS, scope=TABLE_ROW, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3360, 0)))

TABLE_ROW._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AUDIENCE'), AUDIENCE, scope=TABLE_ROW, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3361, 0)))

TABLE_ROW._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASS-REFS'), FUNCT_CLASS_REFS, scope=TABLE_ROW, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3362, 0)))

TABLE_ROW._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'STATE-TRANSITION-REFS'), STATE_TRANSITION_REFS, scope=TABLE_ROW, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3363, 0)))

TABLE_ROW._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PRE-CONDITION-STATE-REFS'), PRE_CONDITION_STATE_REFS, scope=TABLE_ROW, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3364, 0)))

TABLE_ROW._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), ADMIN_DATA, scope=TABLE_ROW, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3366, 0)))

TABLE_ROW._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=TABLE_ROW, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

TABLE_ROW._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=TABLE_ROW, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

TABLE_ROW._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=TABLE_ROW, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_258 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_258
    del _BuildAutomaton_258
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3351, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3355, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3360, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3361, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3362, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3363, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3364, 0))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3366, 0))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE_ROW._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE_ROW._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE_ROW._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TABLE_ROW._UseForTag(pyxb.namespace.ExpandedName(None, 'KEY')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3349, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TABLE_ROW._UseForTag(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3352, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TABLE_ROW._UseForTag(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3353, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TABLE_ROW._UseForTag(pyxb.namespace.ExpandedName(None, 'STRUCTURE-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3356, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TABLE_ROW._UseForTag(pyxb.namespace.ExpandedName(None, 'STRUCTURE-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3357, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TABLE_ROW._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3360, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TABLE_ROW._UseForTag(pyxb.namespace.ExpandedName(None, 'AUDIENCE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3361, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TABLE_ROW._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASS-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3362, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TABLE_ROW._UseForTag(pyxb.namespace.ExpandedName(None, 'STATE-TRANSITION-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3363, 0))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(TABLE_ROW._UseForTag(pyxb.namespace.ExpandedName(None, 'PRE-CONDITION-STATE-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3364, 0))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(TABLE_ROW._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3366, 0))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TABLE_ROW._Automaton = _BuildAutomaton_258()




TABLE_ROW_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TABLE-REF'), ODXLINK, scope=TABLE_ROW_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3379, 0)))

TABLE_ROW_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TABLE-ROW-SNREF'), SNREF, scope=TABLE_ROW_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3380, 0)))

TABLE_ROW_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=TABLE_ROW_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

TABLE_ROW_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=TABLE_ROW_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

TABLE_ROW_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=TABLE_ROW_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_259 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_259
    del _BuildAutomaton_259
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE_ROW_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE_ROW_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE_ROW_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE_ROW_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'TABLE-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3379, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TABLE_ROW_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'TABLE-ROW-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3380, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TABLE_ROW_CONNECTOR._Automaton = _BuildAutomaton_259()




TABLE_ROW_CONNECTORS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TABLE-ROW-CONNECTOR'), TABLE_ROW_CONNECTOR, scope=TABLE_ROW_CONNECTORS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3386, 0)))

def _BuildAutomaton_260 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_260
    del _BuildAutomaton_260
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TABLE_ROW_CONNECTORS._UseForTag(pyxb.namespace.ExpandedName(None, 'TABLE-ROW-CONNECTOR')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3386, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TABLE_ROW_CONNECTORS._Automaton = _BuildAutomaton_260()




TABLES._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TABLE'), TABLE, scope=TABLES, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3392, 0)))

def _BuildAutomaton_261 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_261
    del _BuildAutomaton_261
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TABLES._UseForTag(pyxb.namespace.ExpandedName(None, 'TABLE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3392, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TABLES._Automaton = _BuildAutomaton_261()




TEAM_MEMBER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ROLES'), ROLES, scope=TEAM_MEMBER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3413, 0)))

TEAM_MEMBER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DEPARTMENT'), pyxb.binding.datatypes.string, scope=TEAM_MEMBER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3414, 0)))

TEAM_MEMBER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ADDRESS'), pyxb.binding.datatypes.string, scope=TEAM_MEMBER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3415, 0)))

TEAM_MEMBER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ZIP'), pyxb.binding.datatypes.string, scope=TEAM_MEMBER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3416, 0)))

TEAM_MEMBER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CITY'), pyxb.binding.datatypes.string, scope=TEAM_MEMBER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3417, 0)))

TEAM_MEMBER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PHONE'), pyxb.binding.datatypes.string, scope=TEAM_MEMBER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3418, 0)))

TEAM_MEMBER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FAX'), pyxb.binding.datatypes.string, scope=TEAM_MEMBER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3419, 0)))

TEAM_MEMBER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EMAIL'), pyxb.binding.datatypes.string, scope=TEAM_MEMBER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3420, 0)))

TEAM_MEMBER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=TEAM_MEMBER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

TEAM_MEMBER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=TEAM_MEMBER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

TEAM_MEMBER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=TEAM_MEMBER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_262 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_262
    del _BuildAutomaton_262
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3413, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3414, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3415, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3416, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3417, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3418, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3419, 0))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3420, 0))
    counters.add(cc_9)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TEAM_MEMBER._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TEAM_MEMBER._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TEAM_MEMBER._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TEAM_MEMBER._UseForTag(pyxb.namespace.ExpandedName(None, 'ROLES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3413, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TEAM_MEMBER._UseForTag(pyxb.namespace.ExpandedName(None, 'DEPARTMENT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3414, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TEAM_MEMBER._UseForTag(pyxb.namespace.ExpandedName(None, 'ADDRESS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3415, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TEAM_MEMBER._UseForTag(pyxb.namespace.ExpandedName(None, 'ZIP')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3416, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TEAM_MEMBER._UseForTag(pyxb.namespace.ExpandedName(None, 'CITY')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3417, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TEAM_MEMBER._UseForTag(pyxb.namespace.ExpandedName(None, 'PHONE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3418, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(TEAM_MEMBER._UseForTag(pyxb.namespace.ExpandedName(None, 'FAX')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3419, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(TEAM_MEMBER._UseForTag(pyxb.namespace.ExpandedName(None, 'EMAIL')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3420, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TEAM_MEMBER._Automaton = _BuildAutomaton_262()




TEAM_MEMBERS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TEAM-MEMBER'), TEAM_MEMBER, scope=TEAM_MEMBERS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3428, 0)))

def _BuildAutomaton_263 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_263
    del _BuildAutomaton_263
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TEAM_MEMBERS._UseForTag(pyxb.namespace.ExpandedName(None, 'TEAM-MEMBER')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3428, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TEAM_MEMBERS._Automaton = _BuildAutomaton_263()




UNIT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DISPLAY-NAME'), pyxb.binding.datatypes.string, scope=UNIT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3467, 0)))

UNIT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FACTOR-SI-TO-UNIT'), pyxb.binding.datatypes.double, scope=UNIT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3468, 0)))

UNIT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OFFSET-SI-TO-UNIT'), pyxb.binding.datatypes.double, scope=UNIT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3469, 0)))

UNIT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PHYSICAL-DIMENSION-REF'), ODXLINK, scope=UNIT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3470, 0)))

UNIT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=UNIT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

UNIT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=UNIT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

UNIT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=UNIT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_264 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_264
    del _BuildAutomaton_264
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3468, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3469, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3470, 0))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UNIT._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UNIT._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UNIT._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UNIT._UseForTag(pyxb.namespace.ExpandedName(None, 'DISPLAY-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3467, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(UNIT._UseForTag(pyxb.namespace.ExpandedName(None, 'FACTOR-SI-TO-UNIT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3468, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(UNIT._UseForTag(pyxb.namespace.ExpandedName(None, 'OFFSET-SI-TO-UNIT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3469, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(UNIT._UseForTag(pyxb.namespace.ExpandedName(None, 'PHYSICAL-DIMENSION-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3470, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
UNIT._Automaton = _BuildAutomaton_264()




UNIT_GROUP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CATEGORY'), UNIT_GROUP_CATEGORY, scope=UNIT_GROUP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3479, 0)))

UNIT_GROUP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UNIT-REFS'), UNIT_REFS, scope=UNIT_GROUP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3480, 0)))

UNIT_GROUP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=UNIT_GROUP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

UNIT_GROUP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=UNIT_GROUP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

UNIT_GROUP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=UNIT_GROUP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_265 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_265
    del _BuildAutomaton_265
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3480, 0))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UNIT_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UNIT_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UNIT_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UNIT_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'CATEGORY')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3479, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(UNIT_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'UNIT-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3480, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
UNIT_GROUP._Automaton = _BuildAutomaton_265()




UNIT_GROUPS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UNIT-GROUP'), UNIT_GROUP, scope=UNIT_GROUPS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3493, 0)))

def _BuildAutomaton_266 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_266
    del _BuildAutomaton_266
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UNIT_GROUPS._UseForTag(pyxb.namespace.ExpandedName(None, 'UNIT-GROUP')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3493, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
UNIT_GROUPS._Automaton = _BuildAutomaton_266()




UNIT_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UNIT-REF'), ODXLINK, scope=UNIT_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3499, 0)))

def _BuildAutomaton_267 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_267
    del _BuildAutomaton_267
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UNIT_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'UNIT-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3499, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
UNIT_REFS._Automaton = _BuildAutomaton_267()




UNITS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UNIT'), UNIT, scope=UNITS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3505, 0)))

def _BuildAutomaton_268 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_268
    del _BuildAutomaton_268
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UNITS._UseForTag(pyxb.namespace.ExpandedName(None, 'UNIT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3505, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
UNITS._Automaton = _BuildAutomaton_268()




UNIT_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), ADMIN_DATA, scope=UNIT_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3511, 0)))

UNIT_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UNIT-GROUPS'), UNIT_GROUPS, scope=UNIT_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3512, 0)))

UNIT_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UNITS'), UNITS, scope=UNIT_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3513, 0)))

UNIT_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PHYSICAL-DIMENSIONS'), PHYSICAL_DIMENSIONS, scope=UNIT_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3514, 0)))

UNIT_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDGS'), SDGS, scope=UNIT_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3515, 0)))

def _BuildAutomaton_269 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_269
    del _BuildAutomaton_269
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3511, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3512, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3513, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3514, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3515, 0))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UNIT_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3511, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(UNIT_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'UNIT-GROUPS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3512, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(UNIT_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'UNITS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3513, 0))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(UNIT_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'PHYSICAL-DIMENSIONS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3514, 0))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(UNIT_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3515, 0))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
UNIT_SPEC._Automaton = _BuildAutomaton_269()




VALID_BASE_VARIANT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ECU-VARIANT-SNREFS'), ECU_VARIANT_SNREFS, scope=VALID_BASE_VARIANT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3535, 0)))

VALID_BASE_VARIANT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BASE-VARIANT-SNREF'), SNREF, scope=VALID_BASE_VARIANT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3536, 0)))

def _BuildAutomaton_270 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_270
    del _BuildAutomaton_270
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3535, 0))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VALID_BASE_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'ECU-VARIANT-SNREFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3535, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VALID_BASE_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'BASE-VARIANT-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3536, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VALID_BASE_VARIANT._Automaton = _BuildAutomaton_270()




VALID_BASE_VARIANTS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VALID-BASE-VARIANT'), VALID_BASE_VARIANT, scope=VALID_BASE_VARIANTS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3542, 0)))

def _BuildAutomaton_271 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_271
    del _BuildAutomaton_271
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VALID_BASE_VARIANTS._UseForTag(pyxb.namespace.ExpandedName(None, 'VALID-BASE-VARIANT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3542, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VALID_BASE_VARIANTS._Automaton = _BuildAutomaton_271()




VARIABLE_GROUP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=VARIABLE_GROUP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

VARIABLE_GROUP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=VARIABLE_GROUP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

VARIABLE_GROUP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=VARIABLE_GROUP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_272 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_272
    del _BuildAutomaton_272
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VARIABLE_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(VARIABLE_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(VARIABLE_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VARIABLE_GROUP._Automaton = _BuildAutomaton_272()




VARIABLE_GROUPS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VARIABLE-GROUP'), VARIABLE_GROUP, scope=VARIABLE_GROUPS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3586, 0)))

def _BuildAutomaton_273 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_273
    del _BuildAutomaton_273
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VARIABLE_GROUPS._UseForTag(pyxb.namespace.ExpandedName(None, 'VARIABLE-GROUP')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3586, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VARIABLE_GROUPS._Automaton = _BuildAutomaton_273()




VEHICLE_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VEHICLE-CONNECTOR-PINS'), VEHICLE_CONNECTOR_PINS, scope=VEHICLE_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3593, 0)))

VEHICLE_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=VEHICLE_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

VEHICLE_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=VEHICLE_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

VEHICLE_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=VEHICLE_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_274 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_274
    del _BuildAutomaton_274
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3593, 0))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VEHICLE_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(VEHICLE_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(VEHICLE_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(VEHICLE_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'VEHICLE-CONNECTOR-PINS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3593, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VEHICLE_CONNECTOR._Automaton = _BuildAutomaton_274()




VEHICLE_CONNECTOR_PIN_REFS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VEHICLE-CONNECTOR-PIN-REF'), ODXLINK, scope=VEHICLE_CONNECTOR_PIN_REFS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3610, 0)))

def _BuildAutomaton_275 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_275
    del _BuildAutomaton_275
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=2, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3610, 0))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(VEHICLE_CONNECTOR_PIN_REFS._UseForTag(pyxb.namespace.ExpandedName(None, 'VEHICLE-CONNECTOR-PIN-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3610, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VEHICLE_CONNECTOR_PIN_REFS._Automaton = _BuildAutomaton_275()




VEHICLE_CONNECTOR_PINS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VEHICLE-CONNECTORPIN'), VEHICLE_CONNECTOR_PIN, scope=VEHICLE_CONNECTOR_PINS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3616, 0)))

def _BuildAutomaton_276 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_276
    del _BuildAutomaton_276
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VEHICLE_CONNECTOR_PINS._UseForTag(pyxb.namespace.ExpandedName(None, 'VEHICLE-CONNECTORPIN')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3616, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VEHICLE_CONNECTOR_PINS._Automaton = _BuildAutomaton_276()




VEHICLE_CONNECTORS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VEHICLE-CONNECTOR'), VEHICLE_CONNECTOR, scope=VEHICLE_CONNECTORS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3622, 0)))

def _BuildAutomaton_277 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_277
    del _BuildAutomaton_277
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VEHICLE_CONNECTORS._UseForTag(pyxb.namespace.ExpandedName(None, 'VEHICLE-CONNECTOR')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3622, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VEHICLE_CONNECTORS._Automaton = _BuildAutomaton_277()




VEHICLE_INFORMATION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'INFO-COMPONENT-REFS'), INFO_COMPONENT_REFS, scope=VEHICLE_INFORMATION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3629, 0)))

VEHICLE_INFORMATION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VEHICLE-CONNECTORS'), VEHICLE_CONNECTORS, scope=VEHICLE_INFORMATION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3630, 0)))

VEHICLE_INFORMATION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LOGICAL-LINKS'), LOGICAL_LINKS, scope=VEHICLE_INFORMATION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3631, 0)))

VEHICLE_INFORMATION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ECU-GROUPS'), ECU_GROUPS, scope=VEHICLE_INFORMATION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3632, 0)))

VEHICLE_INFORMATION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PHYSICAL-VEHICLE-LINKS'), PHYSICAL_VEHICLE_LINKS, scope=VEHICLE_INFORMATION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3633, 0)))

VEHICLE_INFORMATION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=VEHICLE_INFORMATION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

VEHICLE_INFORMATION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=VEHICLE_INFORMATION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

VEHICLE_INFORMATION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=VEHICLE_INFORMATION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_278 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_278
    del _BuildAutomaton_278
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3629, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3630, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3631, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3632, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3633, 0))
    counters.add(cc_6)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VEHICLE_INFORMATION._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(VEHICLE_INFORMATION._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(VEHICLE_INFORMATION._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(VEHICLE_INFORMATION._UseForTag(pyxb.namespace.ExpandedName(None, 'INFO-COMPONENT-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3629, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(VEHICLE_INFORMATION._UseForTag(pyxb.namespace.ExpandedName(None, 'VEHICLE-CONNECTORS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3630, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(VEHICLE_INFORMATION._UseForTag(pyxb.namespace.ExpandedName(None, 'LOGICAL-LINKS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3631, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(VEHICLE_INFORMATION._UseForTag(pyxb.namespace.ExpandedName(None, 'ECU-GROUPS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3632, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(VEHICLE_INFORMATION._UseForTag(pyxb.namespace.ExpandedName(None, 'PHYSICAL-VEHICLE-LINKS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3633, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VEHICLE_INFORMATION._Automaton = _BuildAutomaton_278()




VEHICLE_INFORMATIONS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VEHICLE-INFORMATION'), VEHICLE_INFORMATION, scope=VEHICLE_INFORMATIONS, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3640, 0)))

def _BuildAutomaton_279 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_279
    del _BuildAutomaton_279
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VEHICLE_INFORMATIONS._UseForTag(pyxb.namespace.ExpandedName(None, 'VEHICLE-INFORMATION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3640, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VEHICLE_INFORMATIONS._Automaton = _BuildAutomaton_279()




WRITE_DIAG_COMM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'WRITE-DIAG-COMM-REF'), ODXLINK, scope=WRITE_DIAG_COMM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3679, 0)))

WRITE_DIAG_COMM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'WRITE-DIAG-COMM-SNREF'), SNREF, scope=WRITE_DIAG_COMM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3680, 0)))

WRITE_DIAG_COMM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'WRITE-PARAM-VALUES'), WRITE_PARAM_VALUES, scope=WRITE_DIAG_COMM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3682, 0)))

WRITE_DIAG_COMM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'WRITE-DATA-SNREF'), SNREF, scope=WRITE_DIAG_COMM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3684, 0)))

WRITE_DIAG_COMM_CONNECTOR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'WRITE-DATA-SNPATHREF'), SNPATHREF, scope=WRITE_DIAG_COMM_CONNECTOR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3685, 0)))

def _BuildAutomaton_280 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_280
    del _BuildAutomaton_280
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3682, 0))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(WRITE_DIAG_COMM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'WRITE-DIAG-COMM-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3679, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(WRITE_DIAG_COMM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'WRITE-DIAG-COMM-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3680, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(WRITE_DIAG_COMM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'WRITE-PARAM-VALUES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3682, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(WRITE_DIAG_COMM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'WRITE-DATA-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3684, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(WRITE_DIAG_COMM_CONNECTOR._UseForTag(pyxb.namespace.ExpandedName(None, 'WRITE-DATA-SNPATHREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3685, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
WRITE_DIAG_COMM_CONNECTOR._Automaton = _BuildAutomaton_280()




WRITE_PARAM_VALUE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PHYS-CONSTANT-VALUE'), pyxb.binding.datatypes.string, scope=WRITE_PARAM_VALUE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3692, 0)))

WRITE_PARAM_VALUE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNREF'), SNREF, scope=WRITE_PARAM_VALUE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3694, 0)))

WRITE_PARAM_VALUE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNPATHREF'), SNPATHREF, scope=WRITE_PARAM_VALUE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3695, 0)))

def _BuildAutomaton_281 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_281
    del _BuildAutomaton_281
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(WRITE_PARAM_VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'PHYS-CONSTANT-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3692, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(WRITE_PARAM_VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3694, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(WRITE_PARAM_VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNPATHREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3695, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
WRITE_PARAM_VALUE._Automaton = _BuildAutomaton_281()




WRITE_PARAM_VALUES._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'WRITE-PARAM-VALUE'), WRITE_PARAM_VALUE, scope=WRITE_PARAM_VALUES, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3703, 0)))

def _BuildAutomaton_282 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_282
    del _BuildAutomaton_282
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(WRITE_PARAM_VALUES._UseForTag(pyxb.namespace.ExpandedName(None, 'WRITE-PARAM-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3703, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
WRITE_PARAM_VALUES._Automaton = _BuildAutomaton_282()




XDOC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NUMBER'), pyxb.binding.datatypes.string, scope=XDOC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3710, 0)))

XDOC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'STATE'), pyxb.binding.datatypes.string, scope=XDOC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3711, 0)))

XDOC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DATE'), pyxb.binding.datatypes.dateTime, scope=XDOC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3712, 0)))

XDOC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PUBLISHER'), pyxb.binding.datatypes.string, scope=XDOC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3713, 0)))

XDOC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'URL'), pyxb.binding.datatypes.string, scope=XDOC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3714, 0)))

XDOC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'POSITION'), pyxb.binding.datatypes.string, scope=XDOC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3715, 0)))

XDOC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=XDOC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

XDOC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=XDOC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

XDOC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=XDOC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_283 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_283
    del _BuildAutomaton_283
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3710, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3711, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3712, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3713, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3714, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3715, 0))
    counters.add(cc_7)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(XDOC._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(XDOC._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(XDOC._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(XDOC._UseForTag(pyxb.namespace.ExpandedName(None, 'NUMBER')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3710, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(XDOC._UseForTag(pyxb.namespace.ExpandedName(None, 'STATE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3711, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(XDOC._UseForTag(pyxb.namespace.ExpandedName(None, 'DATE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3712, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(XDOC._UseForTag(pyxb.namespace.ExpandedName(None, 'PUBLISHER')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3713, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(XDOC._UseForTag(pyxb.namespace.ExpandedName(None, 'URL')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3714, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(XDOC._UseForTag(pyxb.namespace.ExpandedName(None, 'POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3715, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
XDOC._Automaton = _BuildAutomaton_283()




ADDRDEF_FILTER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FILTER-END'), pyxb.binding.datatypes.hexBinary, scope=ADDRDEF_FILTER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 25, 0)))

def _BuildAutomaton_284 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_284
    del _BuildAutomaton_284
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ADDRDEF_FILTER._UseForTag(pyxb.namespace.ExpandedName(None, 'FILTER-START')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1467, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ADDRDEF_FILTER._UseForTag(pyxb.namespace.ExpandedName(None, 'FILTER-END')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 25, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ADDRDEF_FILTER._Automaton = _BuildAutomaton_284()




ADDRDEF_PHYS_SEGMENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'END-ADDRESS'), pyxb.binding.datatypes.hexBinary, scope=ADDRDEF_PHYS_SEGMENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 35, 0)))

def _BuildAutomaton_285 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_285
    del _BuildAutomaton_285
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2511, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2512, 0))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ADDRDEF_PHYS_SEGMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ADDRDEF_PHYS_SEGMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ADDRDEF_PHYS_SEGMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ADDRDEF_PHYS_SEGMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'FILLBYTE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2511, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ADDRDEF_PHYS_SEGMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'BLOCK-SIZE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2512, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ADDRDEF_PHYS_SEGMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'START-ADDRESS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2513, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ADDRDEF_PHYS_SEGMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'END-ADDRESS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 35, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ADDRDEF_PHYS_SEGMENT._Automaton = _BuildAutomaton_285()




BASE_COMPARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=BASE_COMPARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

BASE_COMPARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=BASE_COMPARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

BASE_COMPARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=BASE_COMPARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_286 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_286
    del _BuildAutomaton_286
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(BASE_COMPARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BASE_COMPARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(BASE_COMPARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
BASE_COMPARAM._Automaton = _BuildAutomaton_286()




COMM_RELATION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=COMM_RELATION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 225, 0)))

COMM_RELATION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RELATION-TYPE'), pyxb.binding.datatypes.string, scope=COMM_RELATION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 226, 0)))

COMM_RELATION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-REF'), ODXLINK, scope=COMM_RELATION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 228, 0)))

COMM_RELATION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-SNREF'), SNREF, scope=COMM_RELATION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 229, 0)))

COMM_RELATION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNREF'), SNREF, scope=COMM_RELATION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 233, 0)))

COMM_RELATION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNPATHREF'), SNPATHREF, scope=COMM_RELATION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 234, 0)))

COMM_RELATION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNREF'), SNREF, scope=COMM_RELATION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 237, 0)))

COMM_RELATION._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNPATHREF'), SNPATHREF, scope=COMM_RELATION, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 238, 0)))

def _BuildAutomaton_287 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_287
    del _BuildAutomaton_287
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 225, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 232, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 236, 0))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(COMM_RELATION._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 225, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(COMM_RELATION._UseForTag(pyxb.namespace.ExpandedName(None, 'RELATION-TYPE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 226, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMM_RELATION._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 228, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMM_RELATION._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 229, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(COMM_RELATION._UseForTag(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 233, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(COMM_RELATION._UseForTag(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNPATHREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 234, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(COMM_RELATION._UseForTag(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 237, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(COMM_RELATION._UseForTag(pyxb.namespace.ExpandedName(None, 'OUT-PARAM-IF-SNPATHREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 238, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMM_RELATION._Automaton = _BuildAutomaton_287()




COMPARAM_REF._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SIMPLE-VALUE'), SIMPLE_VALUE, scope=COMPARAM_REF, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 326, 0)))

COMPARAM_REF._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPLEX-VALUE'), COMPLEX_VALUE, scope=COMPARAM_REF, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 327, 0)))

COMPARAM_REF._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=COMPARAM_REF, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 329, 0)))

COMPARAM_REF._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PROTOCOL-SNREF'), SNREF, scope=COMPARAM_REF, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 330, 0)))

COMPARAM_REF._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PROT-STACK-SNREF'), SNREF, scope=COMPARAM_REF, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 331, 0)))

def _BuildAutomaton_288 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_288
    del _BuildAutomaton_288
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 326, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 327, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 329, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 330, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 331, 0))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(COMPARAM_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'SIMPLE-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 326, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(COMPARAM_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPLEX-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 327, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(COMPARAM_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 329, 0))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(COMPARAM_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'PROTOCOL-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 330, 0))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(COMPARAM_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'PROT-STACK-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 331, 0))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
COMPARAM_REF._Automaton = _BuildAutomaton_288()




COMPARAM_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PROT-STACKS'), PROT_STACKS, scope=COMPARAM_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 352, 0)))

def _BuildAutomaton_289 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_289
    del _BuildAutomaton_289
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2311, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2312, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2313, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 352, 0))
    counters.add(cc_5)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPARAM_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(COMPARAM_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(COMPARAM_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(COMPARAM_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2311, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(COMPARAM_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPANY-DATAS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2312, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(COMPARAM_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2313, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(COMPARAM_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'PROT-STACKS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 352, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPARAM_SPEC._Automaton = _BuildAutomaton_289()




COMPARAM_SUBSET._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPARAMS'), COMPARAMS, scope=COMPARAM_SUBSET, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 362, 0)))

COMPARAM_SUBSET._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPLEX-COMPARAMS'), COMPLEX_COMPARAMS, scope=COMPARAM_SUBSET, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 363, 0)))

COMPARAM_SUBSET._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROPS'), DATA_OBJECT_PROPS, scope=COMPARAM_SUBSET, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 364, 0)))

COMPARAM_SUBSET._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UNIT-SPEC'), UNIT_SPEC, scope=COMPARAM_SUBSET, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 365, 0)))

def _BuildAutomaton_290 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_290
    del _BuildAutomaton_290
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2311, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2312, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2313, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 362, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 363, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 364, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 365, 0))
    counters.add(cc_8)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPARAM_SUBSET._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(COMPARAM_SUBSET._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(COMPARAM_SUBSET._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(COMPARAM_SUBSET._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2311, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(COMPARAM_SUBSET._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPANY-DATAS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2312, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(COMPARAM_SUBSET._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2313, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(COMPARAM_SUBSET._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPARAMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 362, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(COMPARAM_SUBSET._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPLEX-COMPARAMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 363, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(COMPARAM_SUBSET._UseForTag(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROPS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 364, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(COMPARAM_SUBSET._UseForTag(pyxb.namespace.ExpandedName(None, 'UNIT-SPEC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 365, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPARAM_SUBSET._Automaton = _BuildAutomaton_290()




def _BuildAutomaton_291 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_291
    del _BuildAutomaton_291
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPLEX_DOP._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(COMPLEX_DOP._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(COMPLEX_DOP._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(COMPLEX_DOP._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(COMPLEX_DOP._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPLEX_DOP._Automaton = _BuildAutomaton_291()




COMPLEX_VALUE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SIMPLE-VALUE'), SIMPLE_VALUE, scope=COMPLEX_VALUE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 415, 0)))

COMPLEX_VALUE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPLEX-VALUE'), COMPLEX_VALUE, scope=COMPLEX_VALUE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 416, 0)))

def _BuildAutomaton_292 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_292
    del _BuildAutomaton_292
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPLEX_VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'SIMPLE-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 415, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPLEX_VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPLEX-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 416, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPLEX_VALUE._Automaton = _BuildAutomaton_292()




def _BuildAutomaton_293 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_293
    del _BuildAutomaton_293
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 580, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 585, 0))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CONFIG_ID_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CONFIG_ID_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CONFIG_ID_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CONFIG_ID_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 579, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CONFIG_ID_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'BIT-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 580, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CONFIG_ID_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 582, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CONFIG_ID_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 583, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CONFIG_ID_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 585, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CONFIG_ID_ITEM._Automaton = _BuildAutomaton_293()




def _BuildAutomaton_294 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_294
    del _BuildAutomaton_294
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 580, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 585, 0))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DATA_ID_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DATA_ID_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DATA_ID_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DATA_ID_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 579, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DATA_ID_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'BIT-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 580, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DATA_ID_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 582, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DATA_ID_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 583, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DATA_ID_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 585, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DATA_ID_ITEM._Automaton = _BuildAutomaton_294()




DATA_OBJECT_PROP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPU-METHOD'), COMPU_METHOD, scope=DATA_OBJECT_PROP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 680, 0)))

DATA_OBJECT_PROP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-CODED-TYPE'), DIAG_CODED_TYPE, scope=DATA_OBJECT_PROP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 681, 0)))

DATA_OBJECT_PROP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PHYSICAL-TYPE'), PHYSICAL_TYPE, scope=DATA_OBJECT_PROP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 682, 0)))

DATA_OBJECT_PROP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'INTERNAL-CONSTR'), INTERNAL_CONSTR, scope=DATA_OBJECT_PROP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 683, 0)))

DATA_OBJECT_PROP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UNIT-REF'), ODXLINK, scope=DATA_OBJECT_PROP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 684, 0)))

DATA_OBJECT_PROP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PHYS-CONSTR'), INTERNAL_CONSTR, scope=DATA_OBJECT_PROP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 685, 0)))

def _BuildAutomaton_295 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_295
    del _BuildAutomaton_295
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 683, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 684, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 685, 0))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DATA_OBJECT_PROP._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DATA_OBJECT_PROP._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DATA_OBJECT_PROP._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DATA_OBJECT_PROP._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DATA_OBJECT_PROP._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DATA_OBJECT_PROP._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPU-METHOD')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 680, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DATA_OBJECT_PROP._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-CODED-TYPE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 681, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DATA_OBJECT_PROP._UseForTag(pyxb.namespace.ExpandedName(None, 'PHYSICAL-TYPE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 682, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DATA_OBJECT_PROP._UseForTag(pyxb.namespace.ExpandedName(None, 'INTERNAL-CONSTR')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 683, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(DATA_OBJECT_PROP._UseForTag(pyxb.namespace.ExpandedName(None, 'UNIT-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 684, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(DATA_OBJECT_PROP._UseForTag(pyxb.namespace.ExpandedName(None, 'PHYS-CONSTR')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 685, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DATA_OBJECT_PROP._Automaton = _BuildAutomaton_295()




DATA_RECORD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RULE'), pyxb.binding.datatypes.string, scope=DATA_RECORD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 700, 0)))

DATA_RECORD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'KEY'), pyxb.binding.datatypes.string, scope=DATA_RECORD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 701, 0)))

DATA_RECORD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DATA-ID'), IDENT_VALUE, scope=DATA_RECORD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 702, 0)))

DATA_RECORD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDGS'), SDGS, scope=DATA_RECORD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 703, 0)))

DATA_RECORD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DATAFILE'), DATAFILE, scope=DATA_RECORD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 705, 0)))

DATA_RECORD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DATA'), DATA, scope=DATA_RECORD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 706, 0)))

DATA_RECORD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AUDIENCE'), AUDIENCE, scope=DATA_RECORD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 708, 0)))

DATA_RECORD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=DATA_RECORD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

DATA_RECORD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=DATA_RECORD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

DATA_RECORD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=DATA_RECORD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_296 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_296
    del _BuildAutomaton_296
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 700, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 701, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 702, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 703, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 705, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 706, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 708, 0))
    counters.add(cc_8)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DATA_RECORD._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DATA_RECORD._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DATA_RECORD._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DATA_RECORD._UseForTag(pyxb.namespace.ExpandedName(None, 'RULE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 700, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DATA_RECORD._UseForTag(pyxb.namespace.ExpandedName(None, 'KEY')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 701, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DATA_RECORD._UseForTag(pyxb.namespace.ExpandedName(None, 'DATA-ID')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 702, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(DATA_RECORD._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 703, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(DATA_RECORD._UseForTag(pyxb.namespace.ExpandedName(None, 'DATAFILE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 705, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(DATA_RECORD._UseForTag(pyxb.namespace.ExpandedName(None, 'DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 706, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(DATA_RECORD._UseForTag(pyxb.namespace.ExpandedName(None, 'AUDIENCE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 708, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DATA_RECORD._Automaton = _BuildAutomaton_296()




DIAG_COMM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA'), ADMIN_DATA, scope=DIAG_COMM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 782, 0)))

DIAG_COMM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDGS'), SDGS, scope=DIAG_COMM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 783, 0)))

DIAG_COMM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASS-REFS'), FUNCT_CLASS_REFS, scope=DIAG_COMM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 784, 0)))

DIAG_COMM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AUDIENCE'), AUDIENCE, scope=DIAG_COMM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 785, 0)))

DIAG_COMM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PROTOCOL-SNREFS'), PROTOCOL_SNREFS, scope=DIAG_COMM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 786, 0)))

DIAG_COMM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RELATED-DIAG-COMM-REFS'), RELATED_DIAG_COMM_REFS, scope=DIAG_COMM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 787, 0)))

DIAG_COMM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PRE-CONDITION-STATE-REFS'), PRE_CONDITION_STATE_REFS, scope=DIAG_COMM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 788, 0)))

DIAG_COMM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'STATE-TRANSITION-REFS'), STATE_TRANSITION_REFS, scope=DIAG_COMM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 790, 0)))

DIAG_COMM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=DIAG_COMM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

DIAG_COMM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=DIAG_COMM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

DIAG_COMM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=DIAG_COMM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_297 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_297
    del _BuildAutomaton_297
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 782, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 783, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 784, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 785, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 786, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 787, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 788, 0))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 790, 0))
    counters.add(cc_9)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DIAG_COMM._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_COMM._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_COMM._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_COMM._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 782, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_COMM._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 783, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_COMM._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASS-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 784, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_COMM._UseForTag(pyxb.namespace.ExpandedName(None, 'AUDIENCE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 785, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_COMM._UseForTag(pyxb.namespace.ExpandedName(None, 'PROTOCOL-SNREFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 786, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_COMM._UseForTag(pyxb.namespace.ExpandedName(None, 'RELATED-DIAG-COMM-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 787, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_COMM._UseForTag(pyxb.namespace.ExpandedName(None, 'PRE-CONDITION-STATE-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 788, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_COMM._UseForTag(pyxb.namespace.ExpandedName(None, 'STATE-TRANSITION-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 790, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DIAG_COMM._Automaton = _BuildAutomaton_297()




DIAG_LAYER_CONTAINER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PROTOCOLS'), PROTOCOLS, scope=DIAG_LAYER_CONTAINER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 869, 0)))

DIAG_LAYER_CONTAINER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FUNCTIONAL-GROUPS'), FUNCTIONAL_GROUPS, scope=DIAG_LAYER_CONTAINER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 870, 0)))

DIAG_LAYER_CONTAINER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ECU-SHARED-DATAS'), ECU_SHARED_DATAS, scope=DIAG_LAYER_CONTAINER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 871, 0)))

DIAG_LAYER_CONTAINER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BASE-VARIANTS'), BASE_VARIANTS, scope=DIAG_LAYER_CONTAINER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 872, 0)))

DIAG_LAYER_CONTAINER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ECU-VARIANTS'), ECU_VARIANTS, scope=DIAG_LAYER_CONTAINER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 873, 0)))

def _BuildAutomaton_298 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_298
    del _BuildAutomaton_298
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2311, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2312, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2313, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 869, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 870, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 871, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 872, 0))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 873, 0))
    counters.add(cc_9)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER_CONTAINER._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER_CONTAINER._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER_CONTAINER._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER_CONTAINER._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2311, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER_CONTAINER._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPANY-DATAS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2312, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER_CONTAINER._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2313, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER_CONTAINER._UseForTag(pyxb.namespace.ExpandedName(None, 'PROTOCOLS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 869, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER_CONTAINER._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCTIONAL-GROUPS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 870, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER_CONTAINER._UseForTag(pyxb.namespace.ExpandedName(None, 'ECU-SHARED-DATAS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 871, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER_CONTAINER._UseForTag(pyxb.namespace.ExpandedName(None, 'BASE-VARIANTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 872, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_LAYER_CONTAINER._UseForTag(pyxb.namespace.ExpandedName(None, 'ECU-VARIANTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 873, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DIAG_LAYER_CONTAINER._Automaton = _BuildAutomaton_298()




DTC_DOP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-CODED-TYPE'), DIAG_CODED_TYPE, scope=DTC_DOP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1030, 0)))

DTC_DOP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PHYSICAL-TYPE'), PHYSICAL_TYPE, scope=DTC_DOP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1031, 0)))

DTC_DOP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPU-METHOD'), COMPU_METHOD, scope=DTC_DOP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1032, 0)))

DTC_DOP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DTCS'), DTCS, scope=DTC_DOP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1033, 0)))

DTC_DOP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LINKED-DTC-DOPS'), LINKED_DTC_DOPS, scope=DTC_DOP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1034, 0)))

def _BuildAutomaton_299 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_299
    del _BuildAutomaton_299
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1034, 0))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DTC_DOP._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DTC_DOP._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DTC_DOP._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DTC_DOP._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DTC_DOP._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DTC_DOP._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-CODED-TYPE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1030, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DTC_DOP._UseForTag(pyxb.namespace.ExpandedName(None, 'PHYSICAL-TYPE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1031, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DTC_DOP._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPU-METHOD')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1032, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DTC_DOP._UseForTag(pyxb.namespace.ExpandedName(None, 'DTCS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1033, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DTC_DOP._UseForTag(pyxb.namespace.ExpandedName(None, 'LINKED-DTC-DOPS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1034, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DTC_DOP._Automaton = _BuildAutomaton_299()




DYN_END_DOP_REF._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TERMINATION-VALUE'), pyxb.binding.datatypes.string, scope=DYN_END_DOP_REF, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1112, 0)))

def _BuildAutomaton_300 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_300
    del _BuildAutomaton_300
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DYN_END_DOP_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'TERMINATION-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1112, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DYN_END_DOP_REF._Automaton = _BuildAutomaton_300()




ECU_CONFIG._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CONFIG-DATAS'), CONFIG_DATAS, scope=ECU_CONFIG, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1147, 0)))

ECU_CONFIG._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ADDITIONAL-AUDIENCES'), ADDITIONAL_AUDIENCES, scope=ECU_CONFIG, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1148, 0)))

ECU_CONFIG._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CONFIG-DATADICTIONARY-SPEC'), CONFIG_DATA_DICTIONARY_SPEC, scope=ECU_CONFIG, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1150, 0)))

def _BuildAutomaton_301 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_301
    del _BuildAutomaton_301
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2311, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2312, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2313, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1148, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1150, 0))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ECU_CONFIG._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ECU_CONFIG._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ECU_CONFIG._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ECU_CONFIG._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2311, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ECU_CONFIG._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPANY-DATAS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2312, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ECU_CONFIG._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2313, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ECU_CONFIG._UseForTag(pyxb.namespace.ExpandedName(None, 'CONFIG-DATAS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1147, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ECU_CONFIG._UseForTag(pyxb.namespace.ExpandedName(None, 'ADDITIONAL-AUDIENCES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1148, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ECU_CONFIG._UseForTag(pyxb.namespace.ExpandedName(None, 'CONFIG-DATADICTIONARY-SPEC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1150, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ECU_CONFIG._Automaton = _BuildAutomaton_301()




def _BuildAutomaton_302 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_302
    del _BuildAutomaton_302
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1787, 0))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ECU_PROXY._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ECU_PROXY._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ECU_PROXY._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ECU_PROXY._UseForTag(pyxb.namespace.ExpandedName(None, 'MATCHING-COMPONENTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1787, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ECU_PROXY._Automaton = _BuildAutomaton_302()




ECU_SHARED_DATA._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-VARIABLES'), DIAG_VARIABLES, scope=ECU_SHARED_DATA, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1226, 0)))

ECU_SHARED_DATA._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VARIABLE-GROUPS'), VARIABLE_GROUPS, scope=ECU_SHARED_DATA, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1227, 0)))

def _BuildAutomaton_303 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_303
    del _BuildAutomaton_303
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 845, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 846, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 847, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 848, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 849, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 850, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 851, 0))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 852, 0))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 853, 0))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 854, 0))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 855, 0))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 856, 0))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 857, 0))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 858, 0))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 859, 0))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1226, 0))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1227, 0))
    counters.add(cc_18)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ECU_SHARED_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ECU_SHARED_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ECU_SHARED_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ECU_SHARED_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 845, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ECU_SHARED_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPANY-DATAS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 846, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ECU_SHARED_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASSS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 847, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ECU_SHARED_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-DATA-DICTIONARY-SPEC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 848, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ECU_SHARED_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-COMMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 849, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ECU_SHARED_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'REQUESTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 850, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ECU_SHARED_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'POS-RESPONSES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 851, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ECU_SHARED_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'NEG-RESPONSES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 852, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ECU_SHARED_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'GLOBAL-NEG-RESPONSES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 853, 0))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ECU_SHARED_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'IMPORT-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 854, 0))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ECU_SHARED_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'STATE-CHARTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 855, 0))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ECU_SHARED_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'ADDITIONAL-AUDIENCES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 856, 0))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(ECU_SHARED_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'SUB-COMPONENTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 857, 0))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(ECU_SHARED_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'LIBRARYS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 858, 0))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(ECU_SHARED_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 859, 0))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(ECU_SHARED_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-VARIABLES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1226, 0))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(ECU_SHARED_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'VARIABLE-GROUPS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1227, 0))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, True) ]))
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ECU_SHARED_DATA._Automaton = _BuildAutomaton_303()




EXTERN_FLASHDATA._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DATAFILE'), DATAFILE, scope=EXTERN_FLASHDATA, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1441, 0)))

def _BuildAutomaton_304 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_304
    del _BuildAutomaton_304
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1513, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1514, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1516, 0))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EXTERN_FLASHDATA._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EXTERN_FLASHDATA._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EXTERN_FLASHDATA._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EXTERN_FLASHDATA._UseForTag(pyxb.namespace.ExpandedName(None, 'SIZE-LENGTH')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1513, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EXTERN_FLASHDATA._UseForTag(pyxb.namespace.ExpandedName(None, 'ADDRESS-LENGTH')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1514, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EXTERN_FLASHDATA._UseForTag(pyxb.namespace.ExpandedName(None, 'DATAFORMAT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1515, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EXTERN_FLASHDATA._UseForTag(pyxb.namespace.ExpandedName(None, 'ENCRYPT-COMPRESS-METHOD')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1516, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EXTERN_FLASHDATA._UseForTag(pyxb.namespace.ExpandedName(None, 'DATAFILE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1441, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EXTERN_FLASHDATA._Automaton = _BuildAutomaton_304()




FLASH._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ECU-MEMS'), ECU_MEMS, scope=FLASH, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1481, 0)))

FLASH._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ECU-MEM-CONNECTORS'), ECU_MEM_CONNECTORS, scope=FLASH, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1482, 0)))

FLASH._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ADDITIONAL-AUDIENCES'), ADDITIONAL_AUDIENCES, scope=FLASH, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1483, 0)))

def _BuildAutomaton_305 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_305
    del _BuildAutomaton_305
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2311, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2312, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2313, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1481, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1482, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1483, 0))
    counters.add(cc_7)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FLASH._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(FLASH._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(FLASH._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(FLASH._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2311, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(FLASH._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPANY-DATAS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2312, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(FLASH._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2313, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(FLASH._UseForTag(pyxb.namespace.ExpandedName(None, 'ECU-MEMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1481, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(FLASH._UseForTag(pyxb.namespace.ExpandedName(None, 'ECU-MEM-CONNECTORS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1482, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(FLASH._UseForTag(pyxb.namespace.ExpandedName(None, 'ADDITIONAL-AUDIENCES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1483, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FLASH._Automaton = _BuildAutomaton_305()




FUNCTION_DICTIONARY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FUNCTION-NODES'), FUNCTION_NODES, scope=FUNCTION_DICTIONARY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1590, 0)))

FUNCTION_DICTIONARY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FUNCTION-NODE-GROUPS'), FUNCTION_NODE_GROUPS, scope=FUNCTION_DICTIONARY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1591, 0)))

FUNCTION_DICTIONARY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ADDITIONAL-AUDIENCES'), ADDITIONAL_AUDIENCES, scope=FUNCTION_DICTIONARY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1593, 0)))

def _BuildAutomaton_306 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_306
    del _BuildAutomaton_306
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2311, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2312, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2313, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1590, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1591, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1593, 0))
    counters.add(cc_7)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FUNCTION_DICTIONARY._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_DICTIONARY._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_DICTIONARY._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_DICTIONARY._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2311, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_DICTIONARY._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPANY-DATAS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2312, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_DICTIONARY._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2313, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_DICTIONARY._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCTION-NODES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1590, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_DICTIONARY._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCTION-NODE-GROUPS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1591, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_DICTIONARY._UseForTag(pyxb.namespace.ExpandedName(None, 'ADDITIONAL-AUDIENCES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1593, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FUNCTION_DICTIONARY._Automaton = _BuildAutomaton_306()




FUNCTION_NODE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FUNCTION-NODES'), FUNCTION_NODES, scope=FUNCTION_NODE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1620, 0)))

def _BuildAutomaton_307 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_307
    del _BuildAutomaton_307
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 98, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 99, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 100, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 101, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 102, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 103, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 104, 0))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1620, 0))
    counters.add(cc_9)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FUNCTION_NODE._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_NODE._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_NODE._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_NODE._UseForTag(pyxb.namespace.ExpandedName(None, 'AUDIENCE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 98, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_NODE._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCTION-IN-PARAMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 99, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_NODE._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCTION-OUT-PARAMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 100, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_NODE._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPONENT-CONNECTORS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 101, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_NODE._UseForTag(pyxb.namespace.ExpandedName(None, 'MULTIPLE-ECU-JOB-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 102, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_NODE._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 103, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_NODE._UseForTag(pyxb.namespace.ExpandedName(None, 'SDG')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 104, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_NODE._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCTION-NODES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1620, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FUNCTION_NODE._Automaton = _BuildAutomaton_307()




FUNCTION_NODE_GROUP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FUNCTION-NODE-REFS'), FUNCTION_NODE_REFS, scope=FUNCTION_NODE_GROUP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1630, 0)))

FUNCTION_NODE_GROUP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FUNCTION-NODE-GROUPS'), FUNCTION_NODE_GROUPS, scope=FUNCTION_NODE_GROUP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1631, 0)))

def _BuildAutomaton_308 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_308
    del _BuildAutomaton_308
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 98, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 99, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 100, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 101, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 102, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 103, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 104, 0))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1630, 0))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1631, 0))
    counters.add(cc_10)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FUNCTION_NODE_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_NODE_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_NODE_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_NODE_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'AUDIENCE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 98, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_NODE_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCTION-IN-PARAMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 99, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_NODE_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCTION-OUT-PARAMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 100, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_NODE_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPONENT-CONNECTORS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 101, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_NODE_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'MULTIPLE-ECU-JOB-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 102, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_NODE_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 103, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_NODE_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'SDG')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 104, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_NODE_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCTION-NODE-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1630, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTION_NODE_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCTION-NODE-GROUPS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1631, 0))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FUNCTION_NODE_GROUP._Automaton = _BuildAutomaton_308()




GATEWAY_LOGICAL_LINK._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SEMANTIC'), pyxb.binding.datatypes.string, scope=GATEWAY_LOGICAL_LINK, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1692, 0)))

def _BuildAutomaton_309 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_309
    del _BuildAutomaton_309
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1972, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1975, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1976, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1977, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1978, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1979, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1980, 0))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1692, 0))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GATEWAY_LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GATEWAY_LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GATEWAY_LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GATEWAY_LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'GATEWAY-LOGICAL-LINK-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1972, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GATEWAY_LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'PHYSICAL-VEHICLE-LINK-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1974, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(GATEWAY_LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'PROTOCOL-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1975, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(GATEWAY_LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCTIONAL-GROUP-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1976, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(GATEWAY_LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'BASE-VARIANT-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1977, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(GATEWAY_LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'ECU-PROXY-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1978, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(GATEWAY_LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'LINK-COMPARAM-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1979, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(GATEWAY_LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'PROT-STACK-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1980, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(GATEWAY_LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'SEMANTIC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1692, 0))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GATEWAY_LOGICAL_LINK._Automaton = _BuildAutomaton_309()




def _BuildAutomaton_310 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_310
    del _BuildAutomaton_310
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2789, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2791, 0))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GLOBAL_NEG_RESPONSE._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GLOBAL_NEG_RESPONSE._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GLOBAL_NEG_RESPONSE._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GLOBAL_NEG_RESPONSE._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2789, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GLOBAL_NEG_RESPONSE._UseForTag(pyxb.namespace.ExpandedName(None, 'PARAMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2790, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(GLOBAL_NEG_RESPONSE._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2791, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GLOBAL_NEG_RESPONSE._Automaton = _BuildAutomaton_310()




HIERARCHY_ELEMENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPARAM-REFS'), COMPARAM_REFS, scope=HIERARCHY_ELEMENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1734, 0)))

def _BuildAutomaton_311 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_311
    del _BuildAutomaton_311
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 845, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 846, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 847, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 848, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 849, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 850, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 851, 0))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 852, 0))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 853, 0))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 854, 0))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 855, 0))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 856, 0))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 857, 0))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 858, 0))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 859, 0))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1734, 0))
    counters.add(cc_17)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(HIERARCHY_ELEMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(HIERARCHY_ELEMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(HIERARCHY_ELEMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(HIERARCHY_ELEMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 845, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(HIERARCHY_ELEMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPANY-DATAS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 846, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(HIERARCHY_ELEMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASSS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 847, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(HIERARCHY_ELEMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-DATA-DICTIONARY-SPEC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 848, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(HIERARCHY_ELEMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-COMMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 849, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(HIERARCHY_ELEMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'REQUESTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 850, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(HIERARCHY_ELEMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'POS-RESPONSES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 851, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(HIERARCHY_ELEMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'NEG-RESPONSES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 852, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(HIERARCHY_ELEMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'GLOBAL-NEG-RESPONSES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 853, 0))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(HIERARCHY_ELEMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'IMPORT-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 854, 0))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(HIERARCHY_ELEMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'STATE-CHARTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 855, 0))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(HIERARCHY_ELEMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'ADDITIONAL-AUDIENCES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 856, 0))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(HIERARCHY_ELEMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'SUB-COMPONENTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 857, 0))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(HIERARCHY_ELEMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'LIBRARYS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 858, 0))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(HIERARCHY_ELEMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 859, 0))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(HIERARCHY_ELEMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPARAM-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1734, 0))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
HIERARCHY_ELEMENT._Automaton = _BuildAutomaton_311()




INTERN_FLASHDATA._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DATA'), pyxb.binding.datatypes.string, scope=INTERN_FLASHDATA, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1840, 0)))

def _BuildAutomaton_312 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_312
    del _BuildAutomaton_312
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1513, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1514, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1516, 0))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(INTERN_FLASHDATA._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(INTERN_FLASHDATA._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(INTERN_FLASHDATA._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(INTERN_FLASHDATA._UseForTag(pyxb.namespace.ExpandedName(None, 'SIZE-LENGTH')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1513, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(INTERN_FLASHDATA._UseForTag(pyxb.namespace.ExpandedName(None, 'ADDRESS-LENGTH')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1514, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(INTERN_FLASHDATA._UseForTag(pyxb.namespace.ExpandedName(None, 'DATAFORMAT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1515, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(INTERN_FLASHDATA._UseForTag(pyxb.namespace.ExpandedName(None, 'ENCRYPT-COMPRESS-METHOD')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1516, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(INTERN_FLASHDATA._UseForTag(pyxb.namespace.ExpandedName(None, 'DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1840, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
INTERN_FLASHDATA._Automaton = _BuildAutomaton_312()




LINK_COMPARAM_REF._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SIMPLE-VALUE'), SIMPLE_VALUE, scope=LINK_COMPARAM_REF, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1941, 0)))

LINK_COMPARAM_REF._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPLEX-VALUE'), COMPLEX_VALUE, scope=LINK_COMPARAM_REF, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1942, 0)))

LINK_COMPARAM_REF._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=LINK_COMPARAM_REF, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1944, 0)))

def _BuildAutomaton_313 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_313
    del _BuildAutomaton_313
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1941, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1942, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1944, 0))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(LINK_COMPARAM_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'SIMPLE-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1941, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(LINK_COMPARAM_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPLEX-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1942, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(LINK_COMPARAM_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1944, 0))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
LINK_COMPARAM_REF._Automaton = _BuildAutomaton_313()




def _BuildAutomaton_314 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_314
    del _BuildAutomaton_314
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1972, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1975, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1976, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1977, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1978, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1979, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1980, 0))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MEMBER_LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MEMBER_LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MEMBER_LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MEMBER_LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'GATEWAY-LOGICAL-LINK-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1972, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MEMBER_LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'PHYSICAL-VEHICLE-LINK-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1974, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MEMBER_LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'PROTOCOL-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1975, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MEMBER_LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCTIONAL-GROUP-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1976, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MEMBER_LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'BASE-VARIANT-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1977, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(MEMBER_LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'ECU-PROXY-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1978, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(MEMBER_LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'LINK-COMPARAM-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1979, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(MEMBER_LOGICAL_LINK._UseForTag(pyxb.namespace.ExpandedName(None, 'PROT-STACK-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1980, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MEMBER_LOGICAL_LINK._Automaton = _BuildAutomaton_314()




def _BuildAutomaton_315 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_315
    del _BuildAutomaton_315
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1787, 0))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MODEL_YEAR._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MODEL_YEAR._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MODEL_YEAR._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MODEL_YEAR._UseForTag(pyxb.namespace.ExpandedName(None, 'MATCHING-COMPONENTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1787, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MODEL_YEAR._Automaton = _BuildAutomaton_315()




MULTIPLE_ECU_JOB_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MULTIPLE-ECU-JOBS'), MULTIPLE_ECU_JOBS, scope=MULTIPLE_ECU_JOB_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2146, 0)))

MULTIPLE_ECU_JOB_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-DATADICTIONARY-SPEC'), DIAG_DATA_DICTIONARY_SPEC, scope=MULTIPLE_ECU_JOB_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2147, 0)))

MULTIPLE_ECU_JOB_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASSS'), FUNCT_CLASSS, scope=MULTIPLE_ECU_JOB_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2148, 0)))

MULTIPLE_ECU_JOB_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ADDITIONAL-AUDIENCES'), ADDITIONAL_AUDIENCES, scope=MULTIPLE_ECU_JOB_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2149, 0)))

MULTIPLE_ECU_JOB_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IMPORT-REFS'), IMPORT_REFS, scope=MULTIPLE_ECU_JOB_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2150, 0)))

def _BuildAutomaton_316 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_316
    del _BuildAutomaton_316
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2311, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2312, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2313, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2146, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2147, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2148, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2149, 0))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2150, 0))
    counters.add(cc_9)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MULTIPLE_ECU_JOB_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MULTIPLE_ECU_JOB_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MULTIPLE_ECU_JOB_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MULTIPLE_ECU_JOB_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2311, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MULTIPLE_ECU_JOB_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPANY-DATAS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2312, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MULTIPLE_ECU_JOB_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2313, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MULTIPLE_ECU_JOB_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'MULTIPLE-ECU-JOBS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2146, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(MULTIPLE_ECU_JOB_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-DATADICTIONARY-SPEC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2147, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(MULTIPLE_ECU_JOB_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASSS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2148, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(MULTIPLE_ECU_JOB_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'ADDITIONAL-AUDIENCES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2149, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(MULTIPLE_ECU_JOB_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'IMPORT-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2150, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MULTIPLE_ECU_JOB_SPEC._Automaton = _BuildAutomaton_316()




NEG_OFFSET._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NEGATIVE-OFFSET'), pyxb.binding.datatypes.hexBinary, scope=NEG_OFFSET, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2180, 0)))

def _BuildAutomaton_317 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_317
    del _BuildAutomaton_317
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NEG_OFFSET._UseForTag(pyxb.namespace.ExpandedName(None, 'NEGATIVE-OFFSET')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2180, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
NEG_OFFSET._Automaton = _BuildAutomaton_317()




def _BuildAutomaton_318 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_318
    del _BuildAutomaton_318
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2789, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2791, 0))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NEG_RESPONSE._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NEG_RESPONSE._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NEG_RESPONSE._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NEG_RESPONSE._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2789, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NEG_RESPONSE._UseForTag(pyxb.namespace.ExpandedName(None, 'PARAMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2790, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(NEG_RESPONSE._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2791, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
NEG_RESPONSE._Automaton = _BuildAutomaton_318()




def _BuildAutomaton_319 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_319
    del _BuildAutomaton_319
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1787, 0))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OEM._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(OEM._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(OEM._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(OEM._UseForTag(pyxb.namespace.ExpandedName(None, 'MATCHING-COMPONENTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1787, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
OEM._Automaton = _BuildAutomaton_319()




OPTION_ITEM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PHYSICAL-DEFAULT-VALUE'), pyxb.binding.datatypes.string, scope=OPTION_ITEM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2332, 0)))

OPTION_ITEM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ITEM-VALUES'), ITEM_VALUES, scope=OPTION_ITEM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2333, 0)))

OPTION_ITEM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'WRITE-AUDIENCE'), AUDIENCE, scope=OPTION_ITEM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2334, 0)))

OPTION_ITEM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'READ-AUDIENCE'), AUDIENCE, scope=OPTION_ITEM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2335, 0)))

def _BuildAutomaton_320 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_320
    del _BuildAutomaton_320
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 580, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 585, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2332, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2333, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2334, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2335, 0))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OPTION_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OPTION_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OPTION_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OPTION_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 579, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OPTION_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'BIT-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 580, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OPTION_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 582, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OPTION_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 583, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(OPTION_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 585, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(OPTION_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'PHYSICAL-DEFAULT-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2332, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(OPTION_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'ITEM-VALUES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2333, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(OPTION_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'WRITE-AUDIENCE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2334, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(OPTION_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'READ-AUDIENCE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2335, 0))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
OPTION_ITEM._Automaton = _BuildAutomaton_320()




PARENT_REF._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-DIAG-COMMS'), NOT_INHERITED_DIAG_COMMS, scope=PARENT_REF, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2412, 0)))

PARENT_REF._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-VARIABLES'), NOT_INHERITED_VARIABLES, scope=PARENT_REF, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2414, 0)))

PARENT_REF._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-DOPS'), NOT_INHERITED_DOPS, scope=PARENT_REF, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2415, 0)))

PARENT_REF._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-TABLES'), NOT_INHERITED_TABLES, scope=PARENT_REF, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2416, 0)))

PARENT_REF._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-GLOBAL-NEG-RESPONSES'), NOT_INHERITED_GLOBAL_NEG_RESPONSES, scope=PARENT_REF, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2417, 0)))

def _BuildAutomaton_321 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_321
    del _BuildAutomaton_321
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2412, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2414, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2415, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2416, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2417, 0))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PARENT_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-DIAG-COMMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2412, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PARENT_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-VARIABLES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2414, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PARENT_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-DOPS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2415, 0))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PARENT_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-TABLES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2416, 0))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(PARENT_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-GLOBAL-NEG-RESPONSES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2417, 0))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PARENT_REF._Automaton = _BuildAutomaton_321()




PHYSICAL_TYPE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PRECISION'), pyxb.binding.datatypes.unsignedInt, scope=PHYSICAL_TYPE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2475, 0)))

def _BuildAutomaton_322 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_322
    del _BuildAutomaton_322
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2475, 0))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PHYSICAL_TYPE._UseForTag(pyxb.namespace.ExpandedName(None, 'PRECISION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2475, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PHYSICAL_TYPE._Automaton = _BuildAutomaton_322()




POSITIONABLE_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION'), pyxb.binding.datatypes.unsignedInt, scope=POSITIONABLE_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2542, 0)))

POSITIONABLE_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BIT-POSITION'), STD_ANON_5, scope=POSITIONABLE_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2543, 0)))

def _BuildAutomaton_323 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_323
    del _BuildAutomaton_323
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2542, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2543, 0))
    counters.add(cc_4)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(POSITIONABLE_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(POSITIONABLE_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(POSITIONABLE_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(POSITIONABLE_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(POSITIONABLE_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2542, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(POSITIONABLE_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'BIT-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2543, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
POSITIONABLE_PARAM._Automaton = _BuildAutomaton_323()




POS_OFFSET._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'POSITIVE-OFFSET'), pyxb.binding.datatypes.hexBinary, scope=POS_OFFSET, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2559, 0)))

def _BuildAutomaton_324 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_324
    del _BuildAutomaton_324
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(POS_OFFSET._UseForTag(pyxb.namespace.ExpandedName(None, 'POSITIVE-OFFSET')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2559, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
POS_OFFSET._Automaton = _BuildAutomaton_324()




def _BuildAutomaton_325 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_325
    del _BuildAutomaton_325
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2789, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2791, 0))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(POS_RESPONSE._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(POS_RESPONSE._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(POS_RESPONSE._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(POS_RESPONSE._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2789, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(POS_RESPONSE._UseForTag(pyxb.namespace.ExpandedName(None, 'PARAMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2790, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(POS_RESPONSE._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2791, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
POS_RESPONSE._Automaton = _BuildAutomaton_325()




PRE_CONDITION_STATE_REF._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VALUE'), pyxb.binding.datatypes.string, scope=PRE_CONDITION_STATE_REF, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2609, 0)))

PRE_CONDITION_STATE_REF._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNREF'), SNREF, scope=PRE_CONDITION_STATE_REF, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2611, 0)))

PRE_CONDITION_STATE_REF._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNPATHREF'), SNPATHREF, scope=PRE_CONDITION_STATE_REF, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2612, 0)))

def _BuildAutomaton_326 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_326
    del _BuildAutomaton_326
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2609, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2610, 0))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PRE_CONDITION_STATE_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2609, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PRE_CONDITION_STATE_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2611, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PRE_CONDITION_STATE_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNPATHREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2612, 0))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PRE_CONDITION_STATE_REF._Automaton = _BuildAutomaton_326()




RELATED_DIAG_COMM_REF._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RELATION-TYPE'), pyxb.binding.datatypes.string, scope=RELATED_DIAG_COMM_REF, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2729, 0)))

def _BuildAutomaton_327 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_327
    del _BuildAutomaton_327
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RELATED_DIAG_COMM_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'RELATION-TYPE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2729, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RELATED_DIAG_COMM_REF._Automaton = _BuildAutomaton_327()




SCALE_CONSTR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-LABEL'), TEXT, scope=SCALE_CONSTR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2811, 0)))

SCALE_CONSTR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=SCALE_CONSTR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2812, 0)))

SCALE_CONSTR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LOWER-LIMIT'), LIMIT, scope=SCALE_CONSTR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2813, 0)))

SCALE_CONSTR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UPPER-LIMIT'), LIMIT, scope=SCALE_CONSTR, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2814, 0)))

def _BuildAutomaton_328 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_328
    del _BuildAutomaton_328
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2811, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2812, 0))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SCALE_CONSTR._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-LABEL')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2811, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SCALE_CONSTR._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2812, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SCALE_CONSTR._UseForTag(pyxb.namespace.ExpandedName(None, 'LOWER-LIMIT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2813, 0))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SCALE_CONSTR._UseForTag(pyxb.namespace.ExpandedName(None, 'UPPER-LIMIT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2814, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SCALE_CONSTR._Automaton = _BuildAutomaton_328()




SDG._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDG-CAPTION-REF'), ODXLINK, scope=SDG, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2839, 0)))

SDG._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDG-CAPTION'), SDG_CAPTION, scope=SDG, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2840, 0)))

SDG._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDG'), SDG, scope=SDG, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2843, 0)))

SDG._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SD'), SD, scope=SDG, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2844, 0)))

def _BuildAutomaton_329 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_329
    del _BuildAutomaton_329
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2839, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2840, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2842, 0))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SDG._UseForTag(pyxb.namespace.ExpandedName(None, 'SDG-CAPTION-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2839, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SDG._UseForTag(pyxb.namespace.ExpandedName(None, 'SDG-CAPTION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2840, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SDG._UseForTag(pyxb.namespace.ExpandedName(None, 'SDG')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2843, 0))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SDG._UseForTag(pyxb.namespace.ExpandedName(None, 'SD')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2844, 0))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SDG._Automaton = _BuildAutomaton_329()




SESSION_DESC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PARTNUMBER'), pyxb.binding.datatypes.string, scope=SESSION_DESC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2933, 0)))

SESSION_DESC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PRIORITY'), pyxb.binding.datatypes.unsignedInt, scope=SESSION_DESC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2934, 0)))

SESSION_DESC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SESSION-SNREF'), SNREF, scope=SESSION_DESC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2935, 0)))

SESSION_DESC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-SNREF'), SNREF, scope=SESSION_DESC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2936, 0)))

SESSION_DESC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FLASH-CLASS-REFS'), FLASH_CLASS_REFS, scope=SESSION_DESC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2937, 0)))

SESSION_DESC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SDGS'), SDGS, scope=SESSION_DESC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2938, 0)))

SESSION_DESC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AUDIENCE'), AUDIENCE, scope=SESSION_DESC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2939, 0)))

SESSION_DESC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OWN-IDENT'), OWN_IDENT, scope=SESSION_DESC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2940, 0)))

SESSION_DESC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=SESSION_DESC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

SESSION_DESC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=SESSION_DESC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

SESSION_DESC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=SESSION_DESC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_330 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_330
    del _BuildAutomaton_330
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2933, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2934, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2936, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2937, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2938, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2939, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2940, 0))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SESSION_DESC._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SESSION_DESC._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SESSION_DESC._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SESSION_DESC._UseForTag(pyxb.namespace.ExpandedName(None, 'PARTNUMBER')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2933, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SESSION_DESC._UseForTag(pyxb.namespace.ExpandedName(None, 'PRIORITY')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2934, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SESSION_DESC._UseForTag(pyxb.namespace.ExpandedName(None, 'SESSION-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2935, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(SESSION_DESC._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-COMM-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2936, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(SESSION_DESC._UseForTag(pyxb.namespace.ExpandedName(None, 'FLASH-CLASS-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2937, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(SESSION_DESC._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2938, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(SESSION_DESC._UseForTag(pyxb.namespace.ExpandedName(None, 'AUDIENCE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2939, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(SESSION_DESC._UseForTag(pyxb.namespace.ExpandedName(None, 'OWN-IDENT')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2940, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SESSION_DESC._Automaton = _BuildAutomaton_330()




SIZEDEF_FILTER._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FILTER-SIZE'), STD_ANON_7, scope=SIZEDEF_FILTER, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2988, 0)))

def _BuildAutomaton_331 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_331
    del _BuildAutomaton_331
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SIZEDEF_FILTER._UseForTag(pyxb.namespace.ExpandedName(None, 'FILTER-START')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1467, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SIZEDEF_FILTER._UseForTag(pyxb.namespace.ExpandedName(None, 'FILTER-SIZE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2988, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SIZEDEF_FILTER._Automaton = _BuildAutomaton_331()




SIZEDEF_PHYS_SEGMENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SIZE'), STD_ANON_8, scope=SIZEDEF_PHYS_SEGMENT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3004, 0)))

def _BuildAutomaton_332 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_332
    del _BuildAutomaton_332
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2511, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2512, 0))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SIZEDEF_PHYS_SEGMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SIZEDEF_PHYS_SEGMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SIZEDEF_PHYS_SEGMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SIZEDEF_PHYS_SEGMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'FILLBYTE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2511, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SIZEDEF_PHYS_SEGMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'BLOCK-SIZE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2512, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SIZEDEF_PHYS_SEGMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'START-ADDRESS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2513, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SIZEDEF_PHYS_SEGMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'SIZE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3004, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SIZEDEF_PHYS_SEGMENT._Automaton = _BuildAutomaton_332()




STATE_TRANSITION_REF._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VALUE'), pyxb.binding.datatypes.string, scope=STATE_TRANSITION_REF, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3121, 0)))

STATE_TRANSITION_REF._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNREF'), SNREF, scope=STATE_TRANSITION_REF, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3123, 0)))

STATE_TRANSITION_REF._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNPATHREF'), SNPATHREF, scope=STATE_TRANSITION_REF, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3124, 0)))

def _BuildAutomaton_333 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_333
    del _BuildAutomaton_333
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3121, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3122, 0))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(STATE_TRANSITION_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3121, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(STATE_TRANSITION_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3123, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(STATE_TRANSITION_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'IN-PARAM-IF-SNPATHREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3124, 0))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
STATE_TRANSITION_REF._Automaton = _BuildAutomaton_333()




def _BuildAutomaton_334 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_334
    del _BuildAutomaton_334
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 580, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 585, 0))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SYSTEM_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SYSTEM_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SYSTEM_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SYSTEM_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 579, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SYSTEM_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'BIT-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 580, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SYSTEM_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 582, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SYSTEM_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 583, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SYSTEM_ITEM._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 585, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SYSTEM_ITEM._Automaton = _BuildAutomaton_334()




VEHICLE_CONNECTOR_PIN._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PIN-NUMBER'), pyxb.binding.datatypes.unsignedInt, scope=VEHICLE_CONNECTOR_PIN, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3601, 0)))

VEHICLE_CONNECTOR_PIN._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SHORT-NAME'), STD_ANON_13, scope=VEHICLE_CONNECTOR_PIN, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0)))

VEHICLE_CONNECTOR_PIN._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LONG-NAME'), LONG_NAME, scope=VEHICLE_CONNECTOR_PIN, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0)))

VEHICLE_CONNECTOR_PIN._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DESC'), DESCRIPTION, scope=VEHICLE_CONNECTOR_PIN, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0)))

def _BuildAutomaton_335 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_335
    del _BuildAutomaton_335
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VEHICLE_CONNECTOR_PIN._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VEHICLE_CONNECTOR_PIN._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VEHICLE_CONNECTOR_PIN._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VEHICLE_CONNECTOR_PIN._UseForTag(pyxb.namespace.ExpandedName(None, 'PIN-NUMBER')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3601, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VEHICLE_CONNECTOR_PIN._Automaton = _BuildAutomaton_335()




VEHICLE_INFO_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'INFO-COMPONENTS'), INFO_COMPONENTS, scope=VEHICLE_INFO_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3648, 0)))

VEHICLE_INFO_SPEC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VEHICLE-INFORMATIONS'), VEHICLE_INFORMATIONS, scope=VEHICLE_INFO_SPEC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3649, 0)))

def _BuildAutomaton_336 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_336
    del _BuildAutomaton_336
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2311, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2312, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2313, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3648, 0))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VEHICLE_INFO_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VEHICLE_INFO_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VEHICLE_INFO_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VEHICLE_INFO_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2311, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VEHICLE_INFO_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPANY-DATAS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2312, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VEHICLE_INFO_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2313, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VEHICLE_INFO_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'INFO-COMPONENTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3648, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VEHICLE_INFO_SPEC._UseForTag(pyxb.namespace.ExpandedName(None, 'VEHICLE-INFORMATIONS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3649, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VEHICLE_INFO_SPEC._Automaton = _BuildAutomaton_336()




def _BuildAutomaton_337 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_337
    del _BuildAutomaton_337
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1787, 0))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VEHICLE_MODEL._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(VEHICLE_MODEL._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(VEHICLE_MODEL._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(VEHICLE_MODEL._UseForTag(pyxb.namespace.ExpandedName(None, 'MATCHING-COMPONENTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1787, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VEHICLE_MODEL._Automaton = _BuildAutomaton_337()




def _BuildAutomaton_338 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_338
    del _BuildAutomaton_338
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1787, 0))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VEHICLE_TYPE._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(VEHICLE_TYPE._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(VEHICLE_TYPE._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(VEHICLE_TYPE._UseForTag(pyxb.namespace.ExpandedName(None, 'MATCHING-COMPONENTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1787, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VEHICLE_TYPE._Automaton = _BuildAutomaton_338()




BASE_VARIANT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-VARIABLES'), DIAG_VARIABLES, scope=BASE_VARIANT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 117, 0)))

BASE_VARIANT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VARIABLE-GROUPS'), VARIABLE_GROUPS, scope=BASE_VARIANT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 118, 0)))

BASE_VARIANT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DYN-DEFINED-SPEC'), DYN_DEFINED_SPEC, scope=BASE_VARIANT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 119, 0)))

BASE_VARIANT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BASE-VARIANTPATTERN'), BASE_VARIANT_PATTERN, scope=BASE_VARIANT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 120, 0)))

BASE_VARIANT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PARENT-REFS'), PARENT_REFS, scope=BASE_VARIANT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 121, 0)))

def _BuildAutomaton_339 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_339
    del _BuildAutomaton_339
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 845, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 846, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 847, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 848, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 849, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 850, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 851, 0))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 852, 0))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 853, 0))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 854, 0))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 855, 0))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 856, 0))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 857, 0))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 858, 0))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 859, 0))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1734, 0))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 117, 0))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 118, 0))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 119, 0))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 120, 0))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 121, 0))
    counters.add(cc_22)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 845, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPANY-DATAS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 846, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASSS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 847, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-DATA-DICTIONARY-SPEC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 848, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-COMMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 849, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'REQUESTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 850, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'POS-RESPONSES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 851, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'NEG-RESPONSES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 852, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'GLOBAL-NEG-RESPONSES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 853, 0))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'IMPORT-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 854, 0))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'STATE-CHARTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 855, 0))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'ADDITIONAL-AUDIENCES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 856, 0))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'SUB-COMPONENTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 857, 0))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'LIBRARYS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 858, 0))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 859, 0))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPARAM-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1734, 0))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-VARIABLES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 117, 0))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'VARIABLE-GROUPS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 118, 0))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'DYN-DEFINED-SPEC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 119, 0))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'BASE-VARIANTPATTERN')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 120, 0))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'PARENT-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 121, 0))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_22, True) ]))
    st_23._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
BASE_VARIANT._Automaton = _BuildAutomaton_339()




def _BuildAutomaton_340 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_340
    del _BuildAutomaton_340
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2412, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2414, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2415, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2416, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2417, 0))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-DIAG-COMMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2412, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-VARIABLES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2414, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-DOPS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2415, 0))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-TABLES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2416, 0))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(BASE_VARIANT_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-GLOBAL-NEG-RESPONSES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2417, 0))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
BASE_VARIANT_REF._Automaton = _BuildAutomaton_340()




BASIC_STRUCTURE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BYTE-SIZE'), pyxb.binding.datatypes.unsignedInt, scope=BASIC_STRUCTURE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 150, 0)))

BASIC_STRUCTURE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PARAMS'), PARAMS, scope=BASIC_STRUCTURE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 151, 0)))

def _BuildAutomaton_341 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_341
    del _BuildAutomaton_341
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 150, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 151, 0))
    counters.add(cc_5)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(BASIC_STRUCTURE._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BASIC_STRUCTURE._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(BASIC_STRUCTURE._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(BASIC_STRUCTURE._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(BASIC_STRUCTURE._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(BASIC_STRUCTURE._UseForTag(pyxb.namespace.ExpandedName(None, 'BYTE-SIZE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 150, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(BASIC_STRUCTURE._UseForTag(pyxb.namespace.ExpandedName(None, 'PARAMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 151, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
BASIC_STRUCTURE._Automaton = _BuildAutomaton_341()




CODED_CONST._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CODED-VALUE'), pyxb.binding.datatypes.string, scope=CODED_CONST, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 210, 0)))

CODED_CONST._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-CODED-TYPE'), DIAG_CODED_TYPE, scope=CODED_CONST, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 211, 0)))

def _BuildAutomaton_342 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_342
    del _BuildAutomaton_342
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2542, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2543, 0))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CODED_CONST._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CODED_CONST._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CODED_CONST._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CODED_CONST._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CODED_CONST._UseForTag(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2542, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CODED_CONST._UseForTag(pyxb.namespace.ExpandedName(None, 'BIT-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2543, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CODED_CONST._UseForTag(pyxb.namespace.ExpandedName(None, 'CODED-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 210, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CODED_CONST._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-CODED-TYPE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 211, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CODED_CONST._Automaton = _BuildAutomaton_342()




COMPARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PHYSICAL-DEFAULT-VALUE'), pyxb.binding.datatypes.string, scope=COMPARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 316, 0)))

COMPARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-REF'), ODXLINK, scope=COMPARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 317, 0)))

def _BuildAutomaton_343 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_343
    del _BuildAutomaton_343
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(COMPARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(COMPARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(COMPARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(COMPARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'PHYSICAL-DEFAULT-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 316, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 317, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPARAM._Automaton = _BuildAutomaton_343()




COMPLEX_COMPARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPARAM'), COMPARAM, scope=COMPLEX_COMPARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 383, 0)))

COMPLEX_COMPARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPLEX-COMPARAM'), COMPLEX_COMPARAM, scope=COMPLEX_COMPARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 384, 0)))

COMPLEX_COMPARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPLEXPHYSICAL-DEFAULT-VALUE'), COMPLEX_PHYSICAL_DEFAULT_VALUE, scope=COMPLEX_COMPARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 386, 0)))

def _BuildAutomaton_344 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_344
    del _BuildAutomaton_344
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 386, 0))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(COMPLEX_COMPARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(COMPLEX_COMPARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(COMPLEX_COMPARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPLEX_COMPARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPARAM')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 383, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COMPLEX_COMPARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPLEX-COMPARAM')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 384, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(COMPLEX_COMPARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPLEXPHYSICAL-DEFAULT-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 386, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
COMPLEX_COMPARAM._Automaton = _BuildAutomaton_344()




DIAG_SERVICE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPARAM-REFS'), COMPARAM_REFS, scope=DIAG_SERVICE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 902, 0)))

DIAG_SERVICE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'REQUEST-REF'), ODXLINK, scope=DIAG_SERVICE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 903, 0)))

DIAG_SERVICE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'POS-RESPONSE-REFS'), POS_RESPONSE_REFS, scope=DIAG_SERVICE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 904, 0)))

DIAG_SERVICE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NEG-RESPONSE-REFS'), NEG_RESPONSE_REFS, scope=DIAG_SERVICE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 905, 0)))

DIAG_SERVICE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'POS-RESPONSESUPPRESSABLE'), POS_RESPONSE_SUPPRESSABLE, scope=DIAG_SERVICE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 906, 0)))

def _BuildAutomaton_345 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_345
    del _BuildAutomaton_345
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 782, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 783, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 784, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 785, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 786, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 787, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 788, 0))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 790, 0))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 902, 0))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 903, 0))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 904, 0))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 905, 0))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 906, 0))
    counters.add(cc_14)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DIAG_SERVICE._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_SERVICE._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_SERVICE._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_SERVICE._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 782, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_SERVICE._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 783, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_SERVICE._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASS-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 784, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_SERVICE._UseForTag(pyxb.namespace.ExpandedName(None, 'AUDIENCE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 785, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_SERVICE._UseForTag(pyxb.namespace.ExpandedName(None, 'PROTOCOL-SNREFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 786, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_SERVICE._UseForTag(pyxb.namespace.ExpandedName(None, 'RELATED-DIAG-COMM-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 787, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_SERVICE._UseForTag(pyxb.namespace.ExpandedName(None, 'PRE-CONDITION-STATE-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 788, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_SERVICE._UseForTag(pyxb.namespace.ExpandedName(None, 'STATE-TRANSITION-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 790, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_SERVICE._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPARAM-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 902, 0))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_SERVICE._UseForTag(pyxb.namespace.ExpandedName(None, 'REQUEST-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 903, 0))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_SERVICE._UseForTag(pyxb.namespace.ExpandedName(None, 'POS-RESPONSE-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 904, 0))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_SERVICE._UseForTag(pyxb.namespace.ExpandedName(None, 'NEG-RESPONSE-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 905, 0))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(DIAG_SERVICE._UseForTag(pyxb.namespace.ExpandedName(None, 'POS-RESPONSESUPPRESSABLE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 906, 0))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DIAG_SERVICE._Automaton = _BuildAutomaton_345()




def _BuildAutomaton_346 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_346
    del _BuildAutomaton_346
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2542, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2543, 0))
    counters.add(cc_4)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DYNAMIC._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DYNAMIC._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DYNAMIC._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DYNAMIC._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DYNAMIC._UseForTag(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2542, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DYNAMIC._UseForTag(pyxb.namespace.ExpandedName(None, 'BIT-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2543, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DYNAMIC._Automaton = _BuildAutomaton_346()




def _BuildAutomaton_347 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_347
    del _BuildAutomaton_347
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2412, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2414, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2415, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2416, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2417, 0))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ECU_SHARED_DATA_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-DIAG-COMMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2412, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ECU_SHARED_DATA_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-VARIABLES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2414, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ECU_SHARED_DATA_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-DOPS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2415, 0))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ECU_SHARED_DATA_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-TABLES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2416, 0))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ECU_SHARED_DATA_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-GLOBAL-NEG-RESPONSES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2417, 0))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ECU_SHARED_DATA_REF._Automaton = _BuildAutomaton_347()




ECU_VARIANT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-VARIABLES'), DIAG_VARIABLES, scope=ECU_VARIANT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1249, 0)))

ECU_VARIANT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VARIABLE-GROUPS'), VARIABLE_GROUPS, scope=ECU_VARIANT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1250, 0)))

ECU_VARIANT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ECU-VARIANT-PATTERNS'), ECU_VARIANT_PATTERNS, scope=ECU_VARIANT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1251, 0)))

ECU_VARIANT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DYN-DEFINED-SPEC'), DYN_DEFINED_SPEC, scope=ECU_VARIANT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1253, 0)))

ECU_VARIANT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PARENT-REFS'), PARENT_REFS, scope=ECU_VARIANT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1254, 0)))

def _BuildAutomaton_348 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_348
    del _BuildAutomaton_348
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 845, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 846, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 847, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 848, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 849, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 850, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 851, 0))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 852, 0))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 853, 0))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 854, 0))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 855, 0))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 856, 0))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 857, 0))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 858, 0))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 859, 0))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1734, 0))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1249, 0))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1250, 0))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1251, 0))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1253, 0))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1254, 0))
    counters.add(cc_22)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 845, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPANY-DATAS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 846, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASSS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 847, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-DATA-DICTIONARY-SPEC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 848, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-COMMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 849, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'REQUESTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 850, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'POS-RESPONSES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 851, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'NEG-RESPONSES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 852, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'GLOBAL-NEG-RESPONSES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 853, 0))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'IMPORT-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 854, 0))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'STATE-CHARTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 855, 0))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'ADDITIONAL-AUDIENCES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 856, 0))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'SUB-COMPONENTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 857, 0))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'LIBRARYS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 858, 0))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 859, 0))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPARAM-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1734, 0))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-VARIABLES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1249, 0))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'VARIABLE-GROUPS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1250, 0))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'ECU-VARIANT-PATTERNS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1251, 0))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'DYN-DEFINED-SPEC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1253, 0))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(ECU_VARIANT._UseForTag(pyxb.namespace.ExpandedName(None, 'PARENT-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1254, 0))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_22, True) ]))
    st_23._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ECU_VARIANT._Automaton = _BuildAutomaton_348()




ENV_DATA_DESC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PARAM-SNREF'), SNREF, scope=ENV_DATA_DESC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1372, 0)))

ENV_DATA_DESC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PARAM-SNPATHREF'), SNPATHREF, scope=ENV_DATA_DESC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1373, 0)))

ENV_DATA_DESC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ENV-DATA-REFS'), ENV_DATA_REFS, scope=ENV_DATA_DESC, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1375, 0)))

def _BuildAutomaton_349 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_349
    del _BuildAutomaton_349
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ENV_DATA_DESC._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ENV_DATA_DESC._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ENV_DATA_DESC._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ENV_DATA_DESC._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ENV_DATA_DESC._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ENV_DATA_DESC._UseForTag(pyxb.namespace.ExpandedName(None, 'PARAM-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1372, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ENV_DATA_DESC._UseForTag(pyxb.namespace.ExpandedName(None, 'PARAM-SNPATHREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1373, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ENV_DATA_DESC._UseForTag(pyxb.namespace.ExpandedName(None, 'ENV-DATA-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1375, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ENV_DATA_DESC._Automaton = _BuildAutomaton_349()




FIELD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BASIC-STRUCTURE-REF'), ODXLINK, scope=FIELD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1452, 0)))

FIELD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BASIC-STRUCTURE-SNREF'), SNREF, scope=FIELD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1453, 0)))

FIELD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ENV-DATA-DESC-REF'), ODXLINK, scope=FIELD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1456, 0)))

FIELD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ENV-DATA-DESC-SNREF'), SNREF, scope=FIELD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1457, 0)))

def _BuildAutomaton_350 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_350
    del _BuildAutomaton_350
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'BASIC-STRUCTURE-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1452, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'BASIC-STRUCTURE-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1453, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'ENV-DATA-DESC-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1456, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'ENV-DATA-DESC-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1457, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FIELD._Automaton = _BuildAutomaton_350()




FUNCTIONAL_GROUP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-VARIABLES'), DIAG_VARIABLES, scope=FUNCTIONAL_GROUP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1553, 0)))

FUNCTIONAL_GROUP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VARIABLE-GROUPS'), VARIABLE_GROUPS, scope=FUNCTIONAL_GROUP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1554, 0)))

FUNCTIONAL_GROUP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PARENT-REFS'), PARENT_REFS, scope=FUNCTIONAL_GROUP, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1555, 0)))

def _BuildAutomaton_351 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_351
    del _BuildAutomaton_351
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 845, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 846, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 847, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 848, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 849, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 850, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 851, 0))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 852, 0))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 853, 0))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 854, 0))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 855, 0))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 856, 0))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 857, 0))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 858, 0))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 859, 0))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1734, 0))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1553, 0))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1554, 0))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1555, 0))
    counters.add(cc_20)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FUNCTIONAL_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTIONAL_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTIONAL_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTIONAL_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 845, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTIONAL_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPANY-DATAS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 846, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTIONAL_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASSS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 847, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTIONAL_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-DATA-DICTIONARY-SPEC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 848, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTIONAL_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-COMMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 849, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTIONAL_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'REQUESTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 850, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTIONAL_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'POS-RESPONSES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 851, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTIONAL_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'NEG-RESPONSES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 852, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTIONAL_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'GLOBAL-NEG-RESPONSES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 853, 0))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTIONAL_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'IMPORT-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 854, 0))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTIONAL_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'STATE-CHARTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 855, 0))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTIONAL_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'ADDITIONAL-AUDIENCES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 856, 0))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTIONAL_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'SUB-COMPONENTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 857, 0))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTIONAL_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'LIBRARYS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 858, 0))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTIONAL_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 859, 0))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTIONAL_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPARAM-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1734, 0))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTIONAL_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-VARIABLES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1553, 0))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTIONAL_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'VARIABLE-GROUPS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1554, 0))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTIONAL_GROUP._UseForTag(pyxb.namespace.ExpandedName(None, 'PARENT-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1555, 0))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, True) ]))
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FUNCTIONAL_GROUP._Automaton = _BuildAutomaton_351()




def _BuildAutomaton_352 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_352
    del _BuildAutomaton_352
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2412, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2414, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2415, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2416, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2417, 0))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTIONAL_GROUP_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-DIAG-COMMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2412, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTIONAL_GROUP_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-VARIABLES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2414, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTIONAL_GROUP_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-DOPS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2415, 0))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTIONAL_GROUP_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-TABLES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2416, 0))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(FUNCTIONAL_GROUP_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-GLOBAL-NEG-RESPONSES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2417, 0))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
FUNCTIONAL_GROUP_REF._Automaton = _BuildAutomaton_352()




LEADING_LENGTH_INFO_TYPE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BIT-LENGTH'), STD_ANON_3, scope=LEADING_LENGTH_INFO_TYPE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1881, 0)))

def _BuildAutomaton_353 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_353
    del _BuildAutomaton_353
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(LEADING_LENGTH_INFO_TYPE._UseForTag(pyxb.namespace.ExpandedName(None, 'BIT-LENGTH')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1881, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
LEADING_LENGTH_INFO_TYPE._Automaton = _BuildAutomaton_353()




LENGTH_KEY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DOP-REF'), ODXLINK, scope=LENGTH_KEY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1897, 0)))

LENGTH_KEY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DOP-SNREF'), SNREF, scope=LENGTH_KEY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1898, 0)))

def _BuildAutomaton_354 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_354
    del _BuildAutomaton_354
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2542, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2543, 0))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LENGTH_KEY._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LENGTH_KEY._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LENGTH_KEY._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LENGTH_KEY._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LENGTH_KEY._UseForTag(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2542, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LENGTH_KEY._UseForTag(pyxb.namespace.ExpandedName(None, 'BIT-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2543, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(LENGTH_KEY._UseForTag(pyxb.namespace.ExpandedName(None, 'DOP-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1897, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(LENGTH_KEY._UseForTag(pyxb.namespace.ExpandedName(None, 'DOP-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1898, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
LENGTH_KEY._Automaton = _BuildAutomaton_354()




MATCHING_REQUEST_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'REQUEST-BYTE-POS'), pyxb.binding.datatypes.int, scope=MATCHING_REQUEST_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2059, 0)))

MATCHING_REQUEST_PARAM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BYTE-LENGTH'), pyxb.binding.datatypes.unsignedInt, scope=MATCHING_REQUEST_PARAM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2060, 0)))

def _BuildAutomaton_355 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_355
    del _BuildAutomaton_355
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2542, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2543, 0))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MATCHING_REQUEST_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MATCHING_REQUEST_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MATCHING_REQUEST_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MATCHING_REQUEST_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MATCHING_REQUEST_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2542, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MATCHING_REQUEST_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'BIT-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2543, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MATCHING_REQUEST_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'REQUEST-BYTE-POS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2059, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MATCHING_REQUEST_PARAM._UseForTag(pyxb.namespace.ExpandedName(None, 'BYTE-LENGTH')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2060, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MATCHING_REQUEST_PARAM._Automaton = _BuildAutomaton_355()




MIN_MAX_LENGTH_TYPE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MAX-LENGTH'), pyxb.binding.datatypes.unsignedInt, scope=MIN_MAX_LENGTH_TYPE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2084, 0)))

MIN_MAX_LENGTH_TYPE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MIN-LENGTH'), pyxb.binding.datatypes.unsignedInt, scope=MIN_MAX_LENGTH_TYPE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2085, 0)))

def _BuildAutomaton_356 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_356
    del _BuildAutomaton_356
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2084, 0))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIN_MAX_LENGTH_TYPE._UseForTag(pyxb.namespace.ExpandedName(None, 'MAX-LENGTH')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2084, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MIN_MAX_LENGTH_TYPE._UseForTag(pyxb.namespace.ExpandedName(None, 'MIN-LENGTH')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2085, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MIN_MAX_LENGTH_TYPE._Automaton = _BuildAutomaton_356()




MUX._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION'), pyxb.binding.datatypes.unsignedInt, scope=MUX, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2160, 0)))

MUX._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SWITCH-KEY'), SWITCH_KEY, scope=MUX, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2161, 0)))

MUX._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DEFAULT-CASE'), DEFAULT_CASE, scope=MUX, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2162, 0)))

MUX._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CASES'), CASES, scope=MUX, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2163, 0)))

def _BuildAutomaton_357 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_357
    del _BuildAutomaton_357
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2162, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2163, 0))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MUX._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MUX._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MUX._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MUX._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MUX._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MUX._UseForTag(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2160, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MUX._UseForTag(pyxb.namespace.ExpandedName(None, 'SWITCH-KEY')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2161, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MUX._UseForTag(pyxb.namespace.ExpandedName(None, 'DEFAULT-CASE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2162, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MUX._UseForTag(pyxb.namespace.ExpandedName(None, 'CASES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2163, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MUX._Automaton = _BuildAutomaton_357()




NRC_CONST._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CODED-VALUES'), CODED_VALUES, scope=NRC_CONST, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2287, 0)))

NRC_CONST._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DIAG-CODED-TYPE'), DIAG_CODED_TYPE, scope=NRC_CONST, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2288, 0)))

def _BuildAutomaton_358 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_358
    del _BuildAutomaton_358
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2542, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2543, 0))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NRC_CONST._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NRC_CONST._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NRC_CONST._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NRC_CONST._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NRC_CONST._UseForTag(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2542, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NRC_CONST._UseForTag(pyxb.namespace.ExpandedName(None, 'BIT-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2543, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NRC_CONST._UseForTag(pyxb.namespace.ExpandedName(None, 'CODED-VALUES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2287, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NRC_CONST._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-CODED-TYPE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2288, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
NRC_CONST._Automaton = _BuildAutomaton_358()




PARAM_LENGTH_INFO_TYPE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LENGTH-KEY-REF'), ODXLINK, scope=PARAM_LENGTH_INFO_TYPE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2398, 0)))

def _BuildAutomaton_359 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_359
    del _BuildAutomaton_359
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PARAM_LENGTH_INFO_TYPE._UseForTag(pyxb.namespace.ExpandedName(None, 'LENGTH-KEY-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2398, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PARAM_LENGTH_INFO_TYPE._Automaton = _BuildAutomaton_359()




PHYS_CONST._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PHYS-CONSTANT-VALUE'), pyxb.binding.datatypes.string, scope=PHYS_CONST, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2432, 0)))

PHYS_CONST._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DOP-REF'), ODXLINK, scope=PHYS_CONST, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2434, 0)))

PHYS_CONST._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DOP-SNREF'), SNREF, scope=PHYS_CONST, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2435, 0)))

def _BuildAutomaton_360 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_360
    del _BuildAutomaton_360
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2542, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2543, 0))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PHYS_CONST._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PHYS_CONST._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PHYS_CONST._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PHYS_CONST._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PHYS_CONST._UseForTag(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2542, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PHYS_CONST._UseForTag(pyxb.namespace.ExpandedName(None, 'BIT-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2543, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PHYS_CONST._UseForTag(pyxb.namespace.ExpandedName(None, 'PHYS-CONSTANT-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2432, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PHYS_CONST._UseForTag(pyxb.namespace.ExpandedName(None, 'DOP-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2434, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PHYS_CONST._UseForTag(pyxb.namespace.ExpandedName(None, 'DOP-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2435, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PHYS_CONST._Automaton = _BuildAutomaton_360()




PROTOCOL._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'COMPARAM-SPEC-REF'), ODXLINK, scope=PROTOCOL, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2645, 0)))

PROTOCOL._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PROT-STACK-SNREF'), SNREF, scope=PROTOCOL, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2646, 0)))

PROTOCOL._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PARENT-REFS'), PARENT_REFS, scope=PROTOCOL, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2647, 0)))

def _BuildAutomaton_361 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_361
    del _BuildAutomaton_361
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 845, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 846, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 847, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 848, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 849, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 850, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 851, 0))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 852, 0))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 853, 0))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 854, 0))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 855, 0))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 856, 0))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 857, 0))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 858, 0))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 859, 0))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1734, 0))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2646, 0))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2647, 0))
    counters.add(cc_19)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PROTOCOL._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PROTOCOL._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PROTOCOL._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PROTOCOL._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 845, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PROTOCOL._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPANY-DATAS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 846, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PROTOCOL._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASSS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 847, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PROTOCOL._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-DATA-DICTIONARY-SPEC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 848, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PROTOCOL._UseForTag(pyxb.namespace.ExpandedName(None, 'DIAG-COMMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 849, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PROTOCOL._UseForTag(pyxb.namespace.ExpandedName(None, 'REQUESTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 850, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PROTOCOL._UseForTag(pyxb.namespace.ExpandedName(None, 'POS-RESPONSES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 851, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PROTOCOL._UseForTag(pyxb.namespace.ExpandedName(None, 'NEG-RESPONSES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 852, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PROTOCOL._UseForTag(pyxb.namespace.ExpandedName(None, 'GLOBAL-NEG-RESPONSES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 853, 0))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PROTOCOL._UseForTag(pyxb.namespace.ExpandedName(None, 'IMPORT-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 854, 0))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PROTOCOL._UseForTag(pyxb.namespace.ExpandedName(None, 'STATE-CHARTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 855, 0))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PROTOCOL._UseForTag(pyxb.namespace.ExpandedName(None, 'ADDITIONAL-AUDIENCES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 856, 0))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PROTOCOL._UseForTag(pyxb.namespace.ExpandedName(None, 'SUB-COMPONENTS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 857, 0))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PROTOCOL._UseForTag(pyxb.namespace.ExpandedName(None, 'LIBRARYS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 858, 0))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PROTOCOL._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 859, 0))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PROTOCOL._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPARAM-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1734, 0))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PROTOCOL._UseForTag(pyxb.namespace.ExpandedName(None, 'COMPARAM-SPEC-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2645, 0))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(PROTOCOL._UseForTag(pyxb.namespace.ExpandedName(None, 'PROT-STACK-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2646, 0))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(PROTOCOL._UseForTag(pyxb.namespace.ExpandedName(None, 'PARENT-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2647, 0))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, True) ]))
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PROTOCOL._Automaton = _BuildAutomaton_361()




def _BuildAutomaton_362 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_362
    del _BuildAutomaton_362
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2412, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2414, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2415, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2416, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2417, 0))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PROTOCOL_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-DIAG-COMMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2412, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PROTOCOL_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-VARIABLES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2414, 0))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PROTOCOL_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-DOPS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2415, 0))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PROTOCOL_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-TABLES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2416, 0))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(PROTOCOL_REF._UseForTag(pyxb.namespace.ExpandedName(None, 'NOT-INHERITED-GLOBAL-NEG-RESPONSES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2417, 0))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PROTOCOL_REF._Automaton = _BuildAutomaton_362()




RESERVED._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BIT-LENGTH'), STD_ANON_6, scope=RESERVED, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2774, 0)))

def _BuildAutomaton_363 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_363
    del _BuildAutomaton_363
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2542, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2543, 0))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RESERVED._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RESERVED._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RESERVED._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RESERVED._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RESERVED._UseForTag(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2542, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RESERVED._UseForTag(pyxb.namespace.ExpandedName(None, 'BIT-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2543, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RESERVED._UseForTag(pyxb.namespace.ExpandedName(None, 'BIT-LENGTH')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2774, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RESERVED._Automaton = _BuildAutomaton_363()




SINGLE_ECU_JOB._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PROG-CODES'), PROG_CODES, scope=SINGLE_ECU_JOB, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2975, 0)))

SINGLE_ECU_JOB._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'INPUT-PARAMS'), INPUT_PARAMS, scope=SINGLE_ECU_JOB, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2976, 0)))

SINGLE_ECU_JOB._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OUTPUT-PARAMS'), OUTPUT_PARAMS, scope=SINGLE_ECU_JOB, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2977, 0)))

SINGLE_ECU_JOB._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NEG-OUTPUT-PARAMS'), NEG_OUTPUT_PARAMS, scope=SINGLE_ECU_JOB, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2978, 0)))

def _BuildAutomaton_364 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_364
    del _BuildAutomaton_364
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 782, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 783, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 784, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 785, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 786, 0))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 787, 0))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 788, 0))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 790, 0))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2976, 0))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2977, 0))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2978, 0))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SINGLE_ECU_JOB._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SINGLE_ECU_JOB._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SINGLE_ECU_JOB._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SINGLE_ECU_JOB._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 782, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SINGLE_ECU_JOB._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 783, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SINGLE_ECU_JOB._UseForTag(pyxb.namespace.ExpandedName(None, 'FUNCT-CLASS-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 784, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SINGLE_ECU_JOB._UseForTag(pyxb.namespace.ExpandedName(None, 'AUDIENCE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 785, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SINGLE_ECU_JOB._UseForTag(pyxb.namespace.ExpandedName(None, 'PROTOCOL-SNREFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 786, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SINGLE_ECU_JOB._UseForTag(pyxb.namespace.ExpandedName(None, 'RELATED-DIAG-COMM-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 787, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SINGLE_ECU_JOB._UseForTag(pyxb.namespace.ExpandedName(None, 'PRE-CONDITION-STATE-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 788, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SINGLE_ECU_JOB._UseForTag(pyxb.namespace.ExpandedName(None, 'STATE-TRANSITION-REFS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 790, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SINGLE_ECU_JOB._UseForTag(pyxb.namespace.ExpandedName(None, 'PROG-CODES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2975, 0))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(SINGLE_ECU_JOB._UseForTag(pyxb.namespace.ExpandedName(None, 'INPUT-PARAMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2976, 0))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(SINGLE_ECU_JOB._UseForTag(pyxb.namespace.ExpandedName(None, 'OUTPUT-PARAMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2977, 0))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(SINGLE_ECU_JOB._UseForTag(pyxb.namespace.ExpandedName(None, 'NEG-OUTPUT-PARAMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2978, 0))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SINGLE_ECU_JOB._Automaton = _BuildAutomaton_364()




STANDARD_LENGTH_TYPE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BIT-LENGTH'), STD_ANON_11, scope=STANDARD_LENGTH_TYPE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3062, 0)))

STANDARD_LENGTH_TYPE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BIT-MASK'), pyxb.binding.datatypes.hexBinary, scope=STANDARD_LENGTH_TYPE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3069, 0)))

def _BuildAutomaton_365 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_365
    del _BuildAutomaton_365
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3069, 0))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(STANDARD_LENGTH_TYPE._UseForTag(pyxb.namespace.ExpandedName(None, 'BIT-LENGTH')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3062, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(STANDARD_LENGTH_TYPE._UseForTag(pyxb.namespace.ExpandedName(None, 'BIT-MASK')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3069, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
STANDARD_LENGTH_TYPE._Automaton = _BuildAutomaton_365()




SYSTEM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DOP-REF'), ODXLINK, scope=SYSTEM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3267, 0)))

SYSTEM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DOP-SNREF'), SNREF, scope=SYSTEM, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3268, 0)))

def _BuildAutomaton_366 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_366
    del _BuildAutomaton_366
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2542, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2543, 0))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SYSTEM._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SYSTEM._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SYSTEM._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SYSTEM._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SYSTEM._UseForTag(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2542, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SYSTEM._UseForTag(pyxb.namespace.ExpandedName(None, 'BIT-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2543, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SYSTEM._UseForTag(pyxb.namespace.ExpandedName(None, 'DOP-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3267, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SYSTEM._UseForTag(pyxb.namespace.ExpandedName(None, 'DOP-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3268, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SYSTEM._Automaton = _BuildAutomaton_366()




TABLE_ENTRY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TARGET'), ROW_FRAGMENT, scope=TABLE_ENTRY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3326, 0)))

TABLE_ENTRY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TABLE-ROW-REF'), ODXLINK, scope=TABLE_ENTRY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3327, 0)))

def _BuildAutomaton_367 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_367
    del _BuildAutomaton_367
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2542, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2543, 0))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE_ENTRY._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE_ENTRY._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE_ENTRY._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE_ENTRY._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE_ENTRY._UseForTag(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2542, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE_ENTRY._UseForTag(pyxb.namespace.ExpandedName(None, 'BIT-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2543, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE_ENTRY._UseForTag(pyxb.namespace.ExpandedName(None, 'TARGET')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3326, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TABLE_ENTRY._UseForTag(pyxb.namespace.ExpandedName(None, 'TABLE-ROW-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3327, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TABLE_ENTRY._Automaton = _BuildAutomaton_367()




TABLE_KEY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TABLE-ROW-REF'), ODXLINK, scope=TABLE_KEY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3339, 0)))

TABLE_KEY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TABLE-REF'), ODXLINK, scope=TABLE_KEY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3754, 0)))

TABLE_KEY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TABLE-ROW-SNREF'), SNREF, scope=TABLE_KEY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3755, 0)))

TABLE_KEY._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TABLE-SNREF'), SNREF, scope=TABLE_KEY, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3766, 0)))

def _BuildAutomaton_368 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_368
    del _BuildAutomaton_368
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2542, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2543, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3755, 0))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3767, 0))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE_KEY._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE_KEY._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE_KEY._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE_KEY._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE_KEY._UseForTag(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2542, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE_KEY._UseForTag(pyxb.namespace.ExpandedName(None, 'BIT-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2543, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TABLE_KEY._UseForTag(pyxb.namespace.ExpandedName(None, 'TABLE-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3754, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TABLE_KEY._UseForTag(pyxb.namespace.ExpandedName(None, 'TABLE-ROW-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3755, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TABLE_KEY._UseForTag(pyxb.namespace.ExpandedName(None, 'TABLE-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3766, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TABLE_KEY._UseForTag(pyxb.namespace.ExpandedName(None, 'TABLE-ROW-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3767, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TABLE_KEY._UseForTag(pyxb.namespace.ExpandedName(None, 'TABLE-ROW-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3339, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TABLE_KEY._Automaton = _BuildAutomaton_368()




TABLE_STRUCT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TABLE-KEY-REF'), ODXLINK, scope=TABLE_STRUCT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3400, 0)))

TABLE_STRUCT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TABLE-KEY-SNREF'), SNREF, scope=TABLE_STRUCT, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3401, 0)))

def _BuildAutomaton_369 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_369
    del _BuildAutomaton_369
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2542, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2543, 0))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE_STRUCT._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE_STRUCT._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE_STRUCT._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE_STRUCT._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE_STRUCT._UseForTag(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2542, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TABLE_STRUCT._UseForTag(pyxb.namespace.ExpandedName(None, 'BIT-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2543, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TABLE_STRUCT._UseForTag(pyxb.namespace.ExpandedName(None, 'TABLE-KEY-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3400, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TABLE_STRUCT._UseForTag(pyxb.namespace.ExpandedName(None, 'TABLE-KEY-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3401, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TABLE_STRUCT._Automaton = _BuildAutomaton_369()




VALUE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PHYSICAL-DEFAULT-VALUE'), pyxb.binding.datatypes.string, scope=VALUE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3566, 0)))

VALUE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DOP-REF'), ODXLINK, scope=VALUE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3568, 0)))

VALUE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DOP-SNREF'), SNREF, scope=VALUE, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3569, 0)))

def _BuildAutomaton_370 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_370
    del _BuildAutomaton_370
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2542, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2543, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3566, 0))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2388, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'BYTE-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2542, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'BIT-POSITION')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 2543, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'PHYSICAL-DEFAULT-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3566, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'DOP-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3568, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VALUE._UseForTag(pyxb.namespace.ExpandedName(None, 'DOP-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3569, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VALUE._Automaton = _BuildAutomaton_370()




DYNAMIC_ENDMARKER_FIELD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-REF'), DYN_END_DOP_REF, scope=DYNAMIC_ENDMARKER_FIELD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1075, 0)))

def _BuildAutomaton_371 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_371
    del _BuildAutomaton_371
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DYNAMIC_ENDMARKER_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DYNAMIC_ENDMARKER_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DYNAMIC_ENDMARKER_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DYNAMIC_ENDMARKER_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DYNAMIC_ENDMARKER_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DYNAMIC_ENDMARKER_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'BASIC-STRUCTURE-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1452, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DYNAMIC_ENDMARKER_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'BASIC-STRUCTURE-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1453, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DYNAMIC_ENDMARKER_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'ENV-DATA-DESC-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1456, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DYNAMIC_ENDMARKER_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'ENV-DATA-DESC-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1457, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DYNAMIC_ENDMARKER_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'DATA-OBJECT-PROP-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1075, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DYNAMIC_ENDMARKER_FIELD._Automaton = _BuildAutomaton_371()




DYNAMIC_LENGTH_FIELD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OFFSET'), pyxb.binding.datatypes.unsignedInt, scope=DYNAMIC_LENGTH_FIELD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1091, 0)))

DYNAMIC_LENGTH_FIELD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DETERMINENUMBER-OF-ITEMS'), DETERMINE_NUMBER_OF_ITEMS, scope=DYNAMIC_LENGTH_FIELD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1092, 0)))

def _BuildAutomaton_372 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_372
    del _BuildAutomaton_372
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DYNAMIC_LENGTH_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DYNAMIC_LENGTH_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DYNAMIC_LENGTH_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DYNAMIC_LENGTH_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DYNAMIC_LENGTH_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DYNAMIC_LENGTH_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'BASIC-STRUCTURE-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1452, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DYNAMIC_LENGTH_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'BASIC-STRUCTURE-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1453, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DYNAMIC_LENGTH_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'ENV-DATA-DESC-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1456, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DYNAMIC_LENGTH_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'ENV-DATA-DESC-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1457, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DYNAMIC_LENGTH_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'OFFSET')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1091, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DYNAMIC_LENGTH_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'DETERMINENUMBER-OF-ITEMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1092, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DYNAMIC_LENGTH_FIELD._Automaton = _BuildAutomaton_372()




END_OF_PDU_FIELD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MAX-NUMBER-OF-ITEMS'), pyxb.binding.datatypes.unsignedInt, scope=END_OF_PDU_FIELD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1329, 0)))

END_OF_PDU_FIELD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MIN-NUMBER-OF-ITEMS'), pyxb.binding.datatypes.unsignedInt, scope=END_OF_PDU_FIELD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1330, 0)))

def _BuildAutomaton_373 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_373
    del _BuildAutomaton_373
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1329, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1330, 0))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(END_OF_PDU_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(END_OF_PDU_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(END_OF_PDU_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(END_OF_PDU_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(END_OF_PDU_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(END_OF_PDU_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'BASIC-STRUCTURE-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1452, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(END_OF_PDU_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'BASIC-STRUCTURE-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1453, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(END_OF_PDU_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'ENV-DATA-DESC-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1456, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(END_OF_PDU_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'ENV-DATA-DESC-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1457, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(END_OF_PDU_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'MAX-NUMBER-OF-ITEMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1329, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(END_OF_PDU_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'MIN-NUMBER-OF-ITEMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1330, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
END_OF_PDU_FIELD._Automaton = _BuildAutomaton_373()




ENV_DATA._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ALL-VALUE'), ALL_VALUE, scope=ENV_DATA, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1346, 0)))

ENV_DATA._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DTC-VALUES'), DTC_VALUES, scope=ENV_DATA, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1347, 0)))

def _BuildAutomaton_374 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_374
    del _BuildAutomaton_374
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 150, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 151, 0))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ENV_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ENV_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ENV_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ENV_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ENV_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ENV_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'BYTE-SIZE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 150, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ENV_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'PARAMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 151, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ENV_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'ALL-VALUE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1346, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ENV_DATA._UseForTag(pyxb.namespace.ExpandedName(None, 'DTC-VALUES')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1347, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ENV_DATA._Automaton = _BuildAutomaton_374()




STATIC_FIELD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FIXED-NUMBER-OF-ITEMS'), pyxb.binding.datatypes.unsignedInt, scope=STATIC_FIELD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3146, 0)))

STATIC_FIELD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ITEM-BYTE-SIZE'), pyxb.binding.datatypes.unsignedInt, scope=STATIC_FIELD, location=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3147, 0)))

def _BuildAutomaton_375 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_375
    del _BuildAutomaton_375
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(STATIC_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(STATIC_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(STATIC_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(STATIC_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(STATIC_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(STATIC_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'BASIC-STRUCTURE-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1452, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(STATIC_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'BASIC-STRUCTURE-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1453, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(STATIC_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'ENV-DATA-DESC-REF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1456, 0))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(STATIC_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'ENV-DATA-DESC-SNREF')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 1457, 0))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(STATIC_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'FIXED-NUMBER-OF-ITEMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3146, 0))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(STATIC_FIELD._UseForTag(pyxb.namespace.ExpandedName(None, 'ITEM-BYTE-SIZE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3147, 0))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
STATIC_FIELD._Automaton = _BuildAutomaton_375()




def _BuildAutomaton_376 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_376
    del _BuildAutomaton_376
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 150, 0))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 151, 0))
    counters.add(cc_5)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(STRUCTURE._UseForTag(pyxb.namespace.ExpandedName(None, 'SHORT-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3741, 0))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(STRUCTURE._UseForTag(pyxb.namespace.ExpandedName(None, 'LONG-NAME')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3748, 0))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(STRUCTURE._UseForTag(pyxb.namespace.ExpandedName(None, 'DESC')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 3749, 0))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(STRUCTURE._UseForTag(pyxb.namespace.ExpandedName(None, 'ADMIN-DATA')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 985, 0))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(STRUCTURE._UseForTag(pyxb.namespace.ExpandedName(None, 'SDGS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 986, 0))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(STRUCTURE._UseForTag(pyxb.namespace.ExpandedName(None, 'BYTE-SIZE')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 150, 0))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(STRUCTURE._UseForTag(pyxb.namespace.ExpandedName(None, 'PARAMS')), pyxb.utils.utility.Location('E:\\Projects\\Python\\Nxtr\\ODX\\Schema\\odx.xsd', 151, 0))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
STRUCTURE._Automaton = _BuildAutomaton_376()

